flake8                    MainProcess     83 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    MainProcess    183 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    MainProcess    183 DEBUG    Extending default select list with ['B']
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    MainProcess    183 DEBUG    Extending default select list with ['C90']
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    MainProcess    183 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000024C98AC5EE0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    MainProcess    183 DEBUG    Extending default select list with ['F']
flake8.options.manager    MainProcess    183 DEBUG    Extending default select list with ['E']
flake8.options.manager    MainProcess    183 DEBUG    Extending default select list with ['W']
flake8.options.config     MainProcess    183 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     MainProcess    183 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     MainProcess    183 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator MainProcess    183 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator MainProcess    183 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator MainProcess    183 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            MainProcess    183 INFO     Making checkers
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.github" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.pytest_cache" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.specify" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    ".venv" has been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.vscode" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "backups" has been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\BUG_REPORTS" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\htmlcov" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\scripts" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\specs" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\src" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\temp_test" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\tests" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\tmp_cli_test" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.assistant-consent" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.coverage" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.flake8" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.gitignore" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.pre-commit-config.yaml" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\AI_INSTRUCTIONS.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\CHANGELOG.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\conftest.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\CONTRIBUTING.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\COPILOT_CROSSCHECK.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\flake8_out.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\flake8_run.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\flake8_verbose.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\interactive_deletions.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\interactive_resolver.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\interactive_scan_results.yaml" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\Makefile" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\package.json" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\pyproject.toml" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\pytest.ini" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\README.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\requirements-dev.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\requirements.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\requirements.txt.bak" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\results.yaml" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\run_all_trace.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\setup.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\SPECIFY_ASSUMPTIONS.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\stderr.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\stdout.txt" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\TEST_ISSUES.md" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\tmp_debug_runner.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\tmp_debug_runner2.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\tsconfig.json" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\x17.yaml" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\__init__.py" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\info" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\objects" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\refs" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\COMMIT_EDITMSG" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\config" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\description" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\FETCH_HEAD" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\HEAD" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\index" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\ORIG_HEAD" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\packed-refs" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\applypatch-msg.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\commit-msg.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\fsmonitor-watchman.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\post-update.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\pre-applypatch.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\pre-commit.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\pre-merge-commit.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\pre-push.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\pre-rebase.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\pre-receive.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\prepare-commit-msg.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\push-to-checkout.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\sendemail-validate.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\hooks\update.sample" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\info\exclude" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\HEAD" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\remotes" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\stash" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\copilot" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\002-hash-comparison" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\003-onedrive-compat-the" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\003-onedrive-compat-the-config-file" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\004-generalize-file-support" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\main" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\heads\copilot\fix-74fbb440-13ed-46c6-b488-59be14ce3be1" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\remotes\origin" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\remotes\origin\004-generalize-file-support" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\remotes\origin\HEAD" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\logs\refs\remotes\origin\main" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\objects\00" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\objects\01" has not been excluded
flake8.discover_files     MainProcess    183 DEBUG    "E:\specify-playground\.git\objects\02" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\03" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\04" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\05" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\06" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\07" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\08" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\09" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\0a" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\0b" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\0c" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\0d" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\0e" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\0f" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\10" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\11" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\12" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\13" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\14" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\15" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\16" has not been excluded
flake8.discover_files     MainProcess    198 DEBUG    "E:\specify-playground\.git\objects\17" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\18" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\19" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\1a" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\1c" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\1d" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\1e" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\1f" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\20" has not been excluded
flake8.discover_files     MainProcess    199 DEBUG    "E:\specify-playground\.git\objects\21" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\22" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\23" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\24" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\25" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\26" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\27" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\28" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\29" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\2a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\2c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\2d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\2e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\2f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\30" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\31" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\32" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\33" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\34" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\35" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\36" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\37" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\38" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\39" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\3a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\3b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\3c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\3d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\3e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\3f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\40" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\41" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\42" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\43" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\44" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\45" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\46" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\48" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\49" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\4a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\4b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\4c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\4d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\4e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\4f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\50" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\51" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\52" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\53" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\54" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\55" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\56" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\57" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\58" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\59" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\5a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\5b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\5c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\5d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\5e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\5f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\60" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\61" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\62" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\63" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\64" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\65" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\66" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\67" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\69" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\6a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\6b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\6c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\6d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\6e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\6f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\70" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\71" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\72" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\73" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\74" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\75" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\76" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\77" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\78" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\79" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\7a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\7b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\7d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\7e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\7f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\80" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\81" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\82" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\83" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\84" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\85" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\86" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\87" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\88" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\89" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\8a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\8b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\8c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\8d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\8e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\8f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\90" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\91" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\92" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\93" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\94" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\95" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\96" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\97" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\98" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\99" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\9a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\9b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\9c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\9d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\9e" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\9f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a0" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a5" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\a9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\aa" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ab" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ac" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ad" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ae" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\af" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b0" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b5" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\b9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ba" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\bb" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\bc" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\bd" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\be" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\bf" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c0" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c5" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\c9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ca" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\cb" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\cc" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\cd" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ce" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\cf" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d0" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d5" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\d9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\da" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\db" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\dc" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\dd" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\de" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\df" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e0" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e5" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\e9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ea" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\eb" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ec" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ed" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ee" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ef" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f0" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\f9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\fa" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\fb" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\fd" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\fe" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\ff" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\info" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\pack" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\00\005c5f9aef1274e393261ecceda5444f02668d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\00\2d4cec1e5b5ac2258341f14217061035b24fad" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\00\34015ff11bf327b60d03df7f288fe91ec04ae7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\01\28992ab3a50e2c0a3781e15942f66c1209ea5f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\01\5aa3fa55a9b11ea87b2aa963ab3d77bdf23f44" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\01\5f279a4862f3e86cb9aed4cf7dc1186df11579" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\01\5fc64b39c6c62f0e607aeebb0e0ca481c83955" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\02\5df53e0a79f165b30e7e1de621c3019d70ecf2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\02\966c45d7850567ae8a0eebe01f6a81674181c9" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\03\24c672f274c2aeb8f60071837c925fb66e2873" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\03\35b835893c4e048a5cd9f6937e56874e2cdd3b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\03\d1a7832fd16c0d6a603266b1c1635640faf02d" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\04\6a3b65b5f6d7ed944fca341ad76c466c4de9b2" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\04\9f34f2e62d9fd573c8c276cde34f125395d7dd" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\04\c06c838cb7604a4779969291afbcca81c122e1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\05\5382b2d6b6532a711dc2329de27cfd4c95f62c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\05\7c5c413036f8dd59a44e67088a8ba3173f41c8" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\05\d96020f298b2378cae81ee00f1e0bec8222609" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\05\ed54d6bf2a88e7d81ed7482a019b53438c0a3a" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\06\3c6ceb2b095e5df94137d3a04521d9668172b3" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\06\6400a17dcd79291188df58ffc52ea9685de558" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\07\9ba98bfa648b98bfe6862a507bdae7d4074ca6" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\07\e0fb0ac84251d258ee09655b35b2f550c9c373" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\08\303a7dd7bb1a06760bddad3806432d9fec87c1" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\08\5296528ce8a9ab4de7b6788ec8ebe3cfbe512c" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\09\281df12af103c5bd669e788f1de4708afa2bc4" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\09\2d2b90dbe192e52a7adf666dedabca108794b7" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\09\4f779733cfa186f58994eaa84c9b4bbd2830dc" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\09\b50d19e2a32804bc70ced0dd250e150806c13b" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\0a\62b4225d6e306f589c33e04a658225cf2ba89f" has not been excluded
flake8.discover_files     MainProcess    200 DEBUG    "E:\specify-playground\.git\objects\0a\7d17fa29f1de219ca4b2114142ea8dd373ce21" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0a\7ea4cc360846a284c6641cdda73247b4c5a321" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0a\e49ec81e1c80d99684e89922d7cf0fb307891b" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0b\93805657fd69d53783915e4f0c3c816c3ca4ee" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0b\d2d32c38371e165d1b4082daa57187ca04a95e" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0c\0e76dbab9c464d146f2bf21db0007924390e4c" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0c\2448de53cd6d2e4ac71dc929f82b311fd79360" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0c\3d5829700c92e84ce69a5b3dff1f516ef8c477" has not been excluded
flake8.discover_files     MainProcess    215 DEBUG    "E:\specify-playground\.git\objects\0d\3b846ed241925f647831b343ecf1a54ab163c3" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0d\7bd42c7ca2bbe02227021bc84adc2a6a21a92a" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0e\1ea989a6bb0e9fda8bfac5ac943ebd94de2e58" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0e\5b907b706a97e5293841e83a260db3dbf7abc9" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0e\9132cc8d72e1079db2c82780b0b170a2205b28" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0f\075e94c08b7bab31d04c508b36211266163fde" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0f\4ee6f7e196996407cc1b9f66b416f0673c0938" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\0f\64d3061e904a257c9cd7f2edd5f9885a1cee29" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\10\03df70a2f0e528b2a1df2c873271ed4de7789d" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\10\e8973484954fed14409ce852868a42ed8701a4" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\10\f5f74655254dca46e795b91d9be6f50b6cb0a8" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\10\fd7105678138406538f650259adc643685df88" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\11\7a9d41fd44577e97e90cf9201ac1631bdb191d" has not been excluded
flake8.discover_files     MainProcess    216 DEBUG    "E:\specify-playground\.git\objects\11\fd6b316eafeca1fa4b3ac7a75ca8db5d575698" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\12\8bf6e956eca44a25aa880bc252a4da444cf54b" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\12\91b4e5e09c3f9310ba0cc4fb528bb39ea2b527" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\12\ac5834754d79a4778d0f448c4fc62390524670" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\12\c37e051d95a0541944411bc4ebd11c369661ad" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\12\e52d9e136c8d8e0fc4a736dc35539996ef1214" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\12\f3db2af8b2ea435f66a448c9c8e613c7849b06" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\13\5264e1e287cb6cb7ee5ffdf4150523f306edd7" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\13\6991be7adfe153f7e4979c049608f3ffa66b05" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\13\8a5fd9e5852da39d0f7e572475f4a1ba05ee8b" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\13\b247230681182e7cdf8ec7ec98f37eee6d7e58" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\13\ccd7afd92873ed4f28c4afadd14e97b69dce01" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\14\648d1633b1c3b3b0b18f496667c79a65931ce9" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\14\680df459bfbedda3b81e31a356c3f50fc5dd9c" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\14\af007083da8a9702cd8cfee8c30c62d1825c86" has not been excluded
flake8.discover_files     MainProcess    217 DEBUG    "E:\specify-playground\.git\objects\14\e3bd62cdff39daf4912490e6d810f1e06188d2" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\15\3887de4369de47454256d70562873cd93d381c" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\15\c3ac831beedc6601ede1bbad1ca47257335c2e" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\15\cc5c495b8e0e01267649c00545bfabfb3486e4" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\15\d4a2980c668a500f09b056971827257bad1cd5" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\16\1e5ab02c4f29a0fd2336dcc72fcdc5bc8ae3cf" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\16\393b82f7605a588e4b69852d230b36eddf7d07" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\16\ab307bf6dd3ddb0197efce56f2ff99890a1ddf" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\16\c67aeca619c13e788a4448859f1b730f269dde" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\16\e429954813305a2dec720ca94030cf35c76f32" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\17\0c5e5bf8ff85b5427e5c163ca8da916a3b713c" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\17\3b89bcda4fc80ea14e6512570f99d05bec4921" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\17\545328184958cb055f2bc0b89515f64a90c977" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\17\5e09e14ce1d83b243a2e86c70a0a26bb67c946" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\17\6e068e5e17ec4a51fa6ae94426968d68ccf2c9" has not been excluded
flake8.discover_files     MainProcess    218 DEBUG    "E:\specify-playground\.git\objects\17\a3ce13d95b98f98229791388146e16a4a58382" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\18\07598eb8e83872037aefb551caa27e3c163c51" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\18\ae8494205202bee84bb07487a98e6df1de47d5" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\18\fc1a268fac24dcc9af3726536d015026559712" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\19\645f6a2fb418a7ce23389270b5a37204e19de2" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\19\8a878a3c62c1627a0bff6a3c95e3b049b9342e" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1a\8434f6dc14af953db12233aeefef11cddd39db" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1a\c247cf2a87d9533e2c3c7e27319d9e8e51e559" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1a\f592c67300688b68fd5d554354ecaee3f5bfb4" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1c\92478dca5eefb59a1ccf70ab9a41333775bad3" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1d\3c1ce0d9fc2879417d0b9b49442357dee12d2b" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1d\3fd6edc674f0a4b8cace93ce6d9eb16bcc535d" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1d\4aeff17fc374d03daf30b39a3c97215eb4ec46" has not been excluded
flake8.discover_files     MainProcess    219 DEBUG    "E:\specify-playground\.git\objects\1d\66968ea5790dce1c97cf5afbb2a5a8a8516e00" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1d\b603a64d748ca7290159ac9fda57efaefbd2f9" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1e\09327784629ac2f436cd37e741ba5f77407b22" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1f\2f9a0aad68e7cbbcc06a95e21f561cb0a89032" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1f\509f24346932569bbb7811fa4974a3e8754db9" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1f\76cf6f91e95550b8df5a6cb325aa2256d307ed" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1f\a1df3300d5d249c2b6b1ec5b6b9ce9e68df678" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\1f\f9256012da5a3791891a7bb123046993068c3f" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\20\a34116e17291d1d4c82ec51923676a81b96022" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\20\e534f3b85405c4b937b23ce7fc6617a3373148" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\21\46c8f5bace39e110a274bc4bae45aa06bbb747" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\21\6d1100af8d28bbe6042401606d3f17252089f8" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\21\756a11974b4052b19c5eb3bf73842019b0f7fc" has not been excluded
flake8.discover_files     MainProcess    220 DEBUG    "E:\specify-playground\.git\objects\21\7704f24ff2cd4f81e70e0c82b395545467ee58" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\21\cfaef78a8f389ee6dba9d259f69e93707eff63" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\21\d4990259a2a794a3fe80dceffe9a7759ae7ed0" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\21\ee510e798dd7b6a4c42df83ae6141fc7ac3f18" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\22\a36df5865e3af9a6fb505a9351a1f4e32d0dac" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\22\b390b031344b5ae750b359229af64f00c04270" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\22\dddd3094f4ea76b52e2805e6afe38af8694de9" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\23\1b6f9635f19ef2429c4eaa453b81cc25aaa47a" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\23\1ebd6e1d75fb54964f050dc5fd1eb90f0c723f" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\23\2f9df7bb72e232a823e1bcf5a24d61d0dc49ab" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\23\5a9a01f3b7e67356962fcae6fd3762e6e3c932" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\23\76a6b966fa6aa17cdd7c08e88cf1aa3857f822" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\23\981870d715156735f2e7b1fed3c79dd7949f7f" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\24\501bf60267800c71deb87311d84474cd9b338a" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\24\a486c306211f58db41ba9e0e20ba29df8ce022" has not been excluded
flake8.discover_files     MainProcess    221 DEBUG    "E:\specify-playground\.git\objects\24\a5ccd750527348297b4eacaea9efd800ff8759" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\24\b1b8d52f1c5960f08ce414333752b1fe472986" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\24\b4b6a3b84957a0a3e98bfc1fb08cdb040a2ca7" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\25\195faf6df42221f9dcc5b50680eea6d794cb68" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\25\67f85df409f4615d047e713440d00b1645f1af" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\25\8181c429352944c0dd9be3ceab56deb66f1006" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\25\c7252d2cf908ce0d602014a13bb3fb772202c6" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\25\d597002ad5cda96a320ef0470c75b855242913" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\12e142e967a4e00487cbb2fb4f3cf099e3dae7" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\2a4e770a427d05aaf83b42551831b1d6f890e3" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\2aea0b69f5b5acd490e9d10f81803f7e44fcd0" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\3a89d9bf1d1ce9a57deecc97b26f2ccc2eb754" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\bb65b28c0e29492288136b1040e8769786d0c2" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\c75a10fa30cae1fc77bc923cc266016d40df88" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\d0b81b3d6e2d77d7019322a7f191c0c94fa2c4" has not been excluded
flake8.discover_files     MainProcess    222 DEBUG    "E:\specify-playground\.git\objects\26\fc96636605ee57a8900ac265013aa26653aaaa" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\27\2d61f2b1741ab64df2bd449ae7b02a6a3439ba" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\27\96c136589a45e2b9a6d69056abf8aa1573be84" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\27\f65d5ea32aa790269162ddd002c58704093be2" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\28\137ffd5d8144c53b59281e174fc9eb5b1ef582" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\28\c715fef3fc689fc9639d0b048b682d66cf3c5b" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\28\cb50d850757eaef9669854ff221bc9cc7d18c9" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\29\4c869d189b2c6c9be6b9e58f6efe14872d9cba" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\29\d5d58dcfd82529743a6ebd12eaf5472d356a34" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\29\db2298ab87d3b4f1f2cdcba62d32545b01c46d" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\29\df4adddc1141d9d4120ba46221ba2a55df622e" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\29\efb1b7bd8ae621af4322a5cf7ccc6ebb34dca2" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\2a\3e6954a3d8fa441490edf9740158452a253e67" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\2a\e09ea2b30974cfa66ea2f55f003c7dca91883e" has not been excluded
flake8.discover_files     MainProcess    223 DEBUG    "E:\specify-playground\.git\objects\2c\036a06f68703db3fde016c566d94785cc94ad8" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2d\1ab27cba490b4d5da5a8e849c1f29da629eb66" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2d\27ae4a0ed5ea813097d6e3945081516d6ea1bd" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2d\4119d138230fd86086f8c879e5f27bbec523a0" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2d\dddd7ba12b4ea034c1f70effcadb6424253812" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2e\8ca9edfd8ca1ec2c1db98633306b401e46a6b0" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2f\420e987d5863f72175ec3ad7884fef81c4afbd" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2f\812fc1b3405ea97218900586108bf8669f6771" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\2f\ca84859ceed3ee39e792a75054bbc197ef0ae1" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\30\39ee47b6c5ea91494c24056ae6274836aaf44b" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\31\2991147528b0ee1cf788d361e72c514add1586" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\31\4163998dd913ef4022768cf5b68cbb198a0827" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\31\68ebc6e5ad0cc8e67b08f1088f9b962b9b8d77" has not been excluded
flake8.discover_files     MainProcess    224 DEBUG    "E:\specify-playground\.git\objects\31\8991895b1542bf25feedde78c85816a6df5eb5" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\31\b4081ce8f14c6de40e942cad4b1510476bbe82" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\32\2f8ab55f5cc1981e24b43428d094292f243d3e" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\32\a607f62d3d961b3961ead67f9f10c91fc70a30" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\32\e0fd4a9dcb51db1157101c37ac9a81af902203" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\33\909668c63188ae71489c43eff9ae61ccc323a7" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\34\573214d821ef2d9051a644cb7c96685b8882a9" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\34\58b4b1e44ca1cca8b915ae18e2aab07ee3400f" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\34\7fdba51e7a3630121c84289f598f7620e6b55b" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\35\05e08ffa231277d46eacd31aa2a55c9d088c89" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\35\7e6dc0b4eb32975069ad538bd3be32ff75a2ea" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\35\9364c0e75464e6df019e2a80025c3cd11de5b2" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\35\cd3af412f2aa104923f0c1497614a19b94e6d2" has not been excluded
flake8.discover_files     MainProcess    225 DEBUG    "E:\specify-playground\.git\objects\35\d0bb0ee5e432f24ab221f73439bfefd1ceb9cf" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\36\0e736b0dcfefcc585a98917f76b898f0116960" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\36\7dc7a1640edf169663ccbdedb3dcd75f8c4d4e" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\36\a4cb6010c06bb0b7cc6633588fb7e670ac91fa" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\37\22d2da159363d9de1f83dc9b1ce8999663bf8d" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\38\a647273fbba50ed15b0b92ba672a53c56818ec" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\38\e3ada783066085119f95740594c13ffb46db74" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\39\6f78fd9b4ac07ce4d0ef5ded0bf72c61977f40" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\39\bd4e9841545dd787b11b021676bdd8e59e61cf" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\39\d582efe6cab9b4a0e008ddf583c05dd8412408" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\39\ef711e96e442a457b46e08284f0e6b1e04d1d7" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\3a\a67ef3b223bd0f12c43bc8d3a21e8d1d204f90" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\3a\cd7e696e0dfc963eefc7b66240232ed76cbfc4" has not been excluded
flake8.discover_files     MainProcess    226 DEBUG    "E:\specify-playground\.git\objects\3b\0c829a78d94553fd2414095e5bd19564e9004e" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3b\2e86610127c1c0b923f44a833d02d6a3e493d0" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3b\39fa37381c631e7c2d9f1ac9a6785248626c46" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3b\3e9572086cc4d419f1d1a9b00db8bb948da578" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3c\39ff22b4c18ede98cafaa1c1868b1cff1b2bd3" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3d\73dc2495d4aabcf894781104bc2e31174c0f3b" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3d\82ffa75de6336d16410012759fb00261a1ebf7" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3d\c6f590b64439e0e3110e7483f6cce4f581088a" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3d\e04763f1775e8c60eb776c823d92db5c78be5f" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3e\89fddeb561064d312d40dbb3f65d847e59c27d" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3e\a6c8d9aaa6688c487fa769f7b2b0ae12e29b4a" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3e\f1cdffa90542ad0172e3a2eab92c22ec419428" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3f\07ab5eacfa557ec929292f653fcebe097d45c7" has not been excluded
flake8.discover_files     MainProcess    227 DEBUG    "E:\specify-playground\.git\objects\3f\3c99169965be87c9e6855129bf6c445e1c72d3" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\3f\66ec724abeacbe9185de851847e54cef89747c" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\3f\9bf256aa3ff91f464d322904f6e704e2271342" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\04b726b3b6b8e87fd6d91edcf5f09db6f60af1" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\208515dca7d4f6f7ae76bccffe856c4c0e05ec" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\2c6d2cc3b4f4169358fbd04a267a841f5038ab" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\478b2034aa91a88bc1a830255092e7aeafbe7e" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\682eb8fd85e661e90a3ce97c0d0565c6f42bc3" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\7193d68fd5820759a1d032e9043101deb81441" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\acb6b2f7d3fdf8ec43761743eab61c6e646367" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\40\c6b562cc36f095e4045737393b3dbc6ad3c371" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\41\2056c281ab1eb6fb3ae903a654bc06e006963e" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\42\4f39a27041c858662d037ff2ba2270a3819fe5" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\42\6e409a344e5715b63adf4ad4ec4ebf1f1eb8c8" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\42\847b00a520ed1e4de0a7b29dcd21e443bcfec6" has not been excluded
flake8.discover_files     MainProcess    228 DEBUG    "E:\specify-playground\.git\objects\42\c2561855bae3e31515120a4157e6f29ccab35a" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\42\c62ca98d807a4994ee83e041c36da33bef1e27" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\43\349464572448cd243fdcc6bd1f73ee6d97c900" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\43\75132f94fe5091cb66d9c8a87dffeba212f898" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\43\94201706050bd1ce6fca156585041a4852c0ee" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\43\c2e28c1d082ff15ebc742f3555546e282fc342" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\43\d4b1299d391a6568ac699c3fc3d6f3364c256f" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\44\7dfcf8599cb609a1e679fa3387b9e1878e3de3" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\44\7e5b05ba0892a3ab610a6544214017cb9db0ee" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\45\7f74b5bab0f63b0de884292972d8acf5948d1a" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\45\90e401951c36ba9fc69d92c5550be408a9a894" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\45\adc8199e5940b24adfd6fca9d81c2fd760ebfa" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\45\b71558ba6b21660c2f4cf8ee5d47d38674c925" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\45\e477cd0021fb36a9af82e96ff7f42d58d59578" has not been excluded
flake8.discover_files     MainProcess    229 DEBUG    "E:\specify-playground\.git\objects\46\05549b1a244f4cccc0fc749dbd14959f515654" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\46\22cb178f2e8fa803dc743007c80a4f0c9ddf65" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\46\45025edc5f505c0cf65b7c8b0591b5f1d5a02d" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\46\543a1598c37ac2e3c5fe3b5e21cf6d243c71e6" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\46\a58509848045c2553caffd1bf88811ef48d878" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\46\f302938dc1405a99035a5665f1480007a53990" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\48\7a6937ab3f0a74da2b573b0fd8208d1285ffd3" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\48\ae78fca5ba4b006559b35d84de6dfcc09a0edf" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\49\60839f60061ce9b1b202aca2c5e1df1003abce" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\49\8ac2fd128b6d54b0571d5dc73957dca9832d60" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\49\9b53f6b5fc2badfb5c91a8d9bdf96d149a4659" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\49\ba331d93af633a25a346ab5319ad188808b58c" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\49\ddfcc47d54b91e7582a487a521047070d797ca" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\49\e458a59f40c52a367e4040df98775ff3ddd070" has not been excluded
flake8.discover_files     MainProcess    230 DEBUG    "E:\specify-playground\.git\objects\4a\2dbb1082e22b0248e53abe336f90efaf1f4f5b" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4a\a55abaf1ad4d363d4aeda663c1733849a60110" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4b\0085664fae210898121c1401026b6bf06bb5ae" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4b\05d8ded15541abe46d77c12fefad0f80d5b5a3" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4b\825dc642cb6eb9a060e54bf8d69288fbee4904" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4b\8d253d1f85e383ad4433b29febcbc2460fc2c5" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4b\932f324774a682c64c37748dbe47f977ae8b83" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4b\fd7f6223dac5c29157354411ef271aa7adf950" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4c\27fc2fbaa0fd63f2920152fca81b35c23a53e9" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4c\2d7991ce36670e0ee5129abc64f9f7b49ccd91" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4c\40cc56d6add34dd450221b9b0e768a69d1f643" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4c\975a8181828c66883b5ff83f0eb210caa81001" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4c\cd9ea5f300421c994cad63f97e6121441e8fdb" has not been excluded
flake8.discover_files     MainProcess    231 DEBUG    "E:\specify-playground\.git\objects\4d\d26921f2556b7184207529941ed044c9e99d67" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4e\1ea64bd891487d56ca6dc212b63559406c6847" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4e\34e0645cc86b50c17ab1ccb8e0ff40bfa41609" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4e\c29ddf705e9150ac056fba5656bf0e89555aa8" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4f\565acb1211e75aae6cf23e45b793b911bc10c5" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4f\58294474de8e599cc01f393220da8c853ea61f" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4f\9e6e31c91f530ef0fd0babeb48f11c752d7901" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\4f\f37cdda538579edffd824e248a1b22acacc1ad" has not been excluded
flake8.discover_files     MainProcess    232 DEBUG    "E:\specify-playground\.git\objects\50\0a055d51ddaee1cb3ab1712579c177619a2a3c" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\50\bfc182e036ecaa56f46f4e7aa6809b1d34e335" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\50\c3c3618ee6aea4d20c61f2fe1bf2624ba7f662" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\51\43b68c76d37b2c429e96b6a858f4001b30b7c3" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\51\6ca43283e4fcc7326095a28e2a9c235f4ad0af" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\51\dea9e26727e89c9a07ccd0110bde6f79ee7e27" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\52\075148c106f77f1881b412f46ff7da28606919" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\52\590e03d5cd63a8d726ec3bff27e17826cde2b1" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\52\63f1fd5aed81eb7c5c57f635cbab98b631eb0f" has not been excluded
flake8.discover_files     MainProcess    234 DEBUG    "E:\specify-playground\.git\objects\52\640ac66dc304f074d43a26d61b78417281ae28" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\52\bf48942a845e31fdd439889635693e4213ef7f" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\52\d85befaa06a4673f060cb01f484233abe087b0" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\53\b3182cf0aa09cf748bc8e486950049abecaf39" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\54\091101965bdb6caa9fb29adadb3cc4663f5634" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\54\81a2b6a757d4b72af620c1fdf9ea6182715748" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\54\f9c400b2d79a92422d2ff868863ceeeb93501c" has not been excluded
flake8.discover_files     MainProcess    235 DEBUG    "E:\specify-playground\.git\objects\55\02885b1e5a2078c944d12fb11a004e81cb3a0e" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\55\5474fabc16d5175eb8bf1f578e64f9191e7208" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\55\9882b01ae154c2d0dc221fa6988fcf35792644" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\55\e5d523415ba9f52d1d6531cb9afa589ccc328f" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\55\eb3aec3a52cc406259f5873698fd263fcac6ec" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\56\1caf43044c48f3fcdbea36a1e2028a730c560d" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\56\f3968a46e82b50bb188fea25bd94378c8793da" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\56\fb268194d0c88757936edb74db6a9489f96337" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\57\5e714c7365a32fdf3db56d1159c5358450ceda" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\57\e2ea28b3404b6b1f2027b3e819ea4dae038504" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\57\eb240abe98779097cb8c61e2f4150c199623be" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\58\324d60746262d5324b692a02f25f66af9e837f" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\58\cd44c27ca7ca1534a37892d6a34cf08302a4ff" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\59\2a54d766fb03d6535354f1ce553e36a0a3b520" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\59\2fb7239da187ae4fed3383d42527fb9bc36243" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\59\6b09d8490fd44efaef4bb3f93ce5f3e194c1db" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\59\e8cd68b94b31d087f148c0aa5497211f82054b" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5a\12a7c424d8814a93e2a135441a8e2db3b14dce" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5a\1874a197dc03643b6a03d3a63809699290a0e7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5a\5c29eb3a52dd25d95da8e73fca1eeb9acbc075" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5a\fe0a790fb92b9ee267eea6cc208f53e33c24f3" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5b\3b79e877238606e5aeaabd05d4956e82dc62dd" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5b\860b628dfbe33d7583306f48bc33ec1b714e28" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5b\96c772d4d7e9114b093b5e29ad06a70ab5b57d" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5b\a2d60b3fcd33702ee3c832ce7e24492e879f4b" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5b\b7c245f2fb34e5de9917a7719dfc41631e4858" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5b\f1af5e5c66a98e84eaf7070e1707ba411a1258" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5c\a89ffca0ed230f82176400330b4d314ca504bf" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5d\42e2981bf191a227385743530effce73339b8f" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5d\4690d0873c456b668af329af5e345d863683d6" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5d\7ff5a61b97519cca6211360d3e026b1eb30b03" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5d\b13e3a0ba84c145c3032c14ddc4a610b078896" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5d\ed8921c839133c5aed8694794e0a05a788d785" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5e\3f85fd14ac4e898123920bffae0c45ac4c117c" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5e\f4e94a88e608dae054ef3dfc53a50b6adbbf2a" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5f\0d15684bcb324b65bd217bd67f7f2ed2149470" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5f\26e44d6df45b239e284dd8325029a539ccd5eb" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5f\4d537d2cc3b1aa2bddf602519a463cff459bf4" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5f\802b13a7e57d9314d72642170ccc7e41b4172a" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\5f\b75fa80bc02b5d379bf643f8c160fe5aa70483" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\60\0069c7ecb9f60e1b49cc0d77110c3f7972979a" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\60\30569e994d0fe0f8cab6227221d930953ea2d7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\60\5527f6075fa2096ac31f6eb2a49e0e50d3c5f5" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\60\efaaa0ec3a8faaf7d58fd3d9f8053e91eefff7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\61\0c40ca814bf599d0ad470e1b4804feac47997f" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\61\0d2ff1187b0614c2106d023efa59c23faf2b82" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\61\25470d8531c55fe6aadab8100e73970ed2ef11" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\61\5dd7251f976d0d73ccd98c9bf44bf0130d7f51" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\61\ed843dca19a3fd7855cb4e75aee896897e3a4e" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\62\22c537bf4168fd9c3a8470f762e8df36c959f7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\62\37c9b3d7c4bc9656cdf78a2ef2a9a41b5735ba" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\62\a2ddf1b229c4edaf55175aa850f0088c41179f" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\63\3cee413f6d24f091968937072250f3fb5941f1" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\63\5645433e9f5cfd98d012bccb2824b36374a59d" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\63\e1291c42c16f7fc582a5b4a2c59f77305a2848" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\64\53bceb97065b27718c8cd269d3264f3412b482" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\64\c517bd2e8e08040f0cdb75ae93462b809e7a19" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\65\7dedbe40043778d4461b17b021bd8816c83ff6" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\65\ef8c2d2810fa287fae41fce5f58cffbf1170d5" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\65\fbd58c0a364559ad9c59528407d75bb7a4a06d" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\65\ffb87f63a0b12387b04b71b3987508028fdb72" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\66\48931c664f3ffcfb39974de63a4666f680a972" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\66\628d016b4c58783e5f1737da01e5b26175f530" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\66\931eff45c4673e5b728f25e981ea5ac6f18be8" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\66\9e3f54f52f468b7a7b958901a643dfe89a42e0" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\67\6168d391fbefa19da808c7d63aec25f0e20e76" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\67\72124fb2ad7982d6a7f149163a1bc18041046f" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\67\a2f171f07dbdb4a345a654718e3ad9e28bce1d" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\67\a8fd4eeadcf62cb421765ddb401a556200b7dc" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\69\b53642fc049ed9e7936e060817fdf3641e5c82" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\69\c6a719f953f6b07453594afa9dd8389a0b3096" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6a\a75ac7a9e3860344aa9a716149c3efa6622e41" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6b\26648f8e37d1bf88b5bf7855a81fece8079c87" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6b\e88dac9fee59cd7f48b43b24c89e48733bd816" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6c\2334736536007b2f5c819836f8c4ab230092c1" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6c\3675f8955b3c74ac5163e6252c623b16a665dc" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6c\4607714fa1b8b9aaf4d9696db6baefc1ee40e3" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6c\763387f4313c1e5ca9e3c0e53993b30484c10e" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6d\e18a166b656a86c0b6c0cda69c600ccf2a4fa7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6e\1397c965eb2884c79c1989395368a92ca0e19e" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6e\829db6a4845527d2cedd0869a0b419edee7163" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6e\b0f684a8c9386fdd405b39aea970b0a9359cfb" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6e\c20709a1f3dd40c1a6472f6c8961f814a6719a" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6e\dbd0353b3397e21618048811055497ca8268e7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6e\ebc1a110511eb9db953ab835d43d828e1440fc" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6f\1ae0a6c6f9f2fa4f654d585bb1484c66b61f18" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6f\30bfbf17ab50d4eb45114a0a4796d9b5d6f7a6" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6f\57efc6d59aac9f49d00f5d0993349631492530" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6f\e8820154152482b6f0e54b5a38143d3273cbf3" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\6f\ec70a5d641941f22957f883689238bad95ff48" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\70\5edc21cb89b7393cc227297a090e8dc206a169" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\70\7e08cee57dcce4c6ca2397dc547f04ada31203" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\70\9c4380916282b0b7cf094ae1eb8ca9fc6482d7" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\71\1b91b468c7fa0640118f0f8e43fb541855f6a3" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\71\4d8fffa901fe2fae2fd766e2274083d104bca3" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\71\890b7cb0e0021f98cc3b229dd27b684b883b74" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\71\c65b57bdd22046b962e33adaf3fbf3f5ea59d1" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\72\36557c543a0b5283be19abbf953b06a831f31e" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\72\36bfa25b1b770b14d83a4ce2ce5f83c2a41e28" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\73\82cbc2de734557f53472b78755d3aefee42844" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\73\c194c31c7bf46245907bf9a0c9997bece6f6aa" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\73\d0f4e7bf1da19905395f637ec82f17d7e5bcf6" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\73\fbace14fad94498519a1860e10238c0aed2658" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\74\9da9c7703cf66c497ec62f434d981f222c8fb2" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\74\b0794ec9e300324525788d14e2968f166344d0" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\74\f851372b05501e1bb0a462790849998ab44ad4" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\75\126fc9c5c3768007525830f51db3cc100dad38" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\75\2dbe2a737ef9671ade10392ee06d955a8bb388" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\75\5aabab7ed70f72f1617158ec62c546eb78dac2" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\76\358757fba30ee8247cc010d482e38092093dab" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\76\6f6baba4f4f974efcb8440ad92900b403e2264" has not been excluded
flake8.discover_files     MainProcess    236 DEBUG    "E:\specify-playground\.git\objects\77\03f38a655612e5a990e4fd33758724d326e143" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\77\993ee9f62b26125d422e85f9f06ddd66af01f3" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\77\d46007923fe36f3f0cfe0bc36f648fb446e7c5" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\210591b9ea87cb569a6f4cc24ad77705070bcb" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\3b726ec47678ad75ceaaabaf35552cb5b21e5f" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\688883b7a4dbdf302b27dd63155ed07e1c6093" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\90cb32c2a37ffc69429f94ab6761c0c3c1878d" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\94ffeb8d2c85c10512abaa35259a27775b3ec6" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\be2e3e3fc70f048876c6b3dd1a72ad75546425" has not been excluded
flake8.discover_files     MainProcess    249 DEBUG    "E:\specify-playground\.git\objects\78\e1f6f46ceb45444457f39913ec670370716c37" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\79\435a0a7e0c4a4e72d1e8e6a9bbb53a0cb8aa90" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\79\c5d9af35579a94ff3188aa35a4cc4418da9482" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\7a\8286cfb45f8992d372f852bfdeecc24af11191" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\7a\eb96db35dd34ded7f9be388a9dfb4b0c207610" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\7a\fb5a8c3492a6d0c6a31221705257fad3c77eb3" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\7b\3c3ff4ea733f422c5df5073a87f6a7e4ab3f36" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\7b\86530816ea31b3011728339587aa35f53c7277" has not been excluded
flake8.discover_files     MainProcess    250 DEBUG    "E:\specify-playground\.git\objects\7d\9fa828047f0fd502a9742f1d3d4576e29e9b7e" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7e\9c0e518b57e5cdb7f25de2aae86dc6eed13c00" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7e\b40b54c6f1e4e289c7d008e607be0aba595eee" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7f\16127439f9ba3a1b2c845df4d84d6809b9130d" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7f\22e65e6d09741557aafc0584fbfcee004c4a11" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7f\237417db7baa87a6b3cc13d3ecfa60aa1a533d" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7f\7a3a518f25cded0f92ddc468459c739f6dff91" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7f\821773c6f4eeaf3d4f2dac478744c70aa721b5" has not been excluded
flake8.discover_files     MainProcess    251 DEBUG    "E:\specify-playground\.git\objects\7f\bc3259b46f8908b46d7aa23ce90037a8241314" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\7f\d3af5c95920c24d9077ece1685c222c37d69e7" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\7f\fcaed312c9d611922ba88c80de6b20e7f073c9" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\80\497a99dcfff5bd6ab7aedd63912901a34fcca5" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\80\5a46ab848a628354588a05e91e0a2a798ba504" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\80\769d11c779c389007244d971de6eb6a114b4d0" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\81\4aa3e5cc3c7fbb167c65598ae20e10399ca53d" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\81\53dc3a92253b83a190f5b1a5b1d42d402a6671" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\81\5ff7c0e16bc5ca61c5585e4ec2dd7d662ac548" has not been excluded
flake8.discover_files     MainProcess    252 DEBUG    "E:\specify-playground\.git\objects\81\85440232824b583c66e71febc8310943315c17" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\81\fff586ca3bc62e3841afca11e652aef277d368" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\82\5eecf2eb82d195460524fd9e3613ed00422cc4" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\82\da4d5bebef3153a2c64adc87d3d880154c9e25" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\82\e191967b2922e25be389ed8aa7a27146852ebc" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\82\ef53ac3aa4187be34147fbdfb6416a6a31bede" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\83\17c37a35cdc811aa42cc49791a3ce82dbc9f2a" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\83\5c67a7061aeeb16bb755651e111bad645ffa17" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\83\69923f8930261c9bdd0e25366b4b65ac9f8899" has not been excluded
flake8.discover_files     MainProcess    253 DEBUG    "E:\specify-playground\.git\objects\83\888591a9f155c91aa189af5de048afba2c531e" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\83\b3bd25b52d9e542706c1289d9581ead18b8732" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\83\f1b70bac8054172d017b073d7a44f36c8ad692" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\84\6192136ac46cc49ce611d60e441fc1418e4a36" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\84\71b70120a4cf4883bfe0330bf820d871bc125d" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\84\e0cf099f4c0baaa6cabed99cadbaba5f1a0156" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\85\32a54b8a60cebe0aec31f6bedadecf84fcf7cb" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\85\d99023202cbdf32bc4f44d1b25cce1acd2554f" has not been excluded
flake8.discover_files     MainProcess    254 DEBUG    "E:\specify-playground\.git\objects\86\497ed42bec15bcfdd26a180bd0252be8940154" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\86\7273f7b53b73817d6d8c01fc07419f91d47664" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\86\846824393f9cd2bcef4296f25ef85cc8ad8994" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\86\cd8727a602812609e6827deb1f5e4911f4eef3" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\86\d8ef808098c5ce5d9c41666c46041fc299479f" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\87\a7b4a00e807fae3efaff396846a6035f867058" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\87\efe211ae0ea2ebf4c8489fbc660fbd4dc4727d" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\88\3c911324f28ba166d2c6a68bc9a92415e01ae1" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\88\5fc16c2f325963026b616d947f7c22ad2c9b3a" has not been excluded
flake8.discover_files     MainProcess    255 DEBUG    "E:\specify-playground\.git\objects\88\833a5d34d842520c6728d9cd22e4f3a43011b0" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\88\ab239c5a82ff63bcc8deb52cd9bdddd74a928d" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\88\c1d31daee2c6e7c07a5ee7c206ea4151c70d60" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\89\4d5ad90b7c33e7c61930a32c9feb02bc94244f" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\89\da940ec87e455bfdfd7fb0dbde21bec4a4969e" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8a\5f6473e6484446fa24f6bca08c09f150eeade4" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8a\dc7436a09f9937ad7e45062f9fa17276e69732" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\156b24f0bc67a7d16dca96ce4d7964af7ff54a" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\52221ac46f54ecb03d2ac86a7ed61d401c9013" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\8c9de51771dbb3fbb282902c6a8da0b366ddda" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\9ecbd1ece64c72b3e076c3fecaae66262f85e6" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\a48d89a030776243b08dfe052b85f01b2be164" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\b0eab6e4bc568c0dc1460237c08bcf93fb73eb" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8b\b6179b4b225ccd63a71a6c2e341fbbe4413424" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\15b5511bea9625ccddd0605f2265af7f1eef3b" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\1f7845c682a61d3a92858e825fa67539be02a2" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\2e5dd1263907c9b7817d867583a25de7ec5b4d" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\4f74dcd13af2aa79733e48f6b40521f76faa6e" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\542b0bd020393c845e984928d8e101bb61796e" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\748b500a9d187405815e86679b1fbee5ec5a50" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\cd63909a3732d656cf5660cf6b1748a90c60ec" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8c\fb4ca4e4db3de9894ebe9ee9573aa1159ab1f7" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8d\413185d6063b975d010f65ddbf5907836ff9b2" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8d\d0ce1f6ac900bf9d9e90b0090f330c447a3d47" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8e\c0edaa9b123d71c99f03b22e9507c222776adf" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8f\4ec47938726fb42d5532d1599f4d375950847d" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8f\98036206986ea2bbec8269d3d1c49cfa84a877" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8f\afaf3722053a2edc9f888b5b59a6eee06cd17e" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8f\beb0b517f3dbc192da97bf3627d35dda4177e4" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\8f\e94fad7128ab7a9c51fd41f45fe9f0ecc196e1" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\90\2c1962fb52c774f06020f4240fff98559ad82c" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\90\2c52ae8c50752761f5024bffed4f53eb658601" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\90\56823b978418ff0fb7ec64d7ddde68a5ab1d7a" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\91\208e3409f33689dc98d7874129fb8fde952c47" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\92\82c17afa2c86be03f7f8fb1cca54675411f64f" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\92\942e65e947beebafbd8dc8c3e8282bffdac8b8" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\93\2452647a04157ecdfc0fa91bb4f34b4b825fc4" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\93\4ebcbcd8ae233ab7b67e7556350bb534873c04" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\93\9f0c6295890960508461eb489c479058d92191" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\93\ab10466c69f0b8ab8d0c8c822758217e506e23" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\93\c8b081ee21a9b1dafd11fe7bba72be87d7d4e5" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\93\e263e48924abddce480dab2ebe3fee876f2c57" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\94\3b3ca03c19a4b78e58d7e62e0fb84c973aaadf" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\94\a84feba79c94c7b8d0fd6b7183a4934eb59deb" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\94\e43fd275f0c9c546761591293cf67ba4d581f4" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\95\60259a729cca9cc4cb7cb1a6bb96bd3bcfe88f" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\95\61094e516e03d3c246d5666c154d5ef3e1e40d" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\95\714a94d733e22d5df703f87c00eacc3e36cf6a" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\96\2577e2834aed0a20e404ea3753afef4c6bf0bb" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\96\abf6c6f4d45629a9e647132f28a88f43b93369" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\96\ad4a4be9d6676e3b2255dcdcbb910a9e2cd064" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\96\db709aa9eceb04992b2fa1bb5d4fc2b2639d87" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\97\23efc9826f8cb18a21c03f92a66eb7a20fc696" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\97\36c92898b5b904333a0ae3da2db7660451624f" has not been excluded
flake8.discover_files     MainProcess    256 DEBUG    "E:\specify-playground\.git\objects\97\eda4f5894130cc6215a2f6ffe3c92e694d4571" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\98\10330e752a8b8bd4dd46d44e0b6907cf2d273d" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\98\2634216550e0425ec34bfe9ecd4f5d3c050c0b" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\98\27f2a6add4a1fe03a7e7969643c940072efb5d" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\98\43365dee6aac0e0eecbf7ba10aa65669a8de4a" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\98\8e74c66fcd767ee80c41dd6294bfa1db8b5947" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\98\f42869be7317eadb6d3b48707dec1a7c09cd67" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\3fc7e03d86f99b4cd47b1863a43aff168ec29c" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\6b6ab3c7b39073b0f55d66156275db9586ffaa" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\88226468414a8a8c63bd124e4c43438af50dc3" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\89e3d25f258bf266117bd5a4dc39564d3a5548" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\a6f943762219e8b8957699f77297d060d968b0" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\acfc22cdcc1702a60825f4ece8921add4b1b31" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\ba8995ddf94aa46378d900d4463d2532ab8ae1" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\99\d78995f7ecc60b9c413ac0038b669bbdcd9692" has not been excluded
flake8.discover_files     MainProcess    263 DEBUG    "E:\specify-playground\.git\objects\9a\10c66f13622683362ea0cb336185f8a537f4bb" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9a\841467e6b50ba7aaeed6c2959f54046513591c" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9a\8feebeaa068955c250f2ab172cf1c88e7e8632" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9a\97240d49da6d5d699b5ef1d53bb0dcf454a863" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9a\ac8bb6b4b883fb1a46e9b40eea251afe68cdc4" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9a\f1d373f7fe7b6f0bc8ff1064231d1403631189" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9a\f4d10227c500a8489b89ba823a9f08c179fe17" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9b\491d2092f67e489b844305771712dd336a72f1" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9b\7a5af4c4822eb5e4c2d8045b255be134c1da19" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9b\c27b27adba7c6f8187aca9b75bfb40d4ef1297" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9b\d774bf0d9ad54651ce8cc8b9ab88e1b6522cc7" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9c\466c7da4e8ca25ba5f5101362d1b814d9e2360" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9c\9270228d73558c86e0571ba947b2fdcfc4bec4" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9c\a8f0013f581b1f4188a9a97631dd6b9f8e23f1" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9c\d9111196ce99362936e385d42837218dc4f844" has not been excluded
flake8.discover_files     MainProcess    264 DEBUG    "E:\specify-playground\.git\objects\9c\f8f2828531c7074b73d6a8ebd8b1103e1b67b6" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9d\192bc91627c75766ec055197c1e101d467ad0f" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9d\8580b9757eda974d48b82944caca3300b14e35" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9e\33a43483f9999f409b827840919da65cc66f92" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9e\36907841afb79f3d7e2355486317c758db20bc" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9e\9883d3b24dd93e9df2d68d89275d15944afaae" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9e\e1a8333f880770a9e86770d5c3bf8b16278097" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9f\d70ec1fbf381e26875b3c45667acbd2b169632" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\9f\e978e1ccea8a50d126391506e05f1ec1afbe1b" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\a0\570aeeafbe26fbf591ed59fdfcb97a4112faa6" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\a0\8c09922393678b0e6ad69598f59d11145b5283" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\a0\950c9fdc85ed88e401be287ec5861149c03236" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\a0\e1fb83af1329a78dc9193a132d6c34de85ebff" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\a0\f9027decc14e657b42cf2eae58621ed3062ae0" has not been excluded
flake8.discover_files     MainProcess    265 DEBUG    "E:\specify-playground\.git\objects\a1\214722c9268b4fcc923544bea926b94599e503" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a2\2967256b5dbbc803cff871a1383cd78ad014e1" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a2\2a6f7ffe97d2ef695b09fdecb30be41a17de64" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a2\b46673033d9aeefd3f10ed8855f9f19479d3e7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a2\ca49a8adf0a244d24d2335fa06e15d4c78ae69" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a3\23c730cc2f986340a3885367cf33d6e6a335d7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a3\2eb32a6e81408cecba22f59bfbe521fe4fd880" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a3\39ea3f2d613c5d58fc3d0ef0f7a9704c49c3b0" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a3\806db1935d15aba871cd43281018dcdaa328ae" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a3\c26e700aaf6fb330d6a30d3f339841fa7396c9" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a3\d003a7d7ffbdee42021f1f4bd04bc7be92045a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a4\3d911efd4e06db8905e70f7afdab8d4ee7d893" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a4\411b35fd10b45bed2700c883d4228149531475" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a4\9517bc4f9b22665083d8bdf2df2c446a3b5954" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a4\bb7b30c903039f2410dd3e412464a6349e1b5b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a5\335358714c4166809d440d10e46ac69e719a4b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a5\a70acea27de180d37831a5979d6c77d02b978e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a5\b8459871fa24fe51adff5b9e8911be407ae8f2" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a5\d9f0c61e5b889768853847ef3d974af92dc879" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a6\01f64bff87061487d4bfa874ae894d0529dbf8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a6\76d7b93a26fb0862677d2aeaad3a8d47c2bc8e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a7\42782820e5fa6cc6d826b26284f52e6b6632ff" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a7\9092fcdabe081b79afa5aef0c1f7e52ecfed58" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a7\aa9337bce70c86a7b5a87679d1b0f4df88bff4" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a7\c7396c80d287cfab5a477cc8355e96a71f71c5" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a7\e6fe86baec9f8fed2c87017207da24e48d2e7d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a8\36e47b897c628751148655455139b2d03ae12e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a8\75e1af690afd8bd9d48b5acc5d66a7548381fc" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a8\a93488bbec2bd35c3c5ea3e244a7d14c2ae39f" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a8\afff39b19bfda03277b6f52c9a931c098e4740" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a8\f61052dbf8cc371d953cc797e9aa3648252af8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\a9\71dc2d888509e3b31804c3680f799b0961861b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\aa\512db7065de785cc29925243bde3540c62848a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\aa\d8f2518fa80e7c64cac88f805f9503347117ce" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ab\47a656ff2cfdbad53dc58a3f8c41515c63e4c7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ab\7dc977a518d9b953b447479af1edf396c5b72c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ab\8a7173673bbed9df06594ee04721c62c43b766" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ab\f8bb02d6a036a1b11c721623d5c59235351f46" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ac\26bfc098ecbb45811c9385ae275cd27197724e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ac\37e46e59f90b564eeb04ab1fdf2d2e71c07196" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ac\9c15c744cd7134122806b2d245a350c1bf85b8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ac\deb2d5b33146348303d64e8d82ba3f71b761ac" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ad\2c7588d5d4f68865f5a195b9fbce892b73632f" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ad\783e60cdbd69ec14e2df935ec0efe2769d4283" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ad\890a714197e0caeb96f20c2934107cf3bb5da5" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ad\b7308c968e2f258c60d29bca839fba8df18751" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\2f8b80063652c6d50f76a9504cbc6f4bf50977" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\33ea5a9443d7fd46774e60d3d0ea2208c0ea9b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\57f8716c9588a65293d1df99303ab30633053b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\718396bfb2d741b145f20f5e45562e1ad449fe" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\7434bc0fff5095f2c9771280178bc24fcf64c3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\932c748ff10b0278d688531eaf6573ccd9f29b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\ae2a2f5fddc2c96e45daf127c34564253a13e1" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\c6270991f475758efa9f94f2568e3cb4a92c82" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\dcdfea6903e8ad5a2cbc587fa6b928d0c25e37" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ae\eb74ecb7910b507deeb107bf8b3c656cfe6532" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\af\3c2b1976199b41de77adaa4f1ada271f95a128" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\af\8599a040730a5ec0869590090fc236315e9bd5" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\af\91f4ad66530bf6f42ca360cc4e7e812c275adb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\af\a15f4026099a1e5e7e57103f768b850014e2f3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\af\f2560629453cd6a628dd9923feb4c3a3089921" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\af\fb5a79c78044b139e6a9df5f72220c3df1ead6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b0\0db654207ece7d657db277a04411eb84539ca7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b0\b92b17719ac4bf284a07439a67c436c3baf25e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b1\2da6cf45580288dfacc002016fb80359c2f631" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b1\7345031776a760001f7c6acdc3ba0eb303b6a7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b1\c15a73ca9fc41ed555a4909a6b9871c36d8aab" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b2\28d91dd700e764bde7db5c958bb2016a17b801" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b2\3f9ff789232759f75a1024eb94dc32bc8f221a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b2\5da294a2af0252370645ff9de3a4c7665ab5d3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b2\9c7f425525125bf149cb3ee4e738194baec31d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b3\46a6588ded048a87d8009b0229cd695a09c7c6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b3\5a95341488a1fb1fdc69979324ea6ff6f9adb5" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b3\7a538b1bfaa30f23302a3084115036317796e2" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b3\894079172799d3ebe2fee75f63e70f3f4de7ca" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b3\9333d7cad5d5dc23ef08fdcb40e5321d72155e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b4\85251fe0155260d55c09c9dcb2abd41b868b6a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b4\b3221196dbeb8a8391e66149868b5c0c4c3325" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b5\1a95be5940e48c54d2bd244ade308e9ce92a4d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b5\4b42673e415ffc4497b86b1087ebd4410f03a1" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b6\34b3e591e9db10d69300bca75fa037e36ddcae" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b6\3dc6a8d27427f1ca2477df953b662ac16412de" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b6\85e3523cc137874ab17b40c951bbb45375b51b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b6\b7c06e81a10cfd64f397c66d8384f1c4ab5f72" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b6\fc4c620b67d95f953a5c1c1230aaab5db5a1b0" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b7\16f2c9dfb908fa9406293e9afce12e210465ba" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b7\929a02b4d4424bbb4c60abbff476c3070a5a92" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b7\9356fb8451dcc355c287855e65d1e235dfad8c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b7\a2f78f0f81d45762aa65dc8fa829c4149f7558" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b7\df45aae62588ef13d6ac612e4cffd561eeeb30" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b8\2024cab2123ecde81dc94f6a12428196b7649d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b8\567ce3f3860dceb79ae5226f2ad1addd6927c9" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b8\a313e8d14fd4b846696a45e653d088cb3eeed6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b8\d064802abec0a85d986d7b9d019c0308bca9ac" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b8\d70dcb8f63fcb53fb5c2bf4c8b5ae39a280a8a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b9\1acfce2d03c9ab9d869c09fae39c2869c7eefb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b9\1db8a28d8ad6ef9252baee074ad31a8cfd5974" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b9\31cabb50b5327ae0fffc9268acb510748d1b64" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b9\7ae7dee10b34cd18cfdf8a7852c9581abd2f0a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b9\8cd741c75e357dbb22ad38a059d56908e57db7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\b9\94dd693ca4915367a643a24d8f75966de34b00" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ba\34ead7feb9de9c168ae4d0143843354b6d003f" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ba\4cc22631707bd7e7665dd1246442115c1d5f16" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ba\9106a3215bf4746abe3d212ddc9d642cc49550" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ba\bf60165a376c0508831a4a8a6f9f2d88b64b42" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ba\c49d6e735775740243600d8b87fb26dc3754f5" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ba\d7f269409f94ee5522ce8245977b0a09095093" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bb\c475c47a0bd2e98e55ed137295c0907b9312ca" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bb\cffe9a386be69b1ef3f4cf8bd6ceb3fb9622fe" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bc\00838e52b2a9b8c4d6cc158ad24ff57376212d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bc\1efd083e5849c31f282455ee7ccf7ebddf3bf6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bc\911ac4aaf2a38028d9cee23068ac7af0ed4737" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bc\95aef64f5156e80a0ab6cfe559c447d7f2dc55" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bd\50e7f959e43d256ce19bb4ad7e23e3dc422944" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bd\6cb2e16e78cf5579895a80d05ad902ba9c13e8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bd\fbc813722d947dca9e3902ba832d314e353e7d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\be\4b209c6a0c69ac57b06b0487eb6465f1f07d94" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\be\9fda6c43b1144d769f02bf3d8dd6231072e871" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\be\b1882a6d06f75d8ef7a06ae5cf1a4152c5fbf7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\be\f902354d6f8431178cd8be238e001b43e62b20" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bf\16e79d280ab8697bb2412ae3f809e389964a60" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bf\6404f1bea11b7fa5a32d1dacb898c57c1498f8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\bf\a2856b173ca1295eb496b84e06fc31490768c6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c0\8a9b5952849a6aa07a3db136b568630281398d" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c1\542d41c48454c6201311c097d76c52f710f4a3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c1\5d652522fd9fab9411ccd5c8766b07228bbcfb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c1\6eeb106854c9a2f432273ba30eef2c01fa4d19" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c1\8dacd4ac99fef1537586651145535de1e28853" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c2\2b8ddc48a390ab13b71904edc66c4e7e14e08e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c2\45294de871b48ec2c8aded3fdcd88a57a52abb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c2\921049618afc50a14c08c569a38d07e60eb73a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c2\f52de62e250f404b30855ff7e7318ff0609dbc" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\06dc47b645ca190699aef8975f84c09ab0b39c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\0ad1e73da292cd8bebe865ba152b6fcef808f3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\1033b8a0a57990f41f639272c42b5ac5177443" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\278b11dfbeccb657a363167f5b9dc9132d88cb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\3e73f31e505693ba923758f4cb988eb091ad15" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\eae148d3f1dc684372eca6a88669f615eeab0f" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c3\eda61059d1d112cfb869f83584a9e01c08259c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c4\13bbee848a55d683a323c384ef17b206921fe1" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c4\585d052a06076ced96cd6c259ff0af7286cb33" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c4\6b0eb68a711947cfa4da0a2815d75513d13d83" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c4\d73c2b628faa8d443059b84016e910f3c96869" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c4\dbbb1612c839bc21f73d1a7c7d151506388bd8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c5\512d8c0e9698d474c7e4d1b1be1cd34c55d1ef" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c5\c66d06da27ca1e6a5abd4602791cc9010dcb96" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c6\49badf90c0d5092360b4fe11fa1fee1ccd94a3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c6\60ffa7812fbefc85974da1e4ac9bcec41bbed8" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c6\77fbb46796df4d39dd6c929eb5c85cd1416070" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c6\a9d2f1a50a0bfe7241a488f12b98e7e153a905" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c7\1733044b6620b9587ba40f33063b0989701ea9" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c7\983f2eb4915601d3953363d7bd3fafc5566637" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c7\f117519985351ec2b605e072d3e1f2d7c645c2" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c8\080bcdb23244be32b8e8ffcf08c8ab506ad220" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c8\a5e3e6f7508fd9cac5594b7bb3369e354817d4" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c9\1e2a5563d89ad8e987dd2b5e335f93e6956b9a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\c9\c27da8967fc26e1f57dc4ebb3d8e10368bede4" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ca\0f51c6604d19129b5ede7d40bafc1c987a30bb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ca\3bfeb9e43c7498f1468e7a939760b1bb2b6a14" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ca\abc3b8ef66c0a55eea74566fe8d9909c76d220" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ca\c8b032550d5488492912aa4a4702df1e3b8a76" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cb\12acc7842bec6593b58fa643d4c7781074020e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cb\aed1ac3887c5f102f9faf39f8400ec83fd9256" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cc\4b045aa28d2027b6a38922b29042b96d16d244" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cc\67dfa4cdd81f1fe6c3cc8e3cb69bbd0137dd89" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cc\686886edbd0bcd3846fe2c59f4eaaf42e46ffc" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cd\1c53a16b2feed02dd36d1170b8ba8266cb56e3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ce\229621baa93170c099d70214988944b8a25fe4" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\ce\90b0699e757448113b852eb9cf355141fb06c3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cf\1a916fe5e680f677b727d321ffdec1d0a0db61" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cf\489ab2cb937bd62d3620382cf4e1f3963fda75" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cf\566b156dc6ac22a896c04a37f7011ffec5d762" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\cf\fbc645ee8d53a7dcbf6631b1c93e4426e4f567" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d0\187b82dc9b2b24ae26b894509316c2e3baa327" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d1\2d4e8d44b5dd9ceb2fede7aac3bd9abb426085" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d1\3a77c2b18d368c5f05e988eab827cf806e9702" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d1\3cfe4423ae5f98eb377e81867198c9e39eba14" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d1\50942c17a8bba2acad6589bce63a65b7340079" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d1\d11c29c0f5684f8ea7414a290909dbcb3337de" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d1\e87a9a4a5e25a1c4ed8873c02baf59de52ae9b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d2\301b33d81af56a8bfeaf4e0fbef89894fc2f14" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d2\32902a38c4f6cfb16db3137d2bc74874d43cd0" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d2\7d3635447c0b4c8cf7d638f07b510d047891df" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d2\8cd5c4495a32a9e108101a44385dff1aa79f02" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d2\c693f7006698cf17fea1cf9fff54dbd395f185" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d2\d77613069e50581749dae4a65e1165eb252320" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d3\17fd087ac3ebb27956857dc4052564f7b3d47c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d3\5b6ea878a127a09732da1483920b078e716968" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d3\7cb99e3390fcf738de4ff17cfb275fcb0ecf17" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d3\97fc46319d8edad806fd90e41deb94d82d22bd" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d3\9d25be18a9b9c3eb1bce5f3666a407204b7d5b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d3\b8a84c0f1bca5d6849522760038cf873d18e72" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d4\c622bb104732980bd9c2be9422958e66d83b34" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d4\dd17662407f45232f9b447400d4a3be64f4c3b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\10bee64f764852fe58257c19b82ba6964c59b6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\260b5c0a3202cfc1b43ce7cb21de8fa9979e8b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\742ade47951075ea659c34861b0ec3c1a00675" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\9786a403137bf2000731a9dd59c275d10bde79" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\9d7944c490350aadecb77091f6d894a8187090" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\bd2296ceff3be314056d6dc58630f35bae2353" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d5\eb7a6900417af433d9a5dbe021ba7cbddbc507" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d6\04eef2e81ea3a30a77e04f0ec9aa9b6241ca7c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d6\0e91c04606e7a6554ed42f9b0fe305b9d386a7" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d6\19b970f3f1d91630ece57678078e670f02d2e3" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d6\7227f6d232a6518e02ce2522c0ef27bf697c4a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d6\f889cf22b288295c7d438ced52b68b5a91b2cb" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d7\188242fbe82d3d0069020366cebc44c7bbe536" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d7\4221df70ff22368a9387131211e5aa9800d26e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d7\a8361fb2bf1059e9cb785c267e42f667209db9" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d8\63c5f32659d93eaa3c8c75cf3915b3acef070c" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d8\d3df1d7a8e6ecd708dcec093dd5e6bca50dd19" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d8\ea72b34084d33cfb1a9fdcf1d09c90c587f77a" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d8\f0c8a7eab8f22140ba4c05cba360ea436a466e" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d9\14c3ee543f8ca83e3f4545d82055bbf748a965" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d9\242640deb707111b4fe2a09b0b10c6eb511333" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\d9\748a3f8495bf55536f9ff92a8f3f9ee2d56fbc" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\da\1fdc2a3af0ea4ecf5778d92f2e3a443940a131" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\da\2a5fa2207ca99a46e232a3e9d550874e4dabc6" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\db\4b0b5b45d3c4e880908c92543a3f86abe727db" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\db\f0c0416445bf2e7e1a793db31343cc0919ac86" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\dc\879f9c4b3afbd7b232d92b6153585787a23d3b" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\dc\e4b1f83fd959d4f0f4757d11cf246560f20567" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\dc\f7edfd80ac6754749e72b806b0f77fdac9ebf1" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\dd\3d38d0feb44819b517393b97de98ee79854db2" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\dd\ae973c53d3551d5f8c7489fa44d9e7487326db" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\de\1741f3476a871f0153a177703a372580209ff2" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\de\5c9ae5b8774623bf334f86087889265f825712" has not been excluded
flake8.discover_files     MainProcess    266 DEBUG    "E:\specify-playground\.git\objects\de\a019c1d488544814de2a14a5ae18ff0700a15d" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\df\21ffed0993fdca3895c85a20a803d906f9bbef" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\df\4be76f85b830c74cb4ac7d9a3b289bfe5216fa" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\df\98924ba3fcecba8884e12f8ad2ca5db2938673" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e0\57ecd10803bddd1b201a6599c9328aca013f63" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e0\581a51db7c71f1b02479827992ef0e007015dc" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e0\b271db94a0b452a92a0c19c82b2e99d6ff9f6e" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e1\0e2df48b18dfbf43574643afbd37ca535d246d" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e1\4b7d55b4325b2cac444935ac1ebd8e9b96825e" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e1\9bcc005e9be2fb9cf8204c6d9fd2c50406b0f7" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e1\bfd46e433c44bc53af76ff40fdb04d3bf70f13" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e1\e220efd71ff1a85915bb88579d81177b2def8a" has not been excluded
flake8.discover_files     MainProcess    282 DEBUG    "E:\specify-playground\.git\objects\e1\ef70d40a876b738543ae20d5acfd5beb6d7b8c" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e2\3fe07c526c2534c5413c701055d647dd740b37" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e2\7283289b30c751a487759a2e9ca453a1813668" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e2\731983379de9925112a01aa60e3930c95dfb42" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e2\b06192150778db99463ebc18f807ef4f93b5e4" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e2\b684dad024ac4f5d28369307e08a93b46f0514" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e3\1760d715efa3c2029a776ec2cf44679c9da609" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e3\27143898cf0fe368156e211a2e901d33b23cff" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e3\31484ed16e563d9e4b18bb6bf322cdc643db06" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e3\3f52bee51f11af7940775be2e74616dbb649ec" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e4\03c0bbd7a7fbf84725c3c4d3c7f7bffbaa83d0" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e4\c1421509aca8900c6b30c2fa6b573cb1650386" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e5\690f933b66242c9b564b10bb066d75ddd1a965" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e5\b4906585110244235864f18f8bab5a60fc691e" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e5\cd743554d5379da6da410b7b14ead2954a035d" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e5\fac770b43de940ae03cd04903e7ddc82aa4e65" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e6\9de29bb2d1d6434b8b29ae775ad8c2e48c5391" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e6\c289ed0ca1c4f73e8086f6d4c5d8bd1bc33950" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e6\c50e4ab3502de3c8187f7d8317bd2ad23b67a3" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e6\e77ec415956375d81057254b0d590bdf70256c" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e7\41a658649c4140044417adbadb3d37e5b80407" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e7\bff4aee95db275954d207da3c4b7c3464482d2" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e7\ecbe78a45eb733d6e23c59bd5df690b454fb0d" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e8\0e717711c7622c0c3b70440f21851f8261861d" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e8\1b50ae1e69edd618d412d481963f232b3f0e9d" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e8\48d7529de22d79176991eab1d26359eb62a6a9" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e8\65973c4b24d3f56d4beb62e653e2b66097f672" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e9\016caccad9bcb819ad09be21446fac5a589b94" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e9\5582a49bcae5b5f623fb1b736644b1f1968b18" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\e9\e93ba4eea897ec9a55cd908d816a30e34af72d" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ea\384532d839c2e7a68a39ab6c067af1768e97f1" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ea\c96358fee4be250523149d194a5fdc3e92272c" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ea\f7c1d33c065c70af14f299e65299ac2125f1cb" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\eb\4640dcf52e8063f30ede2f5b2f7e1d376d9de3" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\0243a3d96961987f394e743dc4090a524d8253" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\29f5681269125fc4cda184f936f312c45cb28a" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\605465bcb7e99919519720261ffd9624620541" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\72fb3af86fcd643ec783fcaefb70b776aa53de" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\8c30f07ec79cc12acc070601f139782f43a053" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\d12183d9ea969ef027e2c4de68bacab47fff90" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\db6e6ad46f8db7bb27c3eb54971b9890c41874" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ec\f4b4589c3ccf36029acfb0baad2b2fb449bfba" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ed\8a1366383a671203cd6c218605253b2191c992" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ed\9996f61462905bd81d3db0c15b33e24c9b4aed" has not been excluded
flake8.discover_files     MainProcess    283 DEBUG    "E:\specify-playground\.git\objects\ed\f57bcd9d6f7bfdf8fab966f173bc5c5b0793ba" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\ee\65e56b3c3f9022bdf1087e727011a4cc7ac9b8" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\ee\851007e0bb1a361e5488694cb7f02ff2067240" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\ee\9890954d11a033d39841f98c7b3797ede7ce93" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\ee\e69b02b3649727cff5d0119ecd83420fec1225" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\ef\022fdc8c344d7b8015f0faf44469a675d32727" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\ef\5cee16dd77e46c079fbeed0e9284bc4a822299" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\f0\174e17fa067614459da9bf901af7c56f4ff666" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\f0\2bd75fb75e1f76dc8833441bea47323fe5ef30" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\f0\36d14009d9c56a381739ad45bef9eabc774ce6" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\f0\9b6f57cda351ca7e8ac81788a230778a91055d" has not been excluded
flake8.discover_files     MainProcess    286 DEBUG    "E:\specify-playground\.git\objects\f1\306544ec1e67a1c1420e739e8fff233190d9df" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f1\adfa22686d8842f389de0132049a87130f19d0" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f2\1471e03ca4e01e061cd24953e1734d0e7bc932" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f2\3241c836d1171f9be719c0607e3969814d5fc5" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f2\787e91abe276d7de1b810d15784dd395f23ad3" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f2\950656a43df5dc97b1da218a6b92e01a2f9a7b" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f2\acf44568f679dc8cc5b06dfce51f7fb2720c53" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f3\5020a1cd5f0956fc2068d7f185715367d13e34" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f3\8b9c924c6d4772bc053277a8aea645d468686d" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f4\14efd3959c179487ce60ce56537611fb3a05ef" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f4\6d342207ee5ed2bb040b66140db8a7518d826d" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f4\aa7312f27c4d30dbf868421d9ee1a5ef95ac6d" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f4\bfd285b23081fcb77a993c1dd2cd8f36c184f0" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f6\b05396d67c3e5b05ea2d7a28761378f11d6663" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f7\01539f82f03fed3664214161e7ce86ca417487" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f7\11787125db1a75392395aea08a8b913d5f55e3" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f7\1af8429ff8906de6690f70d994bc9b0dea7250" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f8\431dfd18fe0c0bb4f374174cbb096ad8a5cdf9" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f8\82e67cdb9b54abeef78b0d903dfe5f4b7b3acd" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f8\bb7b4b5d7dda701229b5dfe1e62ed9a1fbf007" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f8\e179d4ab5109990205f3d30b50b8dd1c0e5932" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f9\00519f45caac11f9919fc4dfd1dc11651994f6" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f9\46bdfa30b908bf9e89d5eaf8b7fef74889886e" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f9\4f3afbe60cff0dffb43c6d432a53b98ba60158" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\f9\cecaf1706f153dc04fafcebb305900cde4933b" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\fa\4db44b71c63bdcda26764ad97ac42ab5ada368" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\fa\51227f83e92c68b59d62f4cc908163e80bb29b" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\fa\5e37e9bb258a28c088bac2de6ae66e93ad66cf" has not been excluded
flake8.discover_files     MainProcess    287 DEBUG    "E:\specify-playground\.git\objects\fa\c22266962e0d765cbf2a6611a897acf01cc406" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fa\c8f679c5a7278f213d5c1c9dd6a3205b9f8abd" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fa\d83b7cd04c169e9f113c2b91ade5a394b3d1dd" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fb\29d131d2f7e3f89e0fcc020d7365b7a071c20a" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fb\98d0770bf4a88f6812db9c71b509e0bcc73340" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fb\9a480d9d23c1aed314a2547eec42546606019b" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fb\eab7a51119e38394c4f68318fc12ab683dc1eb" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fd\3a00786f83bd0b2cde66ed4e7e67e8b8c8a4e2" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fd\47336b596db973d405c5d69f0b4c90e709d0bf" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fd\da10afb1e149ebffb6bd748dfb5d91ad25f810" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fe\04ef3085fc846e340f7125a5ddc8c94548881b" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fe\178a303f1c924f6deb635791579b53d5c9ea04" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fe\25373adab64d59af485edcf1c33b43d24d6cdd" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fe\b24a8f4fc95d82b857b48cd3357ccb8664ac2b" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\fe\d2d69363b42dbac39e4358b3203754edbfb199" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\ff\8d235274aa2035a283ca95b4839c7c1bc765f6" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\ff\a2df5e136a25c3ca570b0ea39bbca25780ddfd" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\pack\pack-86108913f90d2021b7d0fcaf7d846b4bcda8e06d.idx" has not been excluded
flake8.discover_files     MainProcess    289 DEBUG    "E:\specify-playground\.git\objects\pack\pack-86108913f90d2021b7d0fcaf7d846b4bcda8e06d.pack" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\objects\pack\pack-86108913f90d2021b7d0fcaf7d846b4bcda8e06d.rev" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\remotes" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\tags" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\stash" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\copilot" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\002-hash-comparison" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\003-onedrive-compat-the" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\003-onedrive-compat-the-config-file" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\004-generalize-file-support" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\main" has not been excluded
flake8.discover_files     MainProcess    290 DEBUG    "E:\specify-playground\.git\refs\heads\copilot\fix-74fbb440-13ed-46c6-b488-59be14ce3be1" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\remotes\origin" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\remotes\origin\004-generalize-file-support" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\remotes\origin\HEAD" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\remotes\origin\main" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\tags\bug" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\tags\explore-runner-0.1" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\tags\v1.1" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.git\refs\tags\bug\duplicate-edit-corruption-004-generalize-file-support" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\chatmodes" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\workflows" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\copilot-instructions.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\chatmodes\Precision Q&A.chatmode.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\concise.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\constitution.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\implement.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\plan.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\pqna.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\specify.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\prompts\tasks.prompt.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.github\workflows\ci.yml" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\v" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\.gitignore" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\CACHEDIR.TAG" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\README.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\v\cache" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\v\cache\lastfailed" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.pytest_cache\v\cache\nodeids" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\memory" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\scripts" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\templates" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\memory\constitution.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\memory\constitution_update_checklist.md" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\scripts\bash" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\scripts\bash\check-implementation-prerequisites.sh" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\scripts\bash\check-task-prerequisites.sh" has not been excluded
flake8.discover_files     MainProcess    291 DEBUG    "E:\specify-playground\.specify\scripts\bash\common.sh" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\scripts\bash\create-new-feature.sh" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\scripts\bash\get-feature-paths.sh" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\scripts\bash\setup-plan.sh" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\scripts\bash\update-agent-context.sh" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\templates\agent-file-template.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\templates\plan-template.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\templates\spec-template.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.specify\templates\tasks-template.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.vscode\settings.json" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\.vscode\tasks.json" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\attachments" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\patches" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\0001-azure-doc-origin.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\0002-specify-branching-strategy-ambiguity.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\0003-copilot-issue.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\0003-duplicate-edit-corruption.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\0004-restore-unit-tests-file_scanner.md" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\attachments\file_scanner_current.py" has not been excluded
flake8.discover_files     MainProcess    294 DEBUG    "E:\specify-playground\BUG_REPORTS\patches\0001-docs-bugs-finalize-bug-report-0001-clarify-origin-an.patch" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\.gitignore" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\class_index.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\coverage_html_cb_497bf287.js" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\favicon_32_cb_58284776.png" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\function_index.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\index.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\keybd_closed_cb_ce680311.png" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\status.json" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\style_cb_dca529e9.css" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_145eef247bfb46b6___init___py.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_145eef247bfb46b6___main___py.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_cloud_file_service_py.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_duplicate_detector_py.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_file_database_py.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_file_hasher_py.html" has not been excluded
flake8.discover_files     MainProcess    295 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_file_scanner_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_onedrive_service_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_progress_reporter_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_result_exporter_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e_video_file_scanner_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_33ea1954bbe60e2e___init___py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_cloud_file_status_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_duplicate_group_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_file_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_potential_match_group_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_scan_metadata_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_scan_result_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_user_file_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3_video_file_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_532385f02888fdd3___init___py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_7978cb613e5c7367_config_commands_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_7978cb613e5c7367_main_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_7978cb613e5c7367___init___py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_af07d0fb2ad97cea_config_manager_py.html" has not been excluded
flake8.discover_files     MainProcess    296 DEBUG    "E:\specify-playground\htmlcov\z_af07d0fb2ad97cea_windows_onedrive_api_py.html" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\apply_quick_fixes.sh" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\debug_validate.py" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\repro_patch.py" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\run-playground.sh" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\run_all.sh" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\update-spec-kit.sh" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\scripts\verify_and_run.sh" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\001-build-a-cli" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\004-generalize-file-support" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\README.md" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\001-build-a-cli\contracts" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\001-build-a-cli\data-model.md" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\001-build-a-cli\plan.md" has not been excluded
flake8.discover_files     MainProcess    297 DEBUG    "E:\specify-playground\specs\001-build-a-cli\quickstart.md" has not been excluded
flake8.discover_files     MainProcess    298 DEBUG    "E:\specify-playground\specs\001-build-a-cli\research.md" has not been excluded
flake8.discover_files     MainProcess    298 DEBUG    "E:\specify-playground\specs\001-build-a-cli\spec.md" has not been excluded
flake8.discover_files     MainProcess    298 DEBUG    "E:\specify-playground\specs\001-build-a-cli\tasks.md" has not been excluded
flake8.discover_files     MainProcess    298 DEBUG    "E:\specify-playground\specs\001-build-a-cli\contracts\cli-interface.md" has not been excluded
flake8.discover_files     MainProcess    298 DEBUG    "E:\specify-playground\specs\001-build-a-cli\contracts\service-apis.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\contracts" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\COPILOT.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\data-model.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\plan.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\quickstart.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\research.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\spec.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\tasks.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\contracts\onedrive-service.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\003-onedrive-compat-the\contracts\scanner-service.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\contracts" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\data-model.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\plan.md" has not been excluded
flake8.discover_files     MainProcess    299 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\quickstart.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\research.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\spec.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\tasks.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\contracts\cli_interface.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\contracts\file_database.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\specs\004-generalize-file-support\contracts\file_scanner.md" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\cli" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\playground" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\__init__.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\__main__.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\cli\config_commands.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\cli\main.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\cli\__init__.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\migrations" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\schemas" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\config_manager.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\container.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\exceptions.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\interfaces.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\windows_onedrive_api.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\migrations\migrate.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\lib\schemas\config_schema.json" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\cloud_file_status.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\duplicate_group.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\file.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\potential_match_group.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\scan_metadata.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\scan_result.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\user_file.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\models\__init__.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\playground\demo.specify" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\cloud_file_service.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\duplicate_detector.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\file_database.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\file_hasher.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\file_scanner.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\onedrive_service.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\progress_reporter.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\result_exporter.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\schema.sql" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\video_file_scanner.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\src\services\__init__.py" has not been excluded
flake8.discover_files     MainProcess    300 DEBUG    "E:\specify-playground\temp_test\final_demo.yaml" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\fixed_yaml_output.yaml" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\results.json" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\results.yaml" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\results_new.json" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\test_yaml_output.yaml" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\video1.mp4" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\video2.mp4" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\temp_test\video3.mkv" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\contract" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\fixtures" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\integration" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_cli_scan_dir" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_integration_scan" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_perf_scan" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\unit" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\conftest.py" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_integration.db" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_integration.yaml" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_perf.db" has not been excluded
flake8.discover_files     MainProcess    303 DEBUG    "E:\specify-playground\tests\tmp_perf.yaml" has not been excluded
flake8.discover_files     MainProcess    304 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    304 DEBUG    "E:\specify-playground\tests\contract\test_cli_cloud_status.py" has not been excluded
flake8.discover_files     MainProcess    304 DEBUG    "E:\specify-playground\tests\contract\test_cli_scan_contract.py" has not been excluded
flake8.discover_files     MainProcess    304 DEBUG    "E:\specify-playground\tests\contract\test_cloud_file_service.py" has not been excluded
flake8.discover_files     MainProcess    304 DEBUG    "E:\specify-playground\tests\contract\test_cloud_file_status.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_documentation_update.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_duplicate_detector_contract.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_export_contract.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_integration_test_setup.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_output_format_cloud_status.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_result_exporter.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_scanner_service.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\contract\test_user_file_cloud_integration.py" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\series" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\subdir" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\notes.txt" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\README.md" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\video1.mp4" has not been excluded
flake8.discover_files     MainProcess    305 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\video2.mkv" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\series\series01.mp4" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\series\series02.mp4" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\fixtures\sample_files\subdir\video3.mov" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_basic_duplicate_detection.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_cli_integration.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_cloud_file_detection.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_config_cli.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_cross_scan_duplicates.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_fuzzy_matching.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_mixed_directory_scan.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_progress_reporting.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_windows_api_detection.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\test_yaml_export.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\integration\__init__.py" has not been excluded
flake8.discover_files     MainProcess    306 DEBUG    "E:\specify-playground\tests\tmp_cli_scan_dir\a.mp4" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_cli_scan_dir\b.txt" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_integration_scan\dup1.txt" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_integration_scan\dup2.txt" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_integration_scan\unique.txt" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_000.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_001.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_002.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_003.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_004.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_005.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_006.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_007.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_008.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_009.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_010.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_011.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_012.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_013.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_014.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_015.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_016.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_017.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_018.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_019.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_020.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_021.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_022.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_023.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_024.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_025.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_026.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_027.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_028.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_029.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_030.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_031.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_032.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_033.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_034.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_035.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_036.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_037.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_038.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_039.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_040.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_041.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_042.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_043.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_044.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_045.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_046.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_047.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_048.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_049.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_050.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_051.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_052.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_053.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_054.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_055.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_056.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_057.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_058.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_059.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_060.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_061.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_062.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_063.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_064.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_065.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_066.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_067.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_068.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_069.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_070.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_071.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_072.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_073.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_074.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_075.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_076.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_077.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_078.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_079.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_080.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_081.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_082.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_083.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_084.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_085.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_086.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_087.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_088.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_089.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_090.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_091.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_092.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_093.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_094.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_095.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_096.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_097.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_098.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_099.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_100.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_101.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_102.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_103.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_104.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_105.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_106.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_107.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_108.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_109.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_110.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_111.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_112.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_113.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_114.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_115.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_116.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_117.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_118.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_119.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_120.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_121.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_122.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_123.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_124.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_125.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_126.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_127.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_128.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_129.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_130.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_131.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_132.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_133.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_134.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_135.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_136.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_137.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_138.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_139.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_140.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_141.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_142.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_143.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_144.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_145.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_146.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_147.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_148.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_149.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_150.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_151.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_152.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_153.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_154.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_155.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_156.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_157.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_158.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_159.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_160.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_161.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_162.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_163.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_164.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_165.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_166.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_167.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_168.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_169.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_170.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_171.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_172.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_173.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_174.dat" has not been excluded
flake8.discover_files     MainProcess    307 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_175.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_176.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_177.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_178.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_179.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_180.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_181.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_182.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_183.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_184.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_185.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_186.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_187.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_188.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_189.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_190.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_191.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_192.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_193.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_194.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_195.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_196.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_197.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_198.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "E:\specify-playground\tests\tmp_perf_scan\file_199.dat" has not been excluded
flake8.discover_files     MainProcess    316 DEBUG    "__pycache__" has been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_config_manager.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_container_overrides.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_container_overrides_extra.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_duplicate_detector.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_duplicate_detector_majority.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_duplicate_detector_series.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_duplicate_group.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_file_scanner.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_hasher.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_ioc_injection.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_models.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_potential_match_group.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_scan_metadata.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_user_file.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tests\unit\test_user_file_scanner.py" has not been excluded
flake8.discover_files     MainProcess    318 DEBUG    "E:\specify-playground\tmp_cli_test\video1.mp4" has not been excluded
flake8                    SpawnPoolWorker-1    116 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-2    121 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-3    124 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-4    138 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-5    152 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-6    143 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-7    152 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-1    277 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-1    277 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-1    277 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-1    277 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-1    279 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002B39EAB09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-1    281 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-1    283 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-1    283 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-1    283 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-1    283 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-1    284 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-1    284 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-8    156 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-2    289 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-2    289 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-2    289 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-2    289 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-2    289 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-2    289 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-2    290 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-2    291 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-2    293 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000249036409A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-2    293 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-2    293 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-2    293 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-2    293 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-2    293 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-2    293 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-2    293 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-2    293 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-2    293 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-3    291 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-3    292 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-3    293 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000149DA9209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-3    295 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-3    295 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-3    295 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-3    295 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-3    295 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-3    295 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-3    296 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-9    186 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-10    171 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-1    360 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-1    360 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-1    360 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-1    360 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    361 DEBUG    Logical line: "project_root = Path(__file__).parent"
flake8.checker            SpawnPoolWorker-1    361 DEBUG    Logical line: "if str(project_root) not in sys.path:"
flake8.checker            SpawnPoolWorker-2    345 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    361 DEBUG    Logical line: "sys.path.insert(0, str(project_root))"
flake8.checker            SpawnPoolWorker-2    345 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-2    345 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    346 DEBUG    Logical line: "FILES = [r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", r"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", ]"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "def main():"
flake8.checker            SpawnPoolWorker-1    363 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "for p in FILES:"
flake8.checker            SpawnPoolWorker-1    364 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "Path(p).unlink()"
flake8.checker            SpawnPoolWorker-1    364 DEBUG    Logical line: "from setuptools import setup, find_packages"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "print("xxxxxxx", p)"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxx", p, "xx", e)"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "if __name__ == "xxxxxxxx":"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: "main()"
flake8.checker            SpawnPoolWorker-1    364 DEBUG    Logical line: "setup(name="xxxxxxxxxxxxxxxxxxxxxxx", version="xxxxx", description="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", author="xxxxxxxxxxxxxxxxxxxxxxxxxxxx", python_requires="xxxxxx", packages=find_packages(where="xxx"), package_dir={"": "xxx"}, install_requires=["xxxxxxxxxxxx", "xxxxxxxxxxx", "xxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxx", ], extras_require={"xxx": ["xxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxxxxx", ]}, entry_points={"xxxxxxxxxxxxxxx": ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", ], }, classifiers=["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", ], )"
flake8.checker            SpawnPoolWorker-2    347 DEBUG    Logical line: ""
flake8                    SpawnPoolWorker-11    174 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-4    318 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-4    318 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-4    319 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-4    320 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-2    353 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-2    354 DEBUG    Logical line: "from unittest.mock import Mock, patch"
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-2    354 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-2    354 DEBUG    Logical line: "from src.lib.container import Container"
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-2    354 DEBUG    Logical line: "container = Container()"
flake8.options.manager    SpawnPoolWorker-4    321 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-2    355 DEBUG    Logical line: "scanner = FileScanner(logger=container.logger())"
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-2    355 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    372 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-2    355 DEBUG    Logical line: "user_file1 = Mock(spec=Path)"
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001F2B6BA09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Extending default select list with ['F']
flake8.checker            SpawnPoolWorker-1    372 DEBUG    Logical line: "from unittest.mock import Mock, patch"
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-4    322 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-2    355 DEBUG    Logical line: "user_file1.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-1    372 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-2    355 DEBUG    Logical line: "user_file1.is_file.return_value = True"
flake8.options.config     SpawnPoolWorker-4    323 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-1    373 DEBUG    Logical line: "from src.lib.container import Container"
flake8.options.config     SpawnPoolWorker-4    323 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.checker            SpawnPoolWorker-2    356 DEBUG    Logical line: "user_file1.stat.return_value.st_size = 1024"
flake8.options.config     SpawnPoolWorker-4    323 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-4    323 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-1    373 DEBUG    Logical line: "container = Container()"
flake8.options.aggregator SpawnPoolWorker-4    323 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.checker            SpawnPoolWorker-2    356 DEBUG    Logical line: "user_file1.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.options.aggregator SpawnPoolWorker-4    323 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-1    373 DEBUG    Logical line: "scanner = FileScanner(logger=container.logger())"
flake8.checker            SpawnPoolWorker-2    356 DEBUG    Logical line: "user_file1.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-1    373 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    356 DEBUG    Logical line: "user_file2 = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-1    373 DEBUG    Logical line: "user_file1 = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-2    357 DEBUG    Logical line: "user_file2.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-1    374 DEBUG    Logical line: "user_file1.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-2    357 DEBUG    Logical line: "user_file2.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-1    374 DEBUG    Logical line: "user_file1.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-2    357 DEBUG    Logical line: "user_file2.stat.return_value.st_size = 2048"
flake8.checker            SpawnPoolWorker-1    374 DEBUG    Logical line: "user_file1.stat.return_value.st_size = 1024"
flake8.checker            SpawnPoolWorker-2    357 DEBUG    Logical line: "user_file2.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-1    374 DEBUG    Logical line: "user_file1.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    357 DEBUG    Logical line: "user_file2.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file1.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    358 DEBUG    Logical line: "non_user_file = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file2 = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: "non_user_file.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file2.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: "non_user_file.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file2.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-4    325 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: "non_user_file.__str__ = lambda: "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file2.stat.return_value.st_size = 2048"
flake8.checker            SpawnPoolWorker-4    325 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: "non_user_file.__fspath__ = lambda: "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file2.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    325 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: "mock_iter = [user_file1, user_file2, non_user_file]"
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "user_file2.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    325 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "non_user_file = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-4    325 DEBUG    Logical line: "src_dir = Path(__file__).parent / "xxx""
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "non_user_file.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-2    359 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxx", return_value=True), patch("xxxxxxxxxxxxxxxxxxx", return_value=True), patch("xxxxxxxxxxxxxxxxxxxx", return_value=mock_iter), patch("xxxxxxxxx", return_value=True):"
flake8.checker            SpawnPoolWorker-4    325 DEBUG    Logical line: "if str(src_dir) not in sys.path:"
flake8.checker            SpawnPoolWorker-1    375 DEBUG    Logical line: "non_user_file.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-4    327 DEBUG    Logical line: "sys.path.insert(0, str(src_dir))"
flake8.checker            SpawnPoolWorker-1    377 DEBUG    Logical line: "non_user_file.__str__ = lambda: "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    360 DEBUG    Logical line: "entries = list(Path("xxxxx").iterdir())"
flake8.checker            SpawnPoolWorker-1    377 DEBUG    Logical line: "non_user_file.__fspath__ = lambda: "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    360 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", entries)"
flake8.checker            SpawnPoolWorker-1    377 DEBUG    Logical line: "mock_iter = [user_file1, user_file2, non_user_file]"
flake8.checker            SpawnPoolWorker-2    360 DEBUG    Logical line: "for e in entries:"
flake8.checker            SpawnPoolWorker-1    377 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    360 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    378 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxx", return_value=True), patch("xxxxxxxxxxxxxxxxxxx", return_value=True), patch("xxxxxxxxxxxxxxxxxxxx", return_value=mock_iter), patch("xxxxxxxxx", return_value=True):"
flake8.checker            SpawnPoolWorker-2    361 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxx", e.is_file(), "xxxxxxx", getattr(e, "xxxxxx", None), "xxxxxxxxxxxxx", getattr(e, "xxxxxx", "").lower() in {"xxxx", "xxxx", "xxxx"}, )"
flake8.checker            SpawnPoolWorker-1    379 DEBUG    Logical line: "entries = list(Path("xxxxx").iterdir())"
flake8.checker            SpawnPoolWorker-2    362 DEBUG    Logical line: "except Exception as ex:"
flake8.checker            SpawnPoolWorker-1    379 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", entries)"
flake8.checker            SpawnPoolWorker-2    362 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxx", ex)"
flake8.checker            SpawnPoolWorker-1    379 DEBUG    Logical line: "for e in entries:"
flake8.checker            SpawnPoolWorker-2    362 DEBUG    Logical line: "result = list(scanner.scan_directory(Path("xxxxx"), recursive=False))"
flake8.checker            SpawnPoolWorker-1    379 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    362 DEBUG    Logical line: "print("xxxxxxxxxxxxxx", len(result))"
flake8.checker            SpawnPoolWorker-2    363 DEBUG    Logical line: "for f in result:"
flake8.checker            SpawnPoolWorker-1    380 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxx", e.is_file(), "xxxxxxx", getattr(e, "xxxxxx", None), "xxxxxxxxxxxxx", getattr(e, "xxxxxx", "").lower() in {"xxxx", "xxxx", "xxxx"}, )"
flake8.checker            SpawnPoolWorker-2    363 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    363 DEBUG    Logical line: "print("xxxxx", f, "xxxxx", f.size)"
flake8.checker            SpawnPoolWorker-1    380 DEBUG    Logical line: "except Exception as ex:"
flake8.checker            SpawnPoolWorker-2    363 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-1    380 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxx", ex)"
flake8.checker            SpawnPoolWorker-2    363 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxx", e)"
flake8.checker            SpawnPoolWorker-1    380 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    363 DEBUG    Logical line: "print("xxxx")"
flake8.checker            SpawnPoolWorker-1    381 DEBUG    Logical line: "for e in entries:"
flake8.checker            SpawnPoolWorker-1    381 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    381 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx", e, "xx", scanner.validate_file(e), )"
flake8.bugbear            SpawnPoolWorker-3    348 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-1    381 DEBUG    Logical line: "except Exception as ex:"
flake8.checker            SpawnPoolWorker-1    382 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxx", ex)"
flake8.checker            SpawnPoolWorker-1    382 DEBUG    Logical line: "result = list(scanner.scan_directory(Path("xxxxx"), recursive=False))"
flake8.checker            SpawnPoolWorker-1    382 DEBUG    Logical line: "print("xxxxxxxxxxxxxx", len(result))"
flake8.checker            SpawnPoolWorker-1    383 DEBUG    Logical line: "for f in result:"
flake8.checker            SpawnPoolWorker-1    383 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    383 DEBUG    Logical line: "print("xxxxx", f, "xxxxx", f.size)"
flake8.checker            SpawnPoolWorker-1    383 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-1    383 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxx", e)"
flake8.checker            SpawnPoolWorker-1    383 DEBUG    Logical line: "print("xxxx")"
flake8.checker            SpawnPoolWorker-2    369 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-2    369 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-2    371 DEBUG    Logical line: "from unittest.mock import Mock, MagicMock"
flake8.checker            SpawnPoolWorker-2    371 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    371 DEBUG    Logical line: "import pathlib as _pl"
flake8.checker            SpawnPoolWorker-2    371 DEBUG    Logical line: "sys.path.insert(0, str(_pl.Path(r"xxxxxxxxxxxxxxxxxxxxx").resolve()))"
flake8.checker            SpawnPoolWorker-2    371 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-1    390 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-1    390 DEBUG    Logical line: "from unittest.mock import patch, Mock"
flake8.checker            SpawnPoolWorker-1    390 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "scanner = FileScanner()"
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file1 = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file1.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file1.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-2    375 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file1.stat.return_value.st_size = 1024"
flake8.checker            SpawnPoolWorker-2    375 DEBUG    Logical line: "os.environ["xxxxxxxxxxxxxxxxxxxxxx"] = "x""
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file1.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    375 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-4    341 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file1.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    341 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file2 = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-4    341 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-1    392 DEBUG    Logical line: "user_file2.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "user_file2.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "from typing import Iterator, Optional, Set"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "user_file2.stat.return_value.st_size = 2048"
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "user_file2.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "class DirectoryNotFoundError(Exception):"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "user_file2.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "class FileScanner:"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "non_user_file = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "non_user_file.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "def __init__(self, extensions: Optional[Set[str]] = None):"
flake8.checker            SpawnPoolWorker-2    377 DEBUG    Logical line: "scanner = FileScanner()"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "non_user_file.is_file.return_value = True"
flake8                    SpawnPoolWorker-12    173 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-4    344 DEBUG    Logical line: "self.extensions = {e.lower() for e in extensions} if extensions else None"
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "non_user_file.__str__ = lambda: "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    377 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    394 DEBUG    Logical line: "non_user_file.__fspath__ = lambda: "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-2    377 DEBUG    Logical line: "user_file1 = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "def scan_directory(self, directory: Path, recursive: bool = True, metadata=None, progress_reporter=None, ) -> Iterator[UserFile]:"
flake8.checker            SpawnPoolWorker-2    379 DEBUG    Logical line: "user_file1.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxx", return_value=True), patch("xxxxxxxxxxxxxxxxxxx", return_value=True), patch("xxxxxxxxx", return_value=True), patch("xxxxxxxxxxxxxxxxxxxx", return_value=[user_file1, user_file2, non_user_file], ):"
flake8.checker            SpawnPoolWorker-2    379 DEBUG    Logical line: "user_file1.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-2    379 DEBUG    Logical line: "mock_stat_obj = Mock()"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    379 DEBUG    Logical line: "mock_stat_obj.st_size = 1024"
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "directory = Path("xxxxx")"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "directory = Path(directory).resolve()"
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "print("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "res = list(scanner.scan(directory))"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "directory = Path(directory)"
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "print("xxxxxxxxxxx", len(res))"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "if not directory.exists():"
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "for f in res:"
flake8.checker            SpawnPoolWorker-2    379 DEBUG    Logical line: "user_file1.stat.return_value = mock_stat_obj"
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "raise DirectoryNotFoundError(f"Directory not found: {directory}")"
flake8.checker            SpawnPoolWorker-1    396 DEBUG    Logical line: "print("xxxxxxxxx", f, "xxxxx", f.size)"
flake8.checker            SpawnPoolWorker-2    379 DEBUG    Logical line: "user_file1.__str__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    346 DEBUG    Logical line: "if not directory.is_dir():"
flake8.checker            SpawnPoolWorker-4    348 DEBUG    Logical line: "raise DirectoryNotFoundError(f"Path is not a directory: {directory}")"
flake8.checker            SpawnPoolWorker-2    381 DEBUG    Logical line: "user_file1.__fspath__ = lambda: "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    348 DEBUG    Logical line: "if not os.access(directory, os.R_OK):"
flake8.checker            SpawnPoolWorker-4    348 DEBUG    Logical line: "raise PermissionError(f"Permission denied accessing directory: {directory}")"
flake8.checker            SpawnPoolWorker-2    381 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxx", hasattr(user_file1, "xxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-1    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    348 DEBUG    Logical line: "iterator = (self._scan_recursive(directory) if recursive else self._scan_non_recursive(directory))"
flake8.checker            SpawnPoolWorker-2    381 DEBUG    Logical line: "print("xxxxxxxxxxxxxxx", hasattr(user_file1, "xxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-4    349 DEBUG    Logical line: "files = list(iterator)"
flake8.checker            SpawnPoolWorker-4    349 DEBUG    Logical line: "def _safe_key(p):"
flake8.checker            SpawnPoolWorker-2    382 DEBUG    Logical line: "print("xxxxxxx", getattr(user_file1, "xxxxxx", None))"
flake8.checker            SpawnPoolWorker-4    349 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    349 DEBUG    Logical line: "return str(p)"
flake8.checker            SpawnPoolWorker-2    382 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    349 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "return getattr(p, "xxxx", repr(p))"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "valid = scanner.validate_file(user_file1)"
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "files = sorted(files, key=_safe_key)"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxx", valid)"
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "if progress_reporter:"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "progress_reporter.start_progress(len(files), "xxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "import traceback"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxx", e)"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "traceback.print_exc()"
flake8.checker            SpawnPoolWorker-3    366 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "user_file2 = MagicMock(spec=Path)"
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "user_file2.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-2    383 DEBUG    Logical line: "user_file2.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-3    366 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-4    350 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-2    385 DEBUG    Logical line: "user_file2.stat.return_value.st_size = 2048"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "processed = 0"
flake8.checker            SpawnPoolWorker-3    368 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "for p in files:"
flake8.checker            SpawnPoolWorker-2    385 DEBUG    Logical line: "user_file2.__str__.return_value = "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-3    368 DEBUG    Logical line: "import re"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "if not self.validate_file(p):"
flake8.checker            SpawnPoolWorker-2    385 DEBUG    Logical line: "user_file2.__fspath__.return_value = "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "processed += 1"
flake8.checker            SpawnPoolWorker-2    385 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "continue"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    385 DEBUG    Logical line: "print("xxxxxxxx", hasattr(user_file2, "xxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-3    368 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "size = p.stat().st_size"
flake8.checker            SpawnPoolWorker-3    368 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-3    368 DEBUG    Logical line: "from typing import List"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "size = 0"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "file_obj = UserFile(p)"
flake8.checker            SpawnPoolWorker-3    368 DEBUG    Logical line: "def is_auto_generated_name(filename):"
flake8.checker            SpawnPoolWorker-4    352 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "file_obj._size = size"
flake8.checker            SpawnPoolWorker-3    370 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-3    370 DEBUG    Logical line: "stem = Path(filename).stem"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "file_obj.is_local = True"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "if progress_reporter:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "label = p.name"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-4    354 DEBUG    Logical line: "label = str(p)"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "progress_reporter.update_progress(processed, f"Processing: {label}")"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-3    370 DEBUG    Logical line: "patterns = [r"xxxxxxxxxxxxxxxxx", r"xxxxxxxxxxxx", r"xxxxxxxxxxxxxxx", r"xxxxxxxx", r"xxxxxxxxxxxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "yield file_obj"
flake8.checker            SpawnPoolWorker-2    389 DEBUG    Logical line: "print("xxxxxxx", getattr(user_file2, "xxxxxx", None))"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "except (FileNotFoundError, PermissionError, ValueError):"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "if metadata is not None:"
flake8.checker            SpawnPoolWorker-2    389 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    389 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxx", scanner.validate_file(user_file2))"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "metadata.errors.append({"xxxx": str(p), "xxxxx": "xxxxxx"})"
flake8.checker            SpawnPoolWorker-2    389 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-4    356 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "print("xxxxxxx", e)"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-3    374 DEBUG    Logical line: "return any(re.match(pattern, stem, re.IGNORECASE) for pattern in patterns)"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "p = Path("xxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "processed += 1"
flake8.checker            SpawnPoolWorker-3    374 DEBUG    Logical line: "def is_numbered_duplicate(filename):"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "if progress_reporter:"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxx", scanner._is_video_file(p))"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "print("xxxxxx")"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "progress_reporter.finish_progress()"
flake8.checker            SpawnPoolWorker-3    374 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-3    374 DEBUG    Logical line: "stem = Path(filename).stem"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "def _scan_recursive(self, directory: Path):"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "dir_mock = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-3    374 DEBUG    Logical line: "return bool(re.match(r"xxxxxxxxxxxx", stem))"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "found = []"
flake8.checker            SpawnPoolWorker-4    358 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-3    374 DEBUG    Logical line: "def is_series_numbered(filename: str) -> bool:"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "if self.extensions:"
flake8.checker            SpawnPoolWorker-2    391 DEBUG    Logical line: "dir_mock.exists.return_value = True"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "for ext in self.extensions:"
flake8.checker            SpawnPoolWorker-3    377 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "dir_mock.is_dir.return_value = True"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "pattern = f"*{ext}""
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "dir_mock.iterdir.return_value = [user_file1, user_file2]"
flake8.checker            SpawnPoolWorker-3    377 DEBUG    Logical line: "stem = Path(filename).stem.lower()"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "for p in directory.rglob(pattern):"
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "dir_mock.glob.side_effect = lambda pattern: []"
flake8.checker            SpawnPoolWorker-3    377 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "if p.is_file():"
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "dir_mock.__str__ = lambda: "xxxxx""
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "found.append(p)"
flake8.checker            SpawnPoolWorker-3    377 DEBUG    Logical line: "patterns = [r"xxxxxxxxxxxxxx", r"xxxxxxxxxxxxxxxxx", r"xxxxxxxxxxxx", r"xxxxxxxxxxxxxxxxxxxxx", r"xxxxxxxxxxxxxx", r"xxxxxxxxxxxxx", r"xxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "dir_mock.__fspath__ = lambda: "xxxxx""
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "for p in directory.rglob("x"):"
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-3    377 DEBUG    Logical line: "for p in patterns:"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "if p.is_file():"
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "res = list(scanner.scan(dir_mock))"
flake8.checker            SpawnPoolWorker-1    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "found.append(p)"
flake8.checker            SpawnPoolWorker-4    360 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-3    377 DEBUG    Logical line: "if re.search(p, stem):"
flake8.checker            SpawnPoolWorker-2    393 DEBUG    Logical line: "print("xxxxxxxxxxxxx", res)"
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-2    395 DEBUG    Logical line: "for f in res:"
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "return found"
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "def _scan_non_recursive(self, directory: Path):"
flake8.checker            SpawnPoolWorker-2    395 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-3    379 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-2    395 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxx", f.size)"
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: "from src.cli.main import main"
flake8.checker            SpawnPoolWorker-3    379 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "found = []"
flake8.checker            SpawnPoolWorker-2    395 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-3    379 DEBUG    Logical line: "def get_file_size_mb(size_bytes):"
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-2    395 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxx", e)"
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: "if sys.version_info < (3, 12):"
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "if self.extensions:"
flake8.checker            SpawnPoolWorker-3    379 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "for ext in self.extensions:"
flake8.checker            SpawnPoolWorker-3    379 DEBUG    Logical line: "return f"{size_bytes / 1024 / 1024:.1f} MB""
flake8.checker            SpawnPoolWorker-1    412 DEBUG    Logical line: "sys.stderr.write("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" f"Current version: {sys.version.split()[0]}\n")"
flake8.checker            SpawnPoolWorker-4    362 DEBUG    Logical line: "pattern = f"*{ext}""
flake8.checker            SpawnPoolWorker-4    363 DEBUG    Logical line: "for p in directory.glob(pattern):"
flake8.checker            SpawnPoolWorker-3    380 DEBUG    Logical line: "def show_duplicate_group(group, group_num, total_groups):"
flake8.checker            SpawnPoolWorker-1    413 DEBUG    Logical line: "sys.exit(2)"
flake8.checker            SpawnPoolWorker-4    363 DEBUG    Logical line: "if p.is_file():"
flake8.checker            SpawnPoolWorker-3    380 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-1    413 DEBUG    Logical line: "def _maybe_insert_scan_subcommand():"
flake8.checker            SpawnPoolWorker-3    380 DEBUG    Logical line: "files = group["xxxxx"]"
flake8.checker            SpawnPoolWorker-4    363 DEBUG    Logical line: "found.append(p)"
flake8.checker            SpawnPoolWorker-1    413 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    363 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-3    380 DEBUG    Logical line: "print(f"\nGroup {group_num}/{total_groups} - {group['xxxxxxxxxxxxxxxxxx']} waste:")"
flake8.checker            SpawnPoolWorker-1    413 DEBUG    Logical line: "if len(sys.argv) <= 1:"
flake8.checker            SpawnPoolWorker-4    363 DEBUG    Logical line: "for p in directory.iterdir():"
flake8.checker            SpawnPoolWorker-1    414 DEBUG    Logical line: "return"
flake8.checker            SpawnPoolWorker-3    381 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    364 DEBUG    Logical line: "if p.is_file():"
flake8.checker            SpawnPoolWorker-3    381 DEBUG    Logical line: "for i, file_info in enumerate(files, 1):"
flake8.checker            SpawnPoolWorker-1    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    364 DEBUG    Logical line: "found.append(p)"
flake8.checker            SpawnPoolWorker-3    381 DEBUG    Logical line: "path = file_info["xxxx"]"
flake8.checker            SpawnPoolWorker-1    414 DEBUG    Logical line: "recognized = set(getattr(main, "xxxxxxxx", {}).keys())"
flake8.checker            SpawnPoolWorker-3    381 DEBUG    Logical line: "filename = Path(path).name"
flake8.checker            SpawnPoolWorker-4    364 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-1    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    364 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-4    365 DEBUG    Logical line: "return found"
flake8.checker            SpawnPoolWorker-1    415 DEBUG    Logical line: "for i, token in enumerate(sys.argv[1:], start=1):"
flake8.checker            SpawnPoolWorker-4    365 DEBUG    Logical line: "def _is_supported_file(self, file_path: Path) -> bool:"
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-1    415 DEBUG    Logical line: "if token.startswith("x"):"
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-4    365 DEBUG    Logical line: "if self.extensions:"
flake8.checker            SpawnPoolWorker-1    415 DEBUG    Logical line: "continue"
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-1    415 DEBUG    Logical line: "if token in recognized:"
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-4    365 DEBUG    Logical line: "return file_path.suffix.lower() in self.extensions"
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-6    332 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-4    365 DEBUG    Logical line: "return True"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-1    416 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    366 DEBUG    Logical line: "def validate_file(self, file_path: Path) -> bool:"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "return"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "p = file_path if isinstance(file_path, Path) else Path(file_path)"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "p = Path(token)"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "if p.exists() and p.is_dir():"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "if hasattr(p, "xxxxxxxx"):"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "p = p.resolve()"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "scan_options_with_value = {"xxxxxxxx", "xxxxxxxxxxx"}"
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "pass"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "if not p.exists():"
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "pre_indices = list(range(1, i))"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-4    367 DEBUG    Logical line: "if not p.is_file():"
flake8.options.manager    SpawnPoolWorker-6    333 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.checker            SpawnPoolWorker-1    417 DEBUG    Logical line: "move_indices = []"
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-4    369 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-1    419 DEBUG    Logical line: "j = 1"
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-4    369 DEBUG    Logical line: "if not self._is_supported_file(p):"
flake8.checker            SpawnPoolWorker-1    419 DEBUG    Logical line: "while j < i:"
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001BDB14109A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-6    335 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-4    369 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-1    419 DEBUG    Logical line: "tok = sys.argv[j]"
flake8.checker            SpawnPoolWorker-4    369 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    419 DEBUG    Logical line: "if tok in scan_options_with_value:"
flake8.checker            SpawnPoolWorker-4    369 DEBUG    Logical line: "if not os.access(p, os.R_OK):"
flake8.options.config     SpawnPoolWorker-6    335 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-1    419 DEBUG    Logical line: ""
flake8.options.config     SpawnPoolWorker-6    335 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-6    335 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.checker            SpawnPoolWorker-4    369 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-1    419 DEBUG    Logical line: "move_indices.append(j)"
flake8.checker            SpawnPoolWorker-3    381 DEBUG    Logical line: "size = get_file_size_mb(file_info["xxxxxxxxxx"])"
flake8.options.aggregator SpawnPoolWorker-6    337 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-6    337 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-6    337 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-4    371 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-1    421 DEBUG    Logical line: "if j + 1 < i:"
flake8                    SpawnPoolWorker-13    173 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-4    flake8.checker            SpawnPoolWorker-1  flake8                    SpawnPoolWorker-13    173 DEBUG    Added a None logging handler to logger root at flake8
371 DEBUG    Logical line: "except Exception:"
  421 DEBUG    Logical line: "if j + 1 < i:"
flake8.checker            SpawnPoolWorker-4    375 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-1    425 DEBUG    Logical line: "move_indices.append(j + 1)"
flake8.checker            SpawnPoolWorker-4    375 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-1    425 DEBUG    Logical line: "j += 2"
flake8.checker            SpawnPoolWorker-4    375 DEBUG    Logical line: "size = p.stat().st_size"
flake8.checker            SpawnPoolWorker-1    425 DEBUG    Logical line: "elif tok.startswith("x"):"
flake8.checker            SpawnPoolWorker-4    375 DEBUG    Logical line: "if size == 0:"
flake8.checker            SpawnPoolWorker-3    391 DEBUG    Logical line: "markers = []"
flake8.bugbear            SpawnPoolWorker-2    410 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-4    377 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-1    427 DEBUG    Logical line: "move_indices.append(j)"
flake8.checker            SpawnPoolWorker-4    378 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-1    428 DEBUG    Logical line: "j += 1"
flake8.checker            SpawnPoolWorker-4    378 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-1    428 DEBUG    Logical line: "else:"
flake8.bugbear            SpawnPoolWorker-2    411 INFO     Optional warning B904 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-4    378 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-4 flake8.checker            SpawnPoolWorker-1    428 DEBUG    Logical line: "j += 1"
flake8.bugbear            SpawnPoolWorker-2    411 INFO     Optional warflake8.checker            SpawnPoolWorker-3    394 DEBUG    Logical line: "if is_auto_generated_name(filename):"
flake8.checker            SpawnPoolWorker-1    428 DEBUG    Logical line: "j += 1"
flake8.checker            SpawnPoolWorker-1    429 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-4    378 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-1    429 DEBUG    Logical line: "moved = [sys.argv[idx] for idx in sorted(move_indices)]"
flake8.checker            SpawnPoolWorker-4    379 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-1    429 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-1    429 DEBUG    Logical line: ""
--- Logging error ---
flake8.checker            SpawnPoolWorker-4    379 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-4  flake8.checker            SpawnPoolWorker-1    429flake8.checker           flake8.checker        flake8.checker            SpawnPoolWorker-3    396 DEBUG    Logical line: "markers.append("xxxx")"
    SpawnPoolWorker-4    379 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-4    382 DEBUG    Logical line: "def get_supported_extensions(self) -> Optional[Set[str]]:"
flake8.checker            SpawnPoolWorker-4    382 DEBUG    Logical line: "return self.extensions.copy() if self.extensions else None"
flake8.checker            SpawnPoolWorker-4    382 DEBUG    Logical line: "def is_supported_extension(self, extension: str) -> bool:"
flake8.checker            SpawnPoolWorker-4    383 DEBUG    Logical line: "if self.extensions:"
flake8.checker            SpawnPoolWorker-4    383 DEBUG    Logical line: "return extension.lower() in self.extensions"
flake8.checker            SpawnPoolWorker-4    383 DEBUG    flake8.checker            SpawnPoolWorker-3    402 DEBUG    Logical line: "if is_numbered_duplicate(filename):"
flake8.checker            SpawnPoolWorker-2    420 DEBUG    Logical line: ""
Logical line: "return extension.lower() in self.extensions"
flake8.checker            SpawnPoolWorker-3    405 DEBUG    Logical line: "markers.append("xxx")"
flake8.checker            SpawnPoolWorker-4    388 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-3    405 DEBUG    Logical line: "marker_str = f" [{'xx'.join(markers)}]" if markers else """
flake8.checker            SpawnPoolWorker-2    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-3    406 DEBUG    Logical line: "print(f"  {i}. {filename} ({size}){marker_str}")"
flake8.checker            SpawnPoolWorker-2    422 DEBUG    Logical line: "import click"
flake8.checker            SpawnPoolWorker-4    390 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-4    390 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-2    422 DEBUG    Logical line: "import click"
flake8.checker            SpawnPoolWorker-4    391 DEBUG    Logical line: "from .main import main"
flake8.checker            SpawnPoolWorker-3    408 DEBUG    Logical line: "return files"
flake8.checker            SpawnPoolWorker-2    424 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-4    391 DEBUG    Logical line: "__all__ = ["xxxx"]"
flake8.checker            SpawnPoolWorker-2    424 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-3    408 DEBUG    Logical line: "def show_auto_decision_concise(files):"
flake8.checker            SpawnPoolWorker-4    3flake8.checker            SpawnPoolWorker-3    408 DEBUG  port Path"
flake8.checker            Spaport Pflake8.checker            SpawnPoolWorker-4    391 DEBUG    Logical line: "__all__ = ["xxxx"]"
--- Logging error ---
flake8.checker            SpawnPoolWorker-4    391 DEBUG   port Path"
flake8.checker            SpawnPoolWorker-3    408 DEBUG    Logical line: "def show_auto_decision_concise(files):"
flake8.options.manager    SpawnPoolWorker-5    375 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-5    375 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-2    425 DEBUG    Logical line: "from typing import Any"
flake8.options.manager    SpawnPoolWorker-5    375 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorker-2    425 DEBUG    Logical line: "from typing import Any"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-5    375 DEBflake8.checker            SpawnPoolWorker-2    425 DEBUG    Lflake8.checker            SpawnPoolWorker-3    409 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            Spawflake8.checker            SpawnPoolWorker-3    409 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-5    377 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-3    411 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-5    377 DEBUG    Registered option "Option(--count, actiUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-3    411 DEBUG    Logical line: ""
--- Logging error ---
flake8.checker            SpawnPoolWorker-3    411 DEBUG    Logical line: ""
--- Logging error ---
UG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
flake8.bugbear            SpawnPoolWorker-6    366 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.options.manager    SpawnPoolWorker-7    344 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-7    345 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-7    347 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-7    347 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-7    347 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-7    349 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-7    349 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-7    349 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8                    SpawnPoolWorker-14    187 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-7    350 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-7    351 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-7    353 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-7    353 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-7    353 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-7    353 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-7    353 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-7    356 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-7    358 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CC337209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-7    358 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-7    358 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-7    358 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-7    358 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-7    358 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-7    358 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-7    358 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-7    358 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-7    359 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-6    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    397 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-7    375 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    397 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-7    376 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    397 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-6    397 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-7    376 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-6    397 DEBUG    Logical line: "from typing import Optional"
flake8.checker            SpawnPoolWorker-7    376 DEBUG    Logical line: "import platform"
flake8.checker            SpawnPoolWorker-7    377 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-6    398 DEBUG    Logical line: "import click"
flake8.checker            SpawnPoolWorker-7    377 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-6    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    377 DEBUG    Logical line: "from typing import Any, Dict, List, Optional"
flake8.checker            SpawnPoolWorker-6    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    377 DEBUG    Logical line: "from datetime import datetime, timezone"
flake8.checker            SpawnPoolWorker-6    398 DEBUG    Logical line: "class CommandFirstGroup(click.Group):"
flake8.checker            SpawnPoolWorker-7    377 DEBUG    Logical line: "class ConfigManager:"
flake8.checker            SpawnPoolWorker-6    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    399 DEBUG    Logical line: "def resolve_command(self, ctx, args):"
flake8.checker            SpawnPoolWorker-6    400 DEBUG    Logical line: "if args:"
flake8.checker            SpawnPoolWorker-6    400 DEBUG    Logical line: "potential = args[0]"
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: "DEFAULT_CONFIG = {"xxxxxxxxxxxxxxx": 0.8, "xxxxxxxxxxxxxxxxxxxx": 104857600, "xxxxxxxxxxxxxxxxxxxxx": "xxxx", "xxxxxxxxxxxxxx": True, "xxxxxxxxxxxx": False, "xxxxxxxxxxxxx": True, "xxxxxxxxxxxxxxxxxxx": [], "xxxxxxxxxxx": 0, "xxxxxxxxxxxxxxxxxxxxx": 0, "xxxxxxxxxxxxxxxxxxxxxx": 0, }"
flake8.checker            SpawnPoolWorker-6    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: "self._config: Optional[Dict[str, Any]] = None"
flake8.checker            SpawnPoolWorker-6    400 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-7    378 DEBUG    Logical line: "self._config_path: Optional[Path] = None"
flake8.checker            SpawnPoolWorker-6    400 DEBUG    Logical line: "potential_str = (potential if isinstance(potential, str) else str(potential))"
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "def get_config_path(self) -> Path:"
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: "potential_str = str(potential)"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: "if os.environ.get("xxxxxxxxxxxxxxxxxx") == "x":"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "if self._config_path is None:"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "self._config_path = self._get_config_path()"
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "return self._config_path"
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: "print(f"[CommandFirstGroup] args={args}, potential={potential!r}, commands={list(self.commands.keys())}")"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "def _get_config_path(self) -> Path:"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-15    184 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "system = platform.system()"
flake8.checker            SpawnPoolWorker-7    380 DEBUG    Logical line: "if system == "xxxxxxx":"
flake8.checker            SpawnPoolWorker-6    402 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "appdata = os.environ.get("xxxxxxx")"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "if potential_str in self.commands:"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "if not appdata:"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "raise ValueError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "if os.environ.get("xxxxxxxxxxxxxxxxxx") == "x":"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "config_dir = Path(appdata) / "xxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "print(f"[CommandFirstGroup] resolving to subcommand {potential_str}")"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "return potential_str, self.commands[potential_str], args[1:]"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "elif system == "xxxxxx":"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "home = Path.home()"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "config_dir = (home / "xxxxxxx" / "xxxxxxxxxxxxxxxxxxx" / "xxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-6    404 DEBUG    Logical line: "if "xxxx" in self.commands and not potential_str.startswith("x"):"
flake8.checker            SpawnPoolWorker-7    382 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: "from pathlib import Path as _Path"
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: "xdg_config_home = os.environ.get("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: "p = _Path(potential)"
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: "if xdg_config_home:"
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: "if p.exists() and p.is_dir():"
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: "config_dir = Path(xdg_config_home) / "xxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: "return "xxxx", self.commands["xxxx"], args"
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: "home = Path.home()"
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: "config_dir = home / "xxxxxxx" / "xxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    384 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "return config_dir / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "def load_config(self) -> Dict[str, Any]:"
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "if potential_str.startswith("x") and "xxxx" in self.commands:"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "if self._config is not None:"
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "if os.environ.get("xxxxxxxxxxxxxxxxxx") == "x":"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "return self._config"
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "print(f"[CommandFirstGroup] treating leading option {potential_str} as scan subcommand")"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "config_path = self.get_config_path()"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "if not config_path.exists():"
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "return "xxxx", self.commands["xxxx"], args"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "self._config = self.DEFAULT_CONFIG.copy()"
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-6    408 DEBUG    Logical line: "return super().resolve_command(ctx, args)"
flake8.checker            SpawnPoolWorker-7    386 DEBUG    Logical line: "self.save_config()"
flake8.checker            SpawnPoolWorker-7    388 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-7    388 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-7    388 DEBUG    Logical line: "with open(config_path, "x", encoding="xxxxx") as f:"
flake8.checker            SpawnPoolWorker-6    410 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    388 DEBUG    Logical line: "file_config = yaml.safe_load(f) or {}"
flake8.checker            SpawnPoolWorker-6    410 DEBUG    Logical line: "def check_python_version():"
flake8.checker            SpawnPoolWorker-7    388 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    389 DEBUG    Logical line: "self._config = self.DEFAULT_CONFIG.copy()"
flake8.checker            SpawnPoolWorker-6    411 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    411 DEBUG    Logical line: "if sys.version_info < (3, 12):"
flake8.checker            SpawnPoolWorker-7    389 DEBUG    Logical line: "self._config.update(file_config)"
flake8.checker            SpawnPoolWorker-7    389 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    411 DEBUG    Logical line: "click.echo("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", err=True)"
flake8.checker            SpawnPoolWorker-7    389 DEBUG    Logical line: "self.save_config()"
flake8.checker            SpawnPoolWorker-6    411 DEBUG    Logical line: "click.echo(f"Current version: Python {sys.version.split()[0]}", err=True)"
flake8.checker            SpawnPoolWorker-7    389 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-7    390 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    412 DEBUG    Logical line: "click.echo("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", err=True)"
flake8.checker            SpawnPoolWorker-7    390 DEBUG    Logical line: "print(f"Warning: Could not load config file ({e}), using defaults")"
flake8.checker            SpawnPoolWorker-6    412 DEBUG    Logical line: "sys.exit(3)"
flake8.checker            SpawnPoolWorker-7    390 DEBUG    Logical line: "self._config = self.DEFAULT_CONFIG.copy()"
flake8.checker            SpawnPoolWorker-7    390 DEBUG    Logical line: "self.save_config()"
flake8.checker            SpawnPoolWorker-6    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    390 DEBUG    Logical line: "return self._config"
flake8.checker            SpawnPoolWorker-6    412 DEBUG    Logical line: "check_python_version()"
flake8.checker            SpawnPoolWorker-7    391 DEBUG    Logical line: "def save_config(self) -> None:"
flake8.checker            SpawnPoolWorker-6    413 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    413 DEBUG    Logical line: "from ..services.file_scanner import FileScanner, DirectoryNotFoundError"
flake8.checker            SpawnPoolWorker-7    391 DEBUG    Logical line: "if self._config is None:"
flake8.checker            SpawnPoolWorker-7    392 DEBUG    Logical line: "return"
flake8.checker            SpawnPoolWorker-7    392 DEBUG    Logical line: "config_path = self.get_config_path()"
flake8.checker            SpawnPoolWorker-7    392 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-7    392 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    393 DEBUG    Logical line: "config_path.parent.mkdir(parents=True, exist_ok=True)"
flake8.checker            SpawnPoolWorker-6    414 DEBUG    Logical line: "from ..services.duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-7    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    414 DEBUG    Logical line: "from ..services.progress_reporter import ProgressReporter"
flake8.checker            SpawnPoolWorker-7    393 DEBUG    Logical line: "temp_path = config_path.with_suffix("xxxx")"
flake8.checker            SpawnPoolWorker-7    393 DEBUG    Logical line: "with open(temp_path, "x", encoding="xxxxx") as f:"
flake8.checker            SpawnPoolWorker-6    414 DEBUG    Logical line: "from ..services.result_exporter import ResultExporter, DiskSpaceError"
flake8.checker            SpawnPoolWorker-7    393 DEBUG    Logical line: "yaml.safe_dump(self._config, f, default_flow_style=False, sort_keys=False)"
flake8.checker            SpawnPoolWorker-6    414 DEBUG    Logical line: "from ..models.scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-7    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    394 DEBUG    Logical line: "temp_path.replace(config_path)"
flake8.checker            SpawnPoolWorker-6    416 DEBUG    Logical line: "from ..models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-7    394 DEBUG    Logical line: "except PermissionError as e:"
flake8.checker            SpawnPoolWorker-6    416 DEBUG    Logical line: "from ..lib.config_manager import ConfigManager"
flake8.checker            SpawnPoolWorker-7    394 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    395 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "from .config_commands import config"
flake8.checker            SpawnPoolWorker-7    395 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "from ..lib.container import Container"
flake8.checker            SpawnPoolWorker-7    395 DEBUG    Logical line: "print(f"Warning: Permission denied saving config ({e}); using in-memory settings")"
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "__version__ = "xxxxx""
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "def format_size(bytes_size: int) -> str:"
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "for unit in ["x", "xx", "xx", "xx", "xx"]:"
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "if bytes_size < 1024:"
flake8.checker            SpawnPoolWorker-6    417 DEBUG    Logical line: "return f"{bytes_size:.1f} {unit}""
flake8.checker            SpawnPoolWorker-6    419 DEBUG    Logical line: "bytes_size /= 1024"
flake8.checker            SpawnPoolWorker-6    419 DEBUG    Logical line: "return f"{bytes_size:.1f} PB""
flake8                    SpawnPoolWorker-16    173 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-6    419 DEBUG    Logical line: "@click.group(cls=CommandFirstGroup, invoke_without_command=True, context_settings={"xxxxxxxxxxxxxxxx": True, "xxxxxxxxxxxxxxxxxxxxxx": True, }, )"
flake8.options.manager    SpawnPoolWorker-8    370 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-8    372 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-8    372 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-8    372 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-8    372 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-8    373 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-8    373 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-6    421 DEBUG    Logical line: "@click.pass_context"
flake8.options.manager    SpawnPoolWorker-8    373 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-6    422 DEBUG    Logical line: "@click.version_option(version=__version__, prog_name="xxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-7    401 DEBUG    Logical line: "except Exception as e:"
flake8.options.manager    SpawnPoolWorker-8    374 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-7    402 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    375 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-6    424 DEBUG    Logical line: "def main(ctx: click.Context):"
flake8.checker            SpawnPoolWorker-7    402 DEBUG    Logical line: "print(f"Warning: Failed to save configuration ({e}); using in-memory settings")"
flake8.checker            SpawnPoolWorker-7    402 DEBUG    Logical line: "priflake8.checker            SpawnPoolWorker-6    424 DEnt(f"Warning: Failed to save configuration ({e}); using in-memory settings")"
BUG    Logical line: "def main(ctx: click.Context):"
flake8.options.manager    SpawnPoolWorker-8    375 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-7    402 DEBUG    Logical line: "def get_setting(self, key: str, default: Any = None) -> Any:"
flake8.checker            SpawnPoolWorker-6    424 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    424 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.options.manager    SpawnPoolWorker-8    377 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-7    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-7    404 DEBUG   flake8.options.manager    SpawnPoolWorker-8    377 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationsflake8.checker            SpawnPoolWorker-7    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-8    377 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-7    406 DEBUG    Logical line: "config = self.load_config()"
 Logical line: "config = self.load_config()"
run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-6    428 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    379 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-6    428 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    406 DEBUG    Logical line: "return config.get(key, default)"
flake8.options.manager    SpawnPoolWorker-8    379 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-6    428 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    406 DEBUG    Logical line: "def set_setting(self, key: str, value: Any) -> None:"
flake8.checker            SpawnPoolWorker-6    428 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    379 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-6    428 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    379 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-8    379 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_sepaflake8.checker            SpawnPoolWorker-7    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    430 DEBUG    Logical line: "if ctx.invoked_subcommand is None:"
rated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-8    381 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-7    408 DEBUG    Logical line: "config = self.load_config()"
flake8.checker            SpawnPoolWorker-6    430 DEBUG    Logical line: "click.echo(ctx.get_help(), color=ctx.color)"
flake8.options.manager    SpawnPoolWorker-8    381 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-8    382 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-7    409 DEBUG    Logical line: "config[key] = value"
flake8.checker            SpawnPoolWorker-6    431 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    382 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-8    382 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-6    431 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-7    409 DEBUG    Logical line: "self.save_config()"
flake8.checker            SpawnPoolWorker-6    431 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    382 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-6    431 DEBUG    Logical line: "argv = list(ctx.args) if ctx.args is not None else []"
flake8.checker            SpawnPoolWorker-7    409 DEBUG    Logical line: "def get_all_settings(self) -> Dict[str, Any]:"
flake8.options.manager    SpawnPoolWorker-8    382 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-7    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    432 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-8    383 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-6    432 DEBUG    Logical line: "import sys as _sys"
flake8.checker            SpawnPoolWorker-7    410 DEBUG    Logical line: "return self.load_config().copy()"
flake8.options.manager    SpawnPoolWorker-8    383 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-8    383 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-7    410 DEBUG    Logical line: "def add_scan_history(self, directory_path: str, file_count: int, duplicates_found: int) -> None:"
flake8.checker            SpawnPoolWorker-6    432 DEBUG    Logical line: "raw_help = any(a in (_sys.argv[1:] if len(_sys.argv) > 1 else []) for a in ("xxxxxx", "xx"))"
flake8.options.manager    SpawnPoolWorker-8    383 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-8    383 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-7    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-7    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-6    433 DEBUG    Logical line: "if ("xxxxxx" in argv or "xx" in argv) or raw_help:"
flake8.options.manager    SpawnPoolWorker-8    384 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-8    384 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.checker            SpawnPoolWorker-7    411 DEBUG    Logical line: "config = self.load_config()"
flake8.checker            SpawnPoolWorker-6    433 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-8    384 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-8    385 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-8    385 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flakeflake8.checker            SpawnPoolWorker-7    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-6    433 DEBUG    Logical line: "if "xxxx" in getattr(main, "xxxxxxxx", {}):"
8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-8    385 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-8    385 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-7    412 DEBUG    Logical line: "abs_path = str(Path(directory_path).resolve())"
flake8.options.manager    SpawnPoolWorker-8    385 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flakflake8.checker            SpawnPoolWorker-6    435 DEBUG    Logical line: "scan_cmd = main.commands["xxxx"]"
flake8.options.manager    SpawnPoolWorker-9    369 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
e8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-8    387 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000296728909A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-6    435 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-7    414 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-9    369 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-8    389 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-8    389 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-9    371 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-8    389 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-6    437 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-9    371 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002B75FEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-7    416 DEBUG    Logical line: "scan_entry = {"xxxx": abs_path, "xxxxxxxxxxxx": datetime.now(timezone.utc) .isoformat() .replace("xxxxxx", "x"), "xxxxxxxxxx": file_count, "xxxxxxxxxxxxxxxx": duplicates_found, }"
flake8.checker            SpawnPoolWorker-7    416 DEBUG    Logical line: "scan_entry = {"xxxx": abs_path, "xxxxxxxxxxxx": datetflake8.options.manager    SpawnPoolWorker-9    371 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fime.now(timezone.utc) .isoformat() .replace("xxxxxx", "x"), "xxxxxxxxxx": file_count, "xxxxxxxxxxxxxxxx": duplicates_found, }"
ime.now(timezone.utc) .isoformat() .replace("xxxxxx", "x"), "xxxime.now(timezone.utc) .isoformat() .replace("xxxxxx", "x"), "xxxxxxxxxx": file_count, "xxxxxxxxxxxxxxxx": duplicates_found, }"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-9    371 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002B75FEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-6    437 DEBUG    Logical line: ""
flake8.options.config     SpawnPoolWorker-8    390 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorkime.now(timezone.utc) .isoformat() .replace("xxxxxx", "x"), "xxxxxxxxxx": farated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
ime.now(timezone.utc) .isoformat() .rer-6    437 DEBUG    Logical line: ""
ime.now(timezone.uarated_list=True, normalize_paths=True), help='Comma-separated list of files er-6    437 DEBUG  er-6    4ime.now(tarated_list=True, normalize_paths=Trueer-6    437 DEBUG    Logical line: ""
--- Logging error ---
arated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
--- Logging error ---
flake8.options.config     SpawnPoolWorker-8    390 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-8    390 DEBUG    Option "excarated_list=True, normalize_paths=True), help='Comma-separated list of files or directorlude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
lude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-8    390 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-8    391 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-8    391 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-8    391 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-8    395 DEBUG    Logical line: "from dependency_injector import containers, providers"
flake8.checker            SpawnPoolWorker-8    395 DEBUG    Logical line: "import logging"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "from src.services.progress_reporter import ProgressReporter"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "from src.services.file_hasher import stream_hash"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "from src.services.file_database import get_database"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "from src.lib.config_manager import ConfigManager"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "from src.lib.interfaces import LoggerProtocol"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "import sys"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "from typing import Optional"
flake8.checker            SpawnPoolWorker-8    397 DEBUG    Logical line: "def _make_logger(name: str = "xxxxxxxxxxxxxxxxxxxxxxx", level: Optional[str] = None):"
flake8.checker            SpawnPoolWorker-8    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-8    399 DEBUG    Logical line: "logger = logging.getLogger(name)"
flake8.checker            SpawnPoolWorker-8    399 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-8    399 DEBUG    Logical line: "lvl = logging.INFO"
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: "if level:"
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-10    358 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: "lvl = getattr(logging, level.upper(), logging.INFO)"
flake8.options.manager    SpawnPoolWorker-10    359 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-10    359 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: "except Exception:"
flake8.options.manager    SpawnPoolWorker-10    359 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: "lvl = logging.INFO"
flake8.options.manager    SpawnPoolWorker-10    359 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: "logger.setLevel(lvl)"
flake8.options.manager    SpawnPoolWorker-10    359 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-8    400 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-10    359 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "if not logger.handlers:"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "handler = logging.StreamHandler(stream=sys.stderr)"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "formatter = logging.Formatter("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "handler.setFormatter(formatter)"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "logger.addHandler(handler)"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "return logger"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "class Container(containers.DeclarativeContainer):"
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-10    360 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "config = providers.Configuration()"
flake8.checker            SpawnPoolWorker-8    401 DEBUG    Logical line: "config = providers.Configuration()"
flake8.options.manager    SpawnPoolWorker-10    364 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-8    405 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-10    364 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-10    364 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-8    405 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-8    405 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-10    364 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-8    405 DEBUG    Logical line: ""
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-10    366 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-10    366 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-10    366 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002153EB809A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-10    367 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-10    368 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-10    368 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-10    368 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-10    368 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-10    368 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-10    368 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-10    371 DEBUG    Logical line: "class DatabaseError(Exception):"
flake8.checker            SpawnPoolWorker-10    371 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    371 DEBUG    Logical line: "class DatabaseCorruptError(DatabaseError):"
flake8.checker            SpawnPoolWorker-10    371 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    371 DEBUG    Logical line: "class DatabaseNotConfiguredError(DatabaseError):"
flake8.checker            SpawnPoolWorker-10    371 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-17    187 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-10    377 DEBUG    Logical line: "from typing import Protocol, runtime_checkable, Any"
flake8.checker            SpawnPoolWorker-10    377 DEBUG    Logical line: "import pathlib"
flake8.checker            SpawnPoolWorker-10    377 DEBUG    Logical line: "@runtime_checkable"
flake8.checker            SpawnPoolWorker-10    377 DEBUG    Logical line: "class LoggerProtocol(Protocol):"
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "handlers: list[Any]"
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "def debug(self, msg: str, *args: Any, **kwargs: Any) -> None:"
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "def info(self, msg: str, *args: Any, **kwargs: Any) -> None:"
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "def warning(self, msg: str, *args: Any, **kwargs: Any) -> None:"
flake8.checker            SpawnPoolWorker-10    379 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "def error(self, msg: str, *args: Any, **kwargs: Any) -> None:"
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "def exception(self, msg: str, *args: Any, **kwargs: Any) -> None:"
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "def setLevel(self, level: int) -> None:"
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "@runtime_checkable"
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: "class ProgressReporterProtocol(Protocol):"
flake8.checker            SpawnPoolWorker-10    381 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    383 DEBUG    Logical line: "def start_progress(self, total: int, label: str) -> None:"
flake8.checker            SpawnPoolWorker-10    383 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    383 DEBUG    Logical line: "def update_progress(self, idx: int, name: str) -> None:"
flake8.checker            SpawnPoolWorker-10    383 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    383 DEBUG    Logical line: "def finish_progress(self) -> None:"
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: "@runtime_checkable"
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: "class HasherProtocol(Protocol):"
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: "def __call__(self, path: "xxxxxxxxxxxx", chunk_size: int = ...) -> str:"
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    384 DEBUG    Logical line: "@runtime_checkable"
flake8.checker            SpawnPoolWorker-10    386 DEBUG    Logical line: "class FileDatabaseProtocol(Protocol):"
flake8.checker            SpawnPoolWorker-10    386 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    386 DEBUG    Logical line: "def get_cached_hash(self, path: "xxxxxxxxxxxx", size: int, mtime: float) -> Any:"
flake8.checker            SpawnPoolWorker-10    386 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    386 DEBUG    Logical line: "def set_cached_hash(self, path: "xxxxxxxxxxxx", size: int, mtime: float, hashv: str) -> None:"
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "@runtime_checkable"
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "class ConfigManagerProtocol(Protocol):"
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "DEFAULT_CONFIG: Any"
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "def load_config(self) -> dict:"
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "def add_scan_history(self, directory: "xxxxxxxxxxxx", file_count: int, duplicates_found: int) -> None:"
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    387 DEBUG    Logical line: "@runtime_checkable"
flake8.checker            SpawnPoolWorker-10    389 DEBUG    Logical line: "class ResultExporterProtocol(Protocol):"
flake8.checker            SpawnPoolWorker-10    389 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    389 DEBUG    Logical line: "def export_yaml(self, scan_result: Any, path: "xxxxxxxxxxxx") -> None:"
flake8.checker            SpawnPoolWorker-10    389 DEBUG    Logical line: "..."
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "import ctypes"
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "import platform"
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "from typing import Optional"
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "from ..models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 0x00400000"
flake8.checker            SpawnPoolWorker-10    396 DEBUG    Logical line: "INVALID_FILE_ATTRIBUTES = 0xFFFFFFFF"
flake8.checker            SpawnPoolWorker-10    398 DEBUG    Logical line: "class WindowsOneDriveAPIError(Exception):"
flake8.checker            SpawnPoolWorker-10    398 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    398 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-10    398 DEBUG    Logical line: "def is_windows_platform() -> bool:"
flake8.checker            SpawnPoolWorker-10    398 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    398 DEBUG    Logical line: "return platform.system().lower() == "xxxxxxx""
flake8.checker            SpawnPoolWorker-10    399 DEBUG    Logical line: "def detect_cloud_status(file_path: Path) -> CloudFileStatus:"
flake8.checker            SpawnPoolWorker-10    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    399 DEBUG    Logical line: "if not is_windows_platform():"
flake8.checker            SpawnPoolWorker-10    399 DEBUG    Logical line: "raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-10    399 DEBUG    Logical line: "if not file_path.exists():"
flake8.checker            SpawnPoolWorker-10    400 DEBUG    Logical line: "raise OSError(f"File not found: {file_path}")"
flake8.checker            SpawnPoolWorker-10    400 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-10    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-10    400 DEBUG    Logical line: "attributes = ctypes.windll.kernel32.GetFileAttributesW(str(file_path))"
flake8.checker            SpawnPoolWorker-10    400 DEBUG    Logical line: "if attributes == INVALID_FILE_ATTRIBUTES:"
flake8.options.manager    SpawnPoolWorker-11    381 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-12    353 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-11    382 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-10    401 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-11    382 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-12    354 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-10    401 DEBUG    Logical line: "error_code = ctypes.windll.kernel32.GetLastError()"
flake8.options.manager    SpawnPoolWorker-12    354 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-11    382 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: "raise WindowsOneDriveAPIError(f"Failed to get file attributes for {file_path}, error code: {error_code}")"
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: "if attributes & FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS:"
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: "return CloudFileStatus.CLOUD_ONLY"
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: "else:"
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8                    SpawnPoolWorker-18    189 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-10    402 DEBUG    Logical line: "except OSError:"
flake8.options.manager    SpawnPoolWorker-12    355 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-11    383 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-10    403 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-10    403 DEBUG    Logical line: "raise"
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-10    403 DEBUG    Logical line: "except Exception as e:"
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-10    403 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-10    403 DEBUG    Logical line: "raise WindowsOneDriveAPIError(f"Windows API error detecting cloud status: {e}") from e"
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-12    356 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-10    403 DEBUG    Logical line: "def detect_cloud_status_safe(file_path: Path) -> Optional[CloudFileStatus]:"
flake8.options.manager    SpawnPoolWorker-11    384 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: "return detect_cloud_status(file_path)"
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002A5B52209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-11    385 DEBUG    Extending default select list with ['W']
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000283ECC209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: "except Exception:"
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-12    357 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: "return None"
flake8.options.config     SpawnPoolWorker-11    385 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-11    385 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: "def is_onedrive_supported() -> bool:"
flake8.options.config     SpawnPoolWorker-11    385 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.config     SpawnPoolWorker-12    357 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-12    357 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.aggregator SpawnPoolWorker-11    385 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.config     SpawnPoolWorker-12    357 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-11    385 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-11    385 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.aggregator SpawnPoolWorker-12    357 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.aggregator SpawnPoolWorker-12    357 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-12    357 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-10    404 DEBUG    Logical line: "return is_windows_platform()"
flake8.checker            SpawnPoolWorker-10    406 DEBUG    Logical line: "def get_platform_info() -> dict:"
flake8.checker            SpawnPoolWorker-10    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-10    406 DEBUG    Logical line: "return {"xxxxxxxx": platform.system(), "xxxxxxx": platform.version(), "xxxxxxxxxxxxxxxxxx": is_onedrive_supported(), "xxxxxxxxxxxxx": is_windows_platform(), }"
flake8.checker            SpawnPoolWorker-11    390 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-11    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-11    391 DEBUG    Logical line: "import sqlite3"
flake8.checker            SpawnPoolWorker-11    391 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-11    391 DEBUG    Logical line: "MIGRATIONS = [("xxxxxxxxxxx", """xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""", ), ]"
flake8.checker            SpawnPoolWorker-12    363 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-12    365 DEBUG    Logical line: "from enum import Enum"
flake8.checker            SpawnPoolWorker-11    393 DEBUG    Logical line: "def apply_migrations(db_path: Path):"
flake8.checker            SpawnPoolWorker-12    365 DEBUG    Logical line: "class CloudFileStatus(Enum):"
flake8.checker            SpawnPoolWorker-11    393 DEBUG    Logical line: "conn = sqlite3.connect(str(db_path))"
flake8.checker            SpawnPoolWorker-11    393 DEBUG    Logical line: "cur = conn.cursor()"
flake8.checker            SpawnPoolWorker-12    365 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-11    393 DEBUG    Logical line: "for version, sql in MIGRATIONS:"
flake8.checker            SpawnPoolWorker-11    395 DEBUG    Logical line: "cur.executescript(sql)"
flake8.checker            SpawnPoolWorker-12    367 DEBUG    Logical line: "LOCAL = "xxxxx""
flake8.checker            SpawnPoolWorker-11    395 DEBUG    Logical line: "conn.commit()"
flake8.checker            SpawnPoolWorker-12    367 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-11    395 DEBUG    Logical line: "conn.close()"
flake8.checker            SpawnPoolWorker-12    367 DEBUG    Logical line: "CLOUD_ONLY = "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-12    367 flake8.checker            SpawnPoolWorker-11 flake8.checker        flake8.checker                SpawnPoolWorker-11    395 DEBUG    Logical line: "conn.close()"
SpawnPoolWorker-12    367 DEBUG    Logical line: "CLOUD_ONLY = "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-12    371 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-11    399 DEBUG    Logical line: "if __name__ == "xxxxxxxx":"
flake8.checker            SpawnPoolWorker-12    371 DEBUG    Logical line: "def __str__(self) -> str:"
flake8.checker            SpawnPoolWorker-11    399 DEBUG    Logical line: "import sys"
flake8.bugbear            SpawnPoolWorker-10    420 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-12    373 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-11    401 DEBUG    Logical line: "if len(sys.argv) < 2:"
flake8.checker            SpawnPoolWorker-11    40flake8.checker            SpawnPoolWorker-12    373 DEBUG    Logica1 DEBUG    Logical line: "if len(sys.argv) < 2:"
l line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.bugbear            SpawnPoolWorker-10    420 INFO     Optional warning B909 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-12    373 DEBUG    Logical line: "return f"CloudFileStatus.{self.name}""
flake8.checker            SpawnPoolWorker-11    401 DEBUG    Logical line: "print("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-11    401 DEBUG    Logical line: "sys.exit(1)"
flake8.checker            SpawnPoolWorker-12    373 DEBUG    Logical line: "def __repr__(self) -> str:"
flake8.checker            SpawnPoolWorker-11    401 DEBUG    Logical line: "apply_migrations(Path(sys.argv[1]))"
flake8.options.manager    SpawnPoolWorker-13    348 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-10    427 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-13    351 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-12    380 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-13    353 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-12    382 DEBUG    Logical line: "return f"CloudFileStatus.{self.name}""
flake8.options.manager    SpawnPoolWorker-13    353 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000235310D09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-10    429 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-11    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-11    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.options.manager    SpawnPoolWorker-13    355 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000235310D09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-12    384 DEBUG    Logical line: "@classmethod"
flake8.checker            SpawnPoolWorker-10    431 DEBUG    Logical line: "from typing import Iterator, List, Optional"
flake8.checker            SpawnPoolWorker-10    431 DEBUG    flake8.checker            SpawnPoolWorker-12 Logical line: "from typing import Iterator, List, Optional"
   384 DEBUG    Logical line: "@classmethod"
flake8.options.manager    SpawnPoolWorker-13    355 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.checker            SpawnPoolWorker-11    414 DEBUG    Logical line: "from .user_file import UserFile"
   384 DEBUG    Logicalflake8.options.manager    SpawnPoolWorker-13    355 DEBUG    Registered option "Option(-Logical line: "from typing impflake8.checker            SpawnPoolWorker-11    414 DEBUG    Logical line: "from .user_file import UserFile"
--- Logging error ---
Logical line: "   384 DEBUflake8.checker            SpawnPoolWorker-11    414 DEBUG    Logicflake8.checker            SpawnPoLogical   384 DEBUG    Logical line: "@classmethod"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-13    357 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000235310D09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
   384 DEBUG    Logical line: "@clflake8.options.manager    SpawnPoolWorker-13    357 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000235310D09Aflake8.checker  Logical line: "from typing import Iterator, List, Optional"
--- Logging error ---
Logical line: "from typing import Iteratorflake8.c   384 DEBUG    LflakLogical line: "from tflake8.options.manager    SpawnPoolWorker-13    357 DEBUG    Registered option "Option(--file   384 DflLogical li35310D09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
35310D09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames maLogic   3  Loenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
enames matching the patterns in this comma-separated enames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
enames matching the patterns in this comma-separated list. (Defauenames matching the patterns in flake8                    SpawnPoolWorker-19    179 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-14    378 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-14    378 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-14    378 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-14    378 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-14    378 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-14    378 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-14    379 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-14    380 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-14    380 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-14    380 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-14    381 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001A11A2009A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-14    382 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-14    382 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-14    382 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-14    382 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-14    382 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-14    382 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-14    382 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-20    188 DEBUG    Added a None logging handler to logger root at flake8
flake8.bugbear            SpawnPoolWorker-14    397 INFO     Optional warning B909 not present in selected warnings: None. Not firing it at all.
flake8.bugbear            SpawnPoolWorker-14    397 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-14    407 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-14    407 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    407 DEBUG    Logical line: "from typing import Iterator, List, Optional, Set, Tuple"
flake8.checker            SpawnPoolWorker-14    407 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "from .file import UserFile"
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "from .user_file import UserFile as _ConcreteUserFile"
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "except Exception:"
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "_ConcreteUserFile = None"
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "class PotentialMatchGroup:"
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-14    409 DEBUG    Logical line: "def __init__(self, base_name: str, similarity_threshold: float = 0.8, files: Optional[List[UserFile]] = None, ):"
flake8.options.manager    SpawnPoolWorker-15    375 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-14    411 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-14    411 DEBUG    Logical line: "if not base_name or not base_name.strip():"
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-14    411 DEBUG    Logical line: "raise ValueError("xxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-15    377 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-14    411 DEBUG    Logical line: "if not (0.0 <= similarity_threshold <= 1.0):"
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-14    412 DEBUG    Logical line: "raise ValueError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-14    412 DEBUG    Logical line: "self._base_name = base_name.strip()"
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-14    412 DEBUG    Logical line: "self._similarity_threshold = similarity_threshold"
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-14    412 DEBUG    Logical line: "self._files = set()"
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-15    378 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-14    413 DEBUG    Logical line: "self._similarity_scores = {}"
flake8.options.manager    SpawnPoolWorker-15    379 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-15    379 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-14    413 DEBUG    Logical line: "if files:"
flake8.options.manager    SpawnPoolWorker-15    379 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000021DE51509A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-15    379 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-15    379 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-15    379 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-14    413 DEBUG    Logical line: "for file in files:"
flake8.checker            SpawnPoolWorker-14    413 DEBUG    Logical line: "self.add_file(file)"
flake8.options.config     SpawnPoolWorker-15    379 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-14    413 DEBUG    Logical line: "@property"
flake8.options.config     SpawnPoolWorker-15    379 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-15    379 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-15    380 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: "def base_name(self) -> str:"
flake8.options.aggregator SpawnPoolWorker-15    380 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-15    380 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: "return self._base_name"
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: "def similarity_threshold(self) -> float:"
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: "return self._similarity_threshold"
flake8.checker            SpawnPoolWorker-14    414 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "def files(self) -> List[UserFile]:"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "return sorted(self._files, key=lambda f: self._similarity_scores.get(f, 0.0), reverse=True, )"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "def file_count(self) -> int:"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "return len(self._files)"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    415 DEBUG    Logical line: "def is_empty(self) -> bool:"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "return len(self._files) == 0"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "def is_potential_match_group(self) -> bool:"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "return len(self._files) >= 2"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "def extensions(self) -> Set[str]:"
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    417 DEBUG    Logical line: "return {file.extension for file in self._files}"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "def has_multiple_extensions(self) -> bool:"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "return len(self.extensions) > 1"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "def total_size(self) -> int:"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "return sum(file.size for file in self._files)"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    419 DEBUG    Logical line: "def average_similarity(self) -> float:"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "if not self._files:"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "return 0.0"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "return sum(self._similarity_scores.values()) / len(self._files)"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "def similarity_score(self) -> float:"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "return self.average_similarity"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: "def paths(self) -> List[Path]:"
flake8.checker            SpawnPoolWorker-14    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    423 DEBUG    Logical line: "return [file.path for file in self.files]"
flake8.checker            SpawnPoolWorker-14    423 DEBUG    Logical line: "def add_file(self, file: UserFile, similarity_score: Optional[float] = None) -> None:"
flake8.checker            SpawnPoolWorker-14    423 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-14    423 DEBUG    Logical line: "if not (isinstance(file, UserFile) or (_ConcreteUserFile is not None and isinstance(file, _ConcreteUserFile))):"
flake8.checker            SpawnPoolWorker-14    431 DEBUG    Logical line: "raise TypeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-14    431 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-14    431 DEBUG    Logical line: "if similarity_score is None:"
flake8.checker            SpawnPoolWorker-14    432 DEBUG    Logical line: "similarity_score = self._compute_similarity(file)"
flake8.checker            SpawnPoolWorker-14    432 DEBUG    Logical line: "if similarity_score < self._similarity_threshold:"
flake8.checker            SpawnPoolWorker-14    432 DEBUG    Logical line: "raise ValueError(f"Similarity score {similarity_score:.3f} is below threshold " f"{self._similarity_threshold:.3f} for file: {file.path}")"
flake8.checker            SpawnPoolWorker-14    432 DEBUG    Logical line: "self._files.add(file)"
flake8.checker            SpawnPoolWorker-14    432 DEBUG    Logical line: "self._similarity_scores[file] = similarity_score"
flake8.checker            SpawnPoolWorker-14    432 DEBUG    Logical line: "def remove_file(self, file: UserFile) -> bool:"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "self._files.remove(file)"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "del self._similarity_scores[file]"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "except KeyError:"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: "def remove_file_by_path(self, path: Path) -> bool:"
flake8.checker            SpawnPoolWorker-14    434 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    436 DEBUG    Logical line: "path = Path(path).resolve()"
flake8.checker            SpawnPoolWorker-14    436 DEBUG    Logical line: "for file in self._files:"
flake8.checker            SpawnPoolWorker-14    436 DEBUG    Logical line: "if file.path == path:"
flake8.checker            SpawnPoolWorker-14    436 DEBUG    Logical line: "self._files.remove(file)"
flake8.checker            SpawnPoolWorker-15    403 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-15    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-15    404 DEBUG    Logical line: "from datetime import datetime, timedelta"
flake8.checker            SpawnPoolWorker-14    437 DEBUG    Logical line: "del self._similarity_scores[file]"
flake8.checker            SpawnPoolWorker-15    404 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-14    437 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-15    404 DEBUG    Logical line: "from typing import Any, Dict, List, Optional, Set"
flake8.checker            SpawnPoolWorker-14    438 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-15    405 DEBUG    Logical line: "class ScanMetadata:"
flake8.checker            SpawnPoolWorker-15    405 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-14    438 DEBUG    Logical line: "def contains_file(self, file: UserFile) -> bool:"
flake8.checker            SpawnPoolWorker-15    405 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-15    405 DEBUG    Logical line: "scan_paths: List[Path]"
flake8.checker            SpawnPoolWorker-14    438 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-15    405 DEBUG    Logical line: "recursive: bool"
flake8.checker            SpawnPoolWorker-14    438 DEBUG    Logical line: "return file in self._files"
flake8.checker            SpawnPoolWorker-15    406 DEBUG    Logical line: "start_time: Optional[datetime]"
flake8.checker            SpawnPoolWorker-14    439 DEBUG    Logical line: "def contains_path(self, path: Path) -> bool:"
flake8.checker            SpawnPoolWorker-15    406 DEBUG    Logical line: "end_time: Optional[datetime]"
flake8.checker            SpawnPoolWorker-15    406 DEBUG    Logical line: "total_files_found: int"
flake8.checker            SpawnPoolWorker-14    439 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-15    406 DEBUG    Logical line: "total_files_processed: int"
flake8.checker            SpawnPoolWorker-14    439 DEBUG    Logical line: "path = Path(path).resolve()"
flake8.checker            SpawnPoolWorker-15    406 DEBUG    Logical line: "total_files_skipped: int"
flake8.checker            SpawnPoolWorker-15    406 DEBUG    Logical line: "total_files_error: int"
flake8.checker            SpawnPoolWorker-14    439 DEBUG    Logical line: "return any(file.path == path for file in self._files)"
flake8.checker            SpawnPoolWorker-15    407 DEBUG    Logical line: "total_size_scanned: int"
flake8.checker            SpawnPoolWorker-14    440 DEBUG    Logical line: "def get_file_by_path(self, path: Path) -> Optional[UserFile]:"
flake8.checker            SpawnPoolWorker-15    407 DEBUG    Logical line: "total_size_duplicates: int"
flake8.checker            SpawnPoolWorker-15    407 DEBUG    Logical line: "total_size_wasted: int"
flake8.checker            SpawnPoolWorker-14    440 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-15    407 DEBUG    Logical line: "files_hashed: int"
flake8.checker            SpawnPoolWorker-15    407 DEBUG    Logical line: "hash_computation_time: timedelta"
flake8.checker            SpawnPoolWorker-14    440 DEBUG    Logical line: "path = Path(path).resolve()"
flake8.checker            SpawnPoolWorker-15    407 DEBUG    Logical line: "errors: List[Dict[str, str]]"
flake8.checker            SpawnPoolWorker-14    440 DEBUG    Logical line: "for file in self._files:"
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "skipped_files: List[Dict[str, str]]"
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "directories_scanned: int"
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "duplicate_groups_found: int"
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "potential_match_groups_found: int"
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "supported_extensions: Set[str]"
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "similarity_threshold: float"
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "hash_algorithm: str"
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-14    441 DEBUG    Logical line: "if file.path == path:"
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: "def __init__(self, scan_paths: List[Path], recursive: bool = True):"
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-14    441 DEBUG    Logical line: "return file"
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-15    408 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-16    380 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-14    441 DEBUG    Logical line: "return None"
flake8.checker            SpawnPoolWorker-15    410 DEBUG    Logical line: "self.scan_paths = [Path(p).resolve() for p in scan_paths]"
flake8.options.manager    SpawnPoolWorker-16    382 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-15    411 DEBUG    Logical line: "self.recursive = recursive"
flake8.checker            SpawnPoolWorker-14    444 DEBUG    Logical line: "def get_similarity_score(self, file: UserFile) -> Optional[float]:"
flake8.options.manager    SpawnPoolWorker-16    383 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-15    411 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-14    444 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-16    385 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-15    413 DEBUG    Logical line: "self.start_time: Optional[datetime] = None"
flake8.checker            SpawnPoolWorker-14    446 DEBUG    Logical line: "return self._similarity_scores.get(file)"
flake8.options.manager    SpawnPoolWorker-16    385 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-16    386 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-16    386 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-15    414 DEBUG    Logical line: "self.end_time: Optional[datetime] = None"
flake8.checker            SpawnPoolWorker-14    447 DEBUG    Logical line: "def get_files_by_extension(self, extension: str) -> List[UserFile]:"
flake8.options.manager    SpawnPoolWorker-16    392 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-15    419 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-16    392 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-14    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-16    392 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-15    419 DEBUG    Logical line: "self.total_files_found = 0"
flake8.checker            SpawnPoolWorker-14    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.options.manager    SpawnPoolWorker-16    392 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_sflake8.checker            SpawnPoolWorker-15    419 flake8.checker            flake8.checker            SpawnPoolWorker-14    453 DEBUG    Logical line: ""flake8.options.manager    SpawnPoolWorker-16    392 DEBUG    Registered option "Option(--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-16    394 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-15    421 DEBUG    Logical line: "self.total_files_processed = 0"
comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-15    423 DEBUG    Logical line: "self.total_files_skipped = 0"
flake8.checker            SpawnPoolWorker-14    457 DEBUG    Logical line: "extension = extension.lower()"
flake8.options.manager    SpawnPoolWorker-16    411 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-15    438 DEBUG    Logical line: "self.total_files_error = 0"
flake8.checker            SpawnPoolWorker-14    471 DEBUG    Logical line: "return [file for file in self._files if file.extension == extension]"
flake8.options.manager    SpawnPoolWorker-16    411 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-16    411 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-15    438 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-14    471 DEBUG    Logical line: "def get_best_match(self) -> Optional[UserFile]:"
flake8.options.manager    SpawnPoolWorker-16    414 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-15    442 DEBUG    Logical line: "self.total_size_scanned = 0"
flake8.options.manager    SpawnPoolWorker-16    414 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-14    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-16    414 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-15    442 DEBUG    Logical line: "self.total_size_duplicates = 0"
flake8.checker            SpawnPoolWorker-14    475 DEBUG    Logical line: "if not self._files:"
flake8.options.manager    SpawnPoolWorker-17    384 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-16    417 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-17    386 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-17    386 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorker-14    478 DEBUG    Logical line: "return None"
flake8.checker            SpawnPoolWorker-15    445 DEBUG    Logical line: "self.total_size_wasted = 0"
flake8.options.manager    SpawnPoolWorker-16    417 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-16    417 DEBUG    Registered option "Option(--benchmark, flake8.checker            SpawnPoolWorker-15    445 flake8.checker            SpawnPoolWorker-14 flake8.options.manager    SpawnPoolWorker-17    386 DEBflake8.options.manager    Sflake8.checker        flake8.checker            flake8.options.manager    SpawnPoolWorker-16    41pawnPoolWorker-17    386 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
    SpawnPoolWorker-14    478 DEBUG    Logical line: "return None"
SpawnPoolWorker-15    445 DEBUG    Logical line: "self.total_size_wasted = 0"
pawnPoolWorker-17    386 DEBUG    Registered option "Option(--color, default='auto', choices=('a7 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
    SpawnPoolWorker-14    478 DEBUSpawnPoolWorker-15    445 DEBUG    Logiuto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
G    Logical line: "return None"
cal line: "self.total_size_wasted = 0"
flake8.options.manager    SpawnPoolWorker-17    401 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-16    432 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-16    432 DEBUG    Registered option "Option(--bug-rflake8.checker            SpawnPoolWorker-15    460 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-14    493 DEBUG    Logical line: "return max(self._files, key=lambda f: self._similarity_scores[f])"
flake8.options.manager    SpawnPoolWorker-17    401 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001FB7BAB09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-17    401 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.checker            SpawnPoolWorker-14    493 DEBUG    Logical linflake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-16    435 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
h ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-17    401 DEBUG    Registered option "Option(--exclude, deflake8.checker            SpawnPoolWflake8.checker     h ['B901', 'B902', 'B903', 'B904', 'B905', 'B9flake8.options.manager    SpawnPoolWorker-17    40flake8.checker    flake8.options.manager   h ['B901', 'B902', 'B90flake8.checker            SpawnPoolWorker-15    463 DEBUG    Logical line: "self.files_hashed = 0"
h ['B901', flake8.checker            SpawnPoolWorker-15    46flake8.checker            SpawnPoolWorker-14    496 DEBUG    Logical line: "def get_files_with_scores(self) -> List[Tuple[UserFile, float]]:"
flake8.options.manager    SpawnPoolWorker-17    404 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001FB7BAB09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
arated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
orker-14    496 DEBUG    Logical line: "def get_files_with_scores(self) -> List[Tuple[UserFile, float]]:"
       SpawnPoolWorker-15    463 DEBUG    Logical line: "self.files_hashed = 0"
orker-14    496 DEBUG    Logical line: "def get_filesarated_list=True, normalize_paths=True), help='Comma-separated list of files 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-18    380 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-18    380 DEBUG    Registered option "Option(-q, --quiet, or directories to add to the list of excluded ones.', metavar='patterns')".
_with_scores(self) -> List[Tuple[UserFile, float]]:"
flake8.options.manager    SpawnPoolWorker-18    38flake8.options.manager    SpawnPoolWorker-16    441 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-15    469 DEBUG    Logical line: "self.hash_computation_time = timedelta()"
0 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-16    442 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000019D912F09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-15    469 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-17    410 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001FB7BAB09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-18    385 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-14    503 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-18    385 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorker-14    503 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-17    410 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001FB7BAB09Aflake8.options.manager    SpawnPoolWorker-16    443 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-16    443flake8.options.manager    SpawnPoolWorker-17    410 DEBUG    Registered option "Option(--fileflake8.checker            SpawnPoolWorker-14    503 DEBUG    Lflake8.options.manager    SpawnPoolWorker-18    385 DEBflake8.checker            Spawnflake8.options.manager   flake8.checker            SpawnPoolWorker-15    471 DEBUG    Logical line: "self.errors: List[Dict[str, str]] = []"
flake8.options.manager    SpawnPoolWorker-17    412 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-18    386 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
true', help='Print total number of errors to standard output after all other output.')".
ogical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
ogical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxtrue', help='Print total number of errors to  DEBUG    Extending default select list with ['B']
er-15    471 DEBUG    Logical line: "self.errors: List[Dict[str, str]] = []"
n-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
lt select list with ['B']
lt select lisxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxn-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
--- Logging error ---
er-15    471 DEBUG    Logical line: "self.errors: List[Dict[str, str]] = []"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-18    391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000020B09D709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8                    SpawnPoolWorker-21    200 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-18    391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-21    200 DEBUG xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000020B09D709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8                    Spa   391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0flake8           391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pyflake8    391 DEBUG    Registered option "Option(--fla   391 DEBUG    Registf   391 DEBUflake8                    SpawnPoolWorker-21    200 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
   39flake8                    SpawnPoolWorker-21    200 DEBUG    Added a   flake8                    SpawnPoo flake8           flake8  flakfl   391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000020B09D709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
   391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000020B09D70   391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache_   Added a None logging handler to logger root at flake8
--- Logging error ---
   391 DEBUG    Registered option "Option(--exc   Added a None logging handler to loggeflake8                    SpawnPoolWorker-22    190 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-22    190 DEBUG flake8                    Spaflake8        flake8 fla   391 DEBUG    Registe   391 DEBU Added a None logging handler to logger root at flake8
--- Logging error ---
flake8                    SpawnPoolWorker-22    190 DEBUG    Added a None logging handler to logger root at flake8
lake8                    SpawnPoolWorker-22    190 DEBUG lake8                    SpawnPoolWorker-22    190 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-23    189 DEBUG    Added a None logging handler to logger root at flake8
Traceback (most recent call last):
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
BlockingIOError: [Errno 11] write could not complete without blocking
Call stack:
flake8                    SpawnPoolWorker-24    191 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-20    385 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-20    385 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-20    385 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-20    385 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-20    386 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-20    387 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-20    389 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-20    389 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001BA6A9309A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-20    389 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-20    389 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-20    389 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-20    389 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-20    389 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-20    389 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-20    389 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-20    389 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-20    389 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 27, in parse_args
    flake8.configure_logging(args0.verbose, args0.output_file)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\__init__.py", line 68, in configure_logging
    LOG.debug(
Message: 'Added a %s logging handler to logger root at %s'
Arguments: (None, 'flake8')
flake8                    SpawnPoolWorker-25    175 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-19    415 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-19    415 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-19    417 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001D5D3A209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-19    419 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-20    411 DEBUG    Logical line: ""
flake8.options.config     SpawnPoolWorker-19    421 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.config     SpawnPoolWorker-19    421 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-19    421 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-19    421 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-19    421 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "from pathlib import Path"
flake8.options.aggregator SpawnPoolWorker-19    421 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "from typing import Dict, List, Optional, Set, Union"
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "from .duplicate_group import DuplicateGroup"
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "from .potential_match_group import PotentialMatchGroup"
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "from .scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "from .file import UserFile"
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "class ScanResult:"
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    413 DEBUG    Logical line: "def __init__(self, metadata: ScanMetadata | None = None):"
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: "if metadata is None:"
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: "metadata = ScanMetadata([])"
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: "self.metadata = metadata"
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: "self.duplicate_groups: List[DuplicateGroup] = []"
flake8.checker            SpawnPoolWorker-20    415 DEBUG    Logical line: "self.potential_match_groups: List[PotentialMatchGroup] = []"
flake8.checker            SpawnPoolWorker-20    416 DEBUG    Logical line: "self._all_files = None"
flake8.checker            SpawnPoolWorker-20    416 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    417 DEBUG    Logical line: "def has_duplicates(self) -> bool:"
flake8.checker            SpawnPoolWorker-20    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    417 DEBUG    Logical line: "return len(self.duplicate_groups) > 0"
flake8.checker            SpawnPoolWorker-20    417 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    417 DEBUG    Logical line: "def has_potential_matches(self) -> bool:"
flake8.checker            SpawnPoolWorker-20    418 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    418 DEBUG    Logical line: "return len(self.potential_match_groups) > 0"
flake8.checker            SpawnPoolWorker-20    418 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    418 DEBUG    Logical line: "def duplicate_count(self) -> int:"
flake8.checker            SpawnPoolWorker-20    418 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    418 DEBUG    Logical line: "return len(self.duplicate_groups)"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "def potential_match_count(self) -> int:"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "return len(self.potential_match_groups)"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "def total_duplicate_files(self) -> int:"
flake8.bugbear            SpawnPoolWorker-19    427 INFO     Optional warning B904 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "return sum(group.file_count for group in self.duplicate_groups)"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "def total_potential_match_files(self) -> int:"
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    419 DEBUG    Logical line: "return sum(group.file_count for group in self.potential_match_groups)"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "def total_wasted_space(self) -> int:"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "return sum(group.wasted_space for group in self.duplicate_groups)"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "def total_duplicate_space(self) -> int:"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "return sum(group.total_size for group in self.duplicate_groups)"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    421 DEBUG    Logical line: "def all_files(self) -> Set[UserFile]:"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "if self._all_files is None:"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "self._all_files = set()"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "for group in self.duplicate_groups:"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "self._all_files.update(group.files)"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "for group in self.potential_match_groups:"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "self._all_files.update(group.files)"
flake8.checker            SpawnPoolWorker-20    423 DEBUG    Logical line: "return self._all_files"
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "@property"
flake8.bugbear            SpawnPoolWorker-19    433 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "def unique_files_count(self) -> int:"
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "return len(self.all_files)"
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "def add_duplicate_group(self, group: DuplicateGroup) -> None:"
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "if not isinstance(group, DuplicateGroup):"
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "raise TypeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-20    425 DEBUG    Logical line: "if not group.is_duplicate_group:"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: "raise ValueError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: "self.duplicate_groups.append(group)"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: "self.metadata.duplicate_groups_found = len(self.duplicate_groups)"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: "self.metadata.update_duplicate_stats(group.total_size, group.wasted_space)"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: "self._all_files = None"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: "def add_potential_match_group(self, group: PotentialMatchGroup) -> None:"
flake8.checker            SpawnPoolWorker-20    427 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    429 DEBUG    Logical line: "if not isinstance(group, PotentialMatchGroup):"
flake8.checker            SpawnPoolWorker-20    429 DEBUG    Logical line: "raise TypeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-20    429 DEBUG    Logical line: "if not group.is_potential_match_group:"
flake8.checker            SpawnPoolWorker-20    429 DEBUG    Logical line: "raise ValueError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-20    429 DEBUG    Logical line: "self.potential_match_groups.append(group)"
flake8.checker            SpawnPoolWorker-19    437 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    430 DEBUG    Logical line: "self.metadata.potential_match_groups_found = len(self.potential_match_groups)"
flake8.checker            SpawnPoolWorker-20    430 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    438 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-20    431 DEBUG    Logical line: "self._all_files = None"
flake8.checker            SpawnPoolWorker-19    439 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-20    431 DEBUG    Logical line: "def remove_duplicate_group(self, group: DuplicateGroup) -> bool:"
flake8.checker            SpawnPoolWorker-19    439 DEBUG    Logical line: "from datetime import datetime"
flake8.checker            SpawnPoolWorker-19    439 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-20    431 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    439 DEBUG    Logical line: "class UserFile:"
flake8.checker            SpawnPoolWorker-20    431 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-19    439 DEBUG    Logical line: "def __init__(self, path: Path):"
flake8.checker            SpawnPoolWorker-20    432 DEBUG    Logical line: "self.duplicate_groups.remove(group)"
flake8.checker            SpawnPoolWorker-19    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    432 DEBUG    Logical line: "self.metadata.duplicate_groups_found = len(self.duplicate_groups)"
flake8.checker            SpawnPoolWorker-19    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    432 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    432 DEBUG    Logical line: "self.metadata.update_duplicate_stats(-group.total_size, -group.wasted_space)"
flake8.checker            SpawnPoolWorker-19    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    432 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    440 DEBUG    Logical line: "if hasattr(path, "xxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-20    433 DEBUG    Logical line: "self._all_files = None"
flake8.checker            SpawnPoolWorker-19    441 DEBUG    Logical line: "resolved = path"
flake8.checker            SpawnPoolWorker-20    433 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-19    441 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-20    433 DEBUG    Logical line: "except ValueError:"
flake8.checker            SpawnPoolWorker-19    441 DEBUG    Logical line: "path_obj = Path(path)"
flake8.checker            SpawnPoolWorker-20    433 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-19    441 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-20    433 DEBUG    Logical line: "def remove_potential_match_group(self, group: PotentialMatchGroup) -> bool:"
flake8.checker            SpawnPoolWorker-19    441 DEBUG    Logical line: "resolved = path_obj.resolve()"
flake8.checker            SpawnPoolWorker-19    441 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: "resolved = path_obj"
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: "self.potential_match_groups.remove(group)"
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: "self._path = resolved"
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: "self._size = None"
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: "self.metadata.potential_match_groups_found = len(self.potential_match_groups)"
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: "self._last_modified = None"
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: "self._hash = None"
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: "self._all_files = None"
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    442 DEBUG    Logical line: "self.cloud_status = CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-20    434 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-19    443 DEBUG    Logical line: "self.is_cloud_only = False"
flake8.checker            SpawnPoolWorker-20    435 DEBUG    Logical line: "except ValueError:"
flake8.checker            SpawnPoolWorker-19    443 DEBUG    Logical line: "self.is_local = True"
flake8.checker            SpawnPoolWorker-19    443 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    435 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-19    443 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-19    443 DEBUG    Logical line: "self.extension = resolved.suffix.lower()"
flake8.checker            SpawnPoolWorker-19    443 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-20    435 DEBUG    Logical line: "def get_duplicate_groups_by_size(self, min_size: Optional[int] = None, max_size: Optional[int] = None) -> List[DuplicateGroup]:"
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: "self.extension = """
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: "self.path = self._path"
flake8.checker            SpawnPoolWorker-20    436 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: "def hash(self):"
flake8.checker            SpawnPoolWorker-20    436 DEBUG    Logical line: "filtered_groups = []"
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    436 DEBUG    Logical line: "for group in self.duplicate_groups:"
flake8.checker            SpawnPoolWorker-19    444 DEBUG    Logical line: "return self._hash"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    445 DEBUG    Logical line: "def compute_hash(self) -> str:"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "if group.files:"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "file_size = group.files[0].size"
flake8.checker            SpawnPoolWorker-19    445 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "if min_size is not None and file_size < min_size:"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "if self._hash is not None:"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "continue"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "return self._hash"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "if max_size is not None and file_size > max_size:"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "hasher = hashlib.blake2b()"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "continue"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "filtered_groups.append(group)"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "with open(self._path, "xx") as f:"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "return filtered_groups"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "chunk_size = 65536"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: "def get_duplicate_groups_by_extension(self, extension: str) -> List[DuplicateGroup]:"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "while chunk := f.read(chunk_size):"
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "hasher.update(chunk)"
flake8.checker            SpawnPoolWorker-20    438 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    446 DEBUG    Logical line: "except PermissionError:"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "extension = extension.lower()"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "raise PermissionError(f"Permission denied reading file: {self._path}")"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "filtered_groups = []"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "except OSError as e:"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "for group in self.duplicate_groups:"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "raise OSError(f"Error reading file {self._path}: {e}")"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "if any(file.extension == extension for file in group.files):"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "self._hash = hasher.hexdigest()"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "filtered_groups.append(group)"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "return self._hash"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "return filtered_groups"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "def is_accessible(self) -> bool:"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: "def get_potential_matches_by_extension(self, extension: str) -> List[PotentialMatchGroup]:"
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-20    440 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    448 DEBUG    Logical line: "if hasattr(self._path, "xxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "extension = extension.lower()"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "filtered_groups = []"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "with open(self._path, "xx") as f:"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "for group in self.potential_match_groups:"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "f.read(1)"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "if extension in group.extensions:"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "except (PermissionError, OSError):"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "filtered_groups.append(group)"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "return filtered_groups"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "def get_filename_without_extension(self) -> str:"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "def get_files_by_path_prefix(self, path_prefix: Union[str, Path]) -> Set[UserFile]:"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "return self._path.stem"
flake8.checker            SpawnPoolWorker-20    442 DEBUG    Logical line: "path_prefix = str(Path(path_prefix).resolve())"
flake8.checker            SpawnPoolWorker-19    450 DEBUG    Logical line: "def refresh_metadata(self) -> None:"
flake8.checker            SpawnPoolWorker-20    444 DEBUG    Logical line: "matching_files = set()"
flake8.checker            SpawnPoolWorker-19    452 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    444 DEBUG    Logical line: "for file in self.all_files:"
flake8.checker            SpawnPoolWorker-19    452 DEBUG    Logical line: "self._size = None"
flake8.checker            SpawnPoolWorker-20    444 DEBUG    Logical line: "if str(file.path).startswith(path_prefix):"
flake8.checker            SpawnPoolWorker-19    452 DEBUG    Logical line: "self._last_modified = None"
flake8.checker            SpawnPoolWorker-20    445 DEBUG    Logical line: "matching_files.add(file)"
flake8.checker            SpawnPoolWorker-19    453 DEBUG    Logical line: "def __str__(self) -> str:"
flake8.checker            SpawnPoolWorker-20    445 DEBUG    Logical line: "return matching_files"
flake8.checker            SpawnPoolWorker-19    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    445 DEBUG    Logical line: "def find_file_by_path(self, path: Union[str, Path]) -> Optional[UserFile]:"
flake8.checker            SpawnPoolWorker-19    453 DEBUG    Logical line: "return str(self._path)"
flake8.checker            SpawnPoolWorker-19    453 DEBUG    Logical line: "def __repr__(self) -> str:"
flake8.checker            SpawnPoolWorker-20    445 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    445 DEBUG    Logical line: "target_path = Path(path).resolve()"
flake8.checker            SpawnPoolWorker-19    453 DEBUG    Logical line: "return f"UserFile(path={self._path!r}, size={self.size}, extension='{self.extension}', cloud_status={self.cloud_status})""
flake8.checker            SpawnPoolWorker-20    446 DEBUG    Logical line: "for file in self.all_files:"
flake8.checker            SpawnPoolWorker-20    446 DEBUG    Logical line: "if file.path == target_path:"
flake8.checker            SpawnPoolWorker-19    454 DEBUG    Logical line: "def __eq__(self, other) -> bool:"
flake8.checker            SpawnPoolWorker-20    446 DEBUG    Logical line: "return file"
flake8                    SpawnPoolWorker-26    187 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-20    446 DEBUG    Logical line: "return None"
flake8.checker            SpawnPoolWorker-19    454 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    446 DEBUG    Logical line: "def get_summary(self) -> Dict[str, any]:"
flake8.checker            SpawnPoolWorker-19    454 DEBUG    Logical line: "if not isinstance(other, UserFile):"
flake8.checker            SpawnPoolWorker-19    455 DEBUG    Logical line: "return NotImplemented"
flake8.checker            SpawnPoolWorker-20    447 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    455 DEBUG    Logical line: "return self._path == other._path"
flake8.checker            SpawnPoolWorker-19    455 DEBUG    Logical line: "def __hash__(self) -> int:"
flake8.checker            SpawnPoolWorker-19    455 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    455 DEBUG    Logical line: "return hash(self._path)"
flake8.checker            SpawnPoolWorker-20    448 DEBUG    Logical line: "summary = {"xxxxxxxxxxxxxx": self.metadata.is_completed, "xxxxxxxxxxxxxxxxxxxxx": self.metadata.duration_seconds, "xxxxxxxxxxxxxxxxxxx": self.metadata.total_files_processed, "xxxxxxxxxxxxxxxxxx": self.unique_files_count, "xxxxxxxxxxxxxxxxxxxxxx": self.duplicate_count, "xxxxxxxxxxxxxxxxxxxxxxxxxxxx": self.potential_match_count, "xxxxxxxxxxxxxxxxxxx": getattr(self.metadata, "xxxxxxxxxxxxxxxxxxx", 0), "xxxxxxxxxxxxxxxxxx": len(getattr(self.metadata, "xxxxxxxxxxxxx", [])), "xxxxxxxxxxxxxxxxxxxxx": self.total_duplicate_files, "xxxxxxxxxxxxxxxxxxxxxxxxxxx": self.total_potential_match_files, "xxxxxxxxxxxxxxxxxxxxxxxx": self.total_wasted_space, "xxxxxxxxxxxxxxxxxxxxx": round(self.total_wasted_space / (1024 * 1024), 2), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx": round(self.metadata.space_savings_potential, 1), }"
flake8.checker            SpawnPoolWorker-19    456 DEBUG    Logical line: "def __lt__(self, other) -> bool:"
flake8.checker            SpawnPoolWorker-19    456 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    456 DEBUG    Logical line: "if not isinstance(other, UserFile):"
flake8.checker            SpawnPoolWorker-19    456 DEBUG    Logical line: "return NotImplemented"
flake8.checker            SpawnPoolWorker-19    456 DEBUG    Logical line: "return str(self._path) < str(other._path)"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-20    449 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "def size(self):"
flake8.checker            SpawnPoolWorker-20    449 DEBUG    Logical line: "summary.update(self.metadata.get_summary_stats())"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "if self._size is None:"
flake8.checker            SpawnPoolWorker-20    449 DEBUG    Logical line: "return summary"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    449 DEBUG    Logical line: "def sort_duplicate_groups_by_size(self, reverse: bool = True) -> None:"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "self._size = int(self._path.stat().st_size)"
flake8.checker            SpawnPoolWorker-20    449 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    449 DEBUG    Logical line: "self.duplicate_groups.sort(key=lambda group: group.files[0].size if group.files else 0, reverse=reverse, )"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "raise"
flake8.checker            SpawnPoolWorker-19    457 DEBUG    Logical line: "return self._size"
flake8.checker            SpawnPoolWorker-20    451 DEBUG    Logical line: "def sort_duplicate_groups_by_count(self, reverse: bool = True) -> None:"
flake8.checker            SpawnPoolWorker-19    459 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-19    459 DEBUG    Logical line: "def last_modified(self):"
flake8.checker            SpawnPoolWorker-20    451 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    459 DEBUG    Logical line: "if self._last_modified is None:"
flake8.checker            SpawnPoolWorker-20    451 DEBUG    Logical line: "self.duplicate_groups.sort(key=lambda group: group.file_count, reverse=reverse)"
flake8.checker            SpawnPoolWorker-19    459 DEBUG    Logical line: "self._last_modified = datetime.fromtimestamp(self._path.stat().st_mtime)"
flake8.checker            SpawnPoolWorker-19    460 DEBUG    Logical line: "return self._last_modified"
flake8.checker            SpawnPoolWorker-19    460 DEBUG    Logical line: "def to_dict(self) -> dict:"
flake8.checker            SpawnPoolWorker-20    452 DEBUG    Logical line: "def sort_duplicate_groups_by_wasted_space(self, reverse: bool = True) -> None:"
flake8.checker            SpawnPoolWorker-19    460 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    453 DEBUG    Logical line: "self.duplicate_groups.sort(key=lambda group: group.wasted_space, reverse=reverse)"
flake8.checker            SpawnPoolWorker-19    461 DEBUG    Logical line: "return {"xxxx": str(self._path), "xxxx": self.size, "xxxxxxxxx": self.extension, "xxxxxxxxxxxxx": self.last_modified.isoformat() + "x", "xxxx": self._hash, "xxxxxxxxxxxx": self.cloud_status.value, "xxxxxxxxxxxxx": self.is_cloud_only, "xxxxxxxx": self.is_local, }"
flake8.checker            SpawnPoolWorker-20    453 DEBUG    Logical line: "def sort_potential_matches_by_similarity(self, reverse: bool = True) -> None:"
flake8.checker            SpawnPoolWorker-20    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    461 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    461 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    453 DEBUG    Logical line: "self.potential_match_groups.sort(key=lambda group: group.average_similarity, reverse=reverse)"
flake8.checker            SpawnPoolWorker-19    461 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-19    461 DEBUG    Logical line: "VideoFile = UserFile"
flake8.checker            SpawnPoolWorker-20    455 DEBUG    Logical line: "def __str__(self) -> str:"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-20    455 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    455 DEBUG    Logical line: "return (f"ScanResult(duplicates={self.duplicate_count}, " f"potential_matches={self.potential_match_count}, " f"files={self.unique_files_count})")"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "import builtins"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "builtins.UserFile = UserFile"
flake8.checker            SpawnPoolWorker-20    455 DEBUG    Logical line: "def __repr__(self) -> str:"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "builtins.VideoFile = UserFile"
flake8.checker            SpawnPoolWorker-20    455 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    463 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-20    455 DEBUG    Logical line: "return (f"ScanResult(duplicate_groups={self.duplicate_count}, " f"potential_match_groups={self.potential_match_count}, " f"total_files={self.unique_files_count}, " f"wasted_space={self.total_wasted_space})")"
flake8.checker            SpawnPoolWorker-20    457 DEBUG    Logical line: "def to_dict(self) -> dict:"
flake8.checker            SpawnPoolWorker-20    457 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    465 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    467 DEBUG    Logical line: "from .file import UserFile"
flake8.checker            SpawnPoolWorker-19    467 DEBUG    Logical line: "from .duplicate_group import DuplicateGroup"
flake8.checker            SpawnPoolWorker-20    459 DEBUG    Logical line: "return {"xxxxxxxx": self.metadata.to_dict(), "xxxxxxx": self.get_summary(), "xxxxxxxxxxxxxxxx": [group.to_dict() for group in self.duplicate_groups], "xxxxxxxxxxxxxxxxxxxxxx": [group.to_dict() for group in self.potential_match_groups], }"
flake8.checker            SpawnPoolWorker-19    467 DEBUG    Logical line: "from .potential_match_group import PotentialMatchGroup"
flake8.checker            SpawnPoolWorker-19    467 DEBUG    Logical line: "from .scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-19    469 DEBUG    Logical line: "from .scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-19    471 DEBUG    Logical line: "__all__ = ["xxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxx", "xxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-20    467 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    467 DEBUG    Logical line: "import ctypes"
flake8.checker            SpawnPoolWorker-20    467 DEBUG    Logical line: "import platform"
flake8.checker            SpawnPoolWorker-20    468 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-20    468 DEBUG    Logical line: "from typing import Union"
flake8.checker            SpawnPoolWorker-20    468 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-20    468 DEBUG    Logical line: "class CloudFileService:"
flake8.checker            SpawnPoolWorker-20    469 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    469 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    470 DEBUG    Logical line: "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 0x00400000"
flake8.checker            SpawnPoolWorker-20    470 DEBUG    Logical line: "INVALID_FILE_ATTRIBUTES = 0xFFFFFFFF"
flake8                    SpawnPoolWorker-27    186 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-20    478 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-20    478 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    480 DEBUG    Logical line: "self._is_windows = platform.system() == "xxxxxxx""
flake8.checker            SpawnPoolWorker-20    480 DEBUG    Logical line: "self._has_windll = hasattr(ctypes, "xxxxxx")"
flake8.checker            SpawnPoolWorker-20    480 DEBUG    Logical line: "def get_file_status(self, file_path: Union[str, Path]) -> CloudFileStatus:"
flake8.checker            SpawnPoolWorker-20    480 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    482 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-20    484 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    484 DEBUG    Logical line: "path = Path(file_path) if isinstance(file_path, str) else file_path"
flake8.checker            SpawnPoolWorker-20    484 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    484 DEBUG    Logical line: "if not self._is_windows or not self._has_windll:"
flake8.checker            SpawnPoolWorker-20    484 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-20    485 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    485 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    485 DEBUG    Logical line: "attributes = ctypes.windll.kernel32.GetFileAttributesW(str(path))"
flake8.checker            SpawnPoolWorker-20    495 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    495 DEBUG    Logical line: "if attributes == self.INVALID_FILE_ATTRIBUTES:"
flake8.checker            SpawnPoolWorker-20    495 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    495 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-20    497 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    497 DEBUG    Logical line: "if attributes & self.FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS:"
flake8.checker            SpawnPoolWorker-20    497 DEBUG    Logical line: "return CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-20    497 DEBUG    Logical line: "else:"
flake8.bugbear            SpawnPoolWorker-19    505 INFO     Optional warning B907 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-20    497 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-20    499 DEBUG    Logical line: "except (OSError, AttributeError, TypeError):"
flake8.checker            SpawnPoolWorker-20    499 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-20    499 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-20    499 DEBUG    Logical line: "def is_windows_only(self) -> bool:"
flake8.checker            SpawnPoolWorker-20    499 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-28    185 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-20    499 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-20    501 DEBUG    Logical line: "def is_supported(self) -> bool:"
flake8.checker            SpawnPoolWorker-20    508 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    508 DEBUG    Logical line: "return self._is_windows and self._has_windll"
flake8.checker            SpawnPoolWorker-20    508 DEBUG    Logical line: "def get_platform_info(self) -> dict:"
flake8.checker            SpawnPoolWorker-20    508 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-20    509 DEBUG    Logical line: "return {"xxxxxxxx": platform.system(), "xxxxxxxxxx": self._is_windows, "xxxxxxxxxx": self._has_windll, "xxxxxxxxx": self.is_supported(), }"
flake8.checker            SpawnPoolWorker-19    517 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    520 DEBUG    Logical line: "from collections import defaultdict"
flake8.checker            SpawnPoolWorker-19    520 DEBUG    Logical line: "from typing import List"
flake8.checker            SpawnPoolWorker-19    520 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-19    521 DEBUG    Logical line: "from fuzzywuzzy import fuzz"
flake8.checker            SpawnPoolWorker-19    521 DEBUG    Logical line: "import re"
flake8.checker            SpawnPoolWorker-19    521 DEBUG    Logical line: "import time"
flake8.checker            SpawnPoolWorker-19    521 DEBUG    Logical line: "from datetime import timedelta"
flake8.bugbear            SpawnPoolWorker-20    514 INFO     Optional warning B904 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-19    531 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.checker            SpawnPoolWorker-19    531 DEBUG    Logical line: "from ..models.duplicate_group import DuplicateGroup"
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: "from ..models.potential_match_group import PotentialMatchGroup"
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-19    533 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.checker     flake8.checker            SpawnPoolWorker-20    527 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-19    535 DEBUG    Logical line: "MAJORITY_SERIES_THRESHOLD = 0.6"
flake8.checker            SpawnPoolWorker-20    527 DEBUG    Logical line: "import sqlite3"
flake8.checker            SpawnPoolWorker-20    527 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-19    535 DEBUG    Logical line: "class DuplicateDetector:"
flake8.checker            SpawnPoolWorker-20    528 DEBUG    Logical line: "from typing import Optional"
flake8.checker            SpawnPoolWorker-19    536 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-29    186 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-20    528 DEBUG    Logical line: "from src.lib.exceptions import DatabaseCorruptError, DatabaseNotConfiguredError"
flake8                    SpawnPoolWorker-29    186 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-20    528 DEBUG    Logical line: "class FileDatabase:"
flake8.checker            SpawnPoolWorker-19    536 DEBUG    Logical line: "def __init__(self, progress_reporter=None, logger=None):"
flake8.checker            SpawnPoolWorker-19    536 DEBUG    Logicaflake8.checker            SpawnPoolWorker-20    528 DEBUG    Logical line: "def __init__(self, db_path: Optional[Path] = None):"
flake8.options.manager    SpawnPoolWorker-22    401 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
l line: "def __init__(self, progress_reporter=None, logger=None):"
flake8.options.manager    SpawnPoolWorker-22    403 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-22    403 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-19    540 DEBUG    Logical line: "self._injected_reporter = progress_reporter"
flake8.options.manager    SpawnPoolWorker-22    403 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-20    533 DEBUG    Logical line: "self.db_path = Path(db_path) if db_path else None"
flake8.options.manager    SpawnPoolWorker-22    409 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-19    547 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-22    410 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-20    540 DEBUG    Logical line: "self._conn: Optional[sqlite3.Connection] = None"
flake8.checker            SpawnPoolWorker-19    547 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-22    412 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-19    549 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-22    412 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-20    542 DEBUG    Logical line: "def connect(self):"
flake8.checker            SpawnPoolWorker-19    550 DEBUG    Logical line: "if logger is not None:"
flake8.options.manager    SpawnPoolWorker-22    414 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-19    551 DEBUG    Logical line: "self._logger = logger"
flake8.checker            SpawnPoolWorker-20    544 DEBUG    Logical line: "if self.db_path is None:"
flake8.options.manager    SpawnPoolWorker-22    414 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-19    551 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-20    544 DEBUG    Logical line: "raise DatabaseNotConfiguredError("xxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-23    386 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-23    387 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-22    416 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-23    387 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-19    553 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-20    546 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-23    387 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-22    416 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-19    553 DEBUG    Logical line: "from src.lib.container import Container"
flake8.checker            SpawnPoolWorker-20    546 DEBUG    Logical line: "self._conn = sqlite3.connect(str(self.db_path))"
flake8.checker            SpawnPoolWorker-20    546 DEBUG    Loflake8.checker            SpawnPoolWorker-19    553 DEBUG  gical line: "self._conn = sqlite3.connect(str(self.db_path))"
  Logical line: "from src.lib.container import Container"
flake8.options.manager    SpawnPoolWorker-23    388 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-22    418 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-19    555 DEBUG    Logical line: "self._logger = Container().logger()"
flake8.options.manager    SpawnPoolWorker-22    418 DEBUG    Registered option "Option(--max-line-length, default=79, typflake8.options.manager    SpawnPoolWorker-23    388 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.checker            SpawnPoolWorker-19    555 DEBUG    Logical line: "self._logger = Container().logger()"
--- Logging error ---
flake8.checker            SpawnPoolWorker-20    547 DEBUG    Logical line: "self._conn.row_factory = sqlite3.Row"
flake8.options.manager    SpawnPoolWorker-23    388 DEBUG    Registered option "Option(-flake8.options.manager    SpawnPoolWorker-22    418 DEBUG   flake8.options.manager    Spawflake8.checker            SpawnPoolWorker-20    547 DEBUGflake8.checker            Spflake8.options.manager    SpawnPoolWorker-23    390 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
F37E4709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checkerflake8.options.manager    SpawnPoolWorker-22    420 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.flake8.options.manager    SpawnPoolWorker-22    420 DEBUG    Registered option "Option(--max-doc-length, default=None, type=F37E4709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames maflake8.options.manager    SpawnPoolWorker-22    420 DEBUG    RflaF37E4709A0>, comma_separated_list=True, normalizF37E4709A0>, comma_separfflake8.options.manager    SpawnnPoolWorker-22    420 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-23    395 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-20    555 DEBUG    Logical line: "return self._conn"
lake8.checker            SpawnPoolWorker-20    555 DEBUG    Logical line: "return self._conn"
lake8.checker            SpawnPoolWorker-20    -doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
  SpawnPoolWorker-23    395 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
555 DEBUG    Logical line: "return self._conn"
flake8.options.manager    SpawnPoolWorker-22    427 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-20    556 DEBUG    Logical line: "except sqlite3.DatabaseError as e:"
flake8.options.manager    SpawnPoolWorker-23    397 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-22    427 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-22    428 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001E9EF7809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-23    398 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-20    557 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-22    428 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-23    398 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-23    398 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_separated_list=True, flake8.checker            SpawnPoolWorker-20    557 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-22    429 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-22    429 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-22    430 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-23    400 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-23    400 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001F37E4709A0>, comma_sepflake8.options.manager    SpawnPoolWorker-22    430 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-20    559 DEBUG    Logical line: "raise DatabaseCorruptError(f"Failed to open database: {e}")"
flake8.checker            SpawnPoolWorker-20    559 DEBUG    Logical flake8.options.manager    SpawnPoolWorker-23    400 DEBUG    Registered option "Option(--extenflake8.checker            SpawnPooflake8.options.manager    SpawnPoolWorker-23    400 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker   iolations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.ciolations to ignore in a particular file. The filenames can be specified in a manner similar to the ``-iolations to ignore in a particular file. The filenflake8.checker            SpawnPoolWorker-20    560 DEBUG    Logical line: "def init_schema(self):"
iolations to ignore in a flake8.checker            SpawnPoolWorker-20    56o the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
line: "def init_schema(self):"
o the ``--exclude`` option and the violations work similline: "def init_schema(self):"
--- Logging error ---
line: "def init_schema(selfline: "def ino the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
--- Logging error ---
o the ``--exclude`` option and the violations work similarly to theline: lino the ``--exclude`` option and thflake8                    SpawnPoolWorker-30    188 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-21    478 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-21    478 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-21    478 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-21    478 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-21    479 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-21    480 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-24    399 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-21    482 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-24    401 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-21    482 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-24    401 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-21    482 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-21    482 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-21    488 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-24    407 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001A1F9A909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-21    488 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-21    488 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-21    490 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-24    409 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001A1F9A909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-24    409 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000e treated as classmethods by B902')".
01A1F9A909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-21    491 DEBUG    Extending default select list with ['B']
flake8                    SpawnPoolWorker-31    179 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-24    410 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001A1F9A909A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-21    491 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-21    492 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-24    411 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-21    492 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-24    411 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-21    496 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-24    415 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-21    496 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-24    417 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001A1F9A909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-21    498 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001D294FD09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-21    498 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-24    417 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001A1F9A909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-25    385 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-21    500 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-21    500 DEBUG    Extending default select list with ['W']
flake8.options.manager    SpawnPoolWorker-25    385 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-24    420 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-24    420 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.config     SpawnPoolWorker-21    500 DEBUG    Option "max-line-length" returned value: 242
flake8.options.manager    SpawnPoolWorker-25    385 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-25    385 DEBUG    Registered option "Option(--count, actiflake8.options.manager    SpawnPoolWorker-24    420 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.config     SpawnPoolWorker-21    500 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.manager    SpawnPoolWorker-25    38flake8.options.config     SpawnPoolWorker-21    500 DEBUG    Option "exflake8.options.manager    SpawnPoolWorker-24    420 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
--- Logging error ---
flake8.options.config     SpawnPoolflake8.options.manager    SpawnPoolWorker-25    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.cofault='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
fault='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_sepax,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.config     SpawnPoolWorker-21    501 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.config     SpawnPoolWorker-21    501 DEBUG    Option "extend-ignore" returnx,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_separated_list=True, normalizWorker-21    501 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
DEBUG    Option "extend-ignore" returned value: 'E402, E231, E20x,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
x,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E843EC09A0>, comma_separated_list=True, normalize_paths=Tru3, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-21    504 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-21    504 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-21    504 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-21    509 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-21    509 DEBUG    Logical line: "from typing import Iterable"
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: "DEFAULT_CHUNK_SIZE = 1024 * 1024"
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: "def stream_hash(path: Path, chunk_size: int = DEFAULT_CHUNK_SIZE, algo: str = "xxxxxxx") -> str:"
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: "if algo.lower() == "xxxxxxx":"
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: "hasher = hashlib.blake2b()"
flake8.checker            SpawnPoolWorker-21    511 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "hasher = hashlib.new(algo)"
flake8                    SpawnPoolWorker-32    187 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "with path.open("xx") as fh:"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "while True:"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "chunk = fh.read(chunk_size)"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "if not chunk:"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "break"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "hasher.update(chunk)"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "return hasher.hexdigest()"
flake8.checker            SpawnPoolWorker-21    513 DEBUG    Logical line: "def hash_stream_from_bytes_iter(bytes_iter: Iterable[bytes], algo: str = "xxxxxxx") -> str:"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "if algo.lower() == "xxxxxxx":"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "hasher = hashlib.blake2b()"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "hasher = hashlib.new(algo)"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "for chunk in bytes_iter:"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "hasher.update(chunk)"
flake8.checker            SpawnPoolWorker-21    515 DEBUG    Logical line: "return hasher.hexdigest()"
flake8.bugbear            SpawnPoolWorker-21    532 INFO     Optional warning B904 not present in selected warnings: None. Not firing it at all.
flake8.options.manager    SpawnPoolWorker-26    386 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-26    386 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-26    387 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-26    388 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-26    389 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-26    390 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-26    390 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CD66AB09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-26    390 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-26    390 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-26    390 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-26    390 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-26    390 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-26    390 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-26    390 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-26    390 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-26    391 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-26    396 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    398 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-26    398 DEBUG    Logical line: "from typing import Optional"
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: "from ..models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: "from ..lib.windows_onedrive_api import (detect_cloud_status_safe, is_onedrive_supported, )"
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: "class OneDriveService:"
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: "self._supported = is_onedrive_supported()"
flake8.checker            SpawnPoolWorker-26    399 DEBUG    Logical line: "def is_supported(self) -> bool:"
flake8.checker            SpawnPoolWorker-26    400 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    547 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-26    400 DEBUG    Logical line: "return self._supported"
flake8.checker            SpawnPoolWorker-21    547 DEBUG    Logical line: "from typing import List, Optional, Iterator"
flake8.checker            SpawnPoolWorker-26    400 DEBUG    Logical line: "def detect_cloud_status(self, file_path: Path) -> CloudFileStatus:"
flake8.checker            SpawnPoolWorker-21    547 DEBUG    Logical line: "import fnmatch"
flake8.checker            SpawnPoolWorker-21    547 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-26    400 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    548 DEBUG    Logical line: "from src.services.file_database import get_database"
flake8.checker            SpawnPoolWorker-26    401 DEBUG    Logical line: "if not self._supported:"
flake8.checker            SpawnPoolWorker-26    401 DEBUG    Logical line: "if not self._supported:"
flake8.checker            SpawnPoolWorker-26    401 DEBUG    Logical line: "raise RuntimeError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-21    548 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-26    401 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    548 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-26    402 DEBUG    Logical line: "from ..lib.windows_onedrive_api import detect_cloud_status"
flake8.checker            SpawnPoolWorker-21    549 DEBUG    Logical line: "from src.services.onedrive_service import OneDriveService"
flake8.checker            SpawnPoolWorker-26    402 DEBUG    Logical line: "return detect_cloud_status(file_path)"
flake8.checker            SpawnPoolWorker-26    403 DEBUG    Logical line: "def detect_cloud_status_safe(self, file_path: Path) -> Optional[CloudFileStatus]:"
flake8.checker            SpawnPoolWorker-21    552 DEBUG    Logical line: "from src.lib.interfaces import (FileDatabaseProtocol, HasherProtocol, ProgressReporterProtocol, )"
flake8.checker            SpawnPoolWorker-21    552 DEBUG    Logical line: "class DirectoryNotFoundError(Exception):"
flake8.checker            SpawnPoolWorker-26    405 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    552 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    552 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-26    405 DEBUG    Logical line: "if not self._supported:"
flake8.checker            SpawnPoolWorker-21    552 DEBUG    Logical line: "class FileScanner:"
flake8.checker            SpawnPoolWorker-26    405 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    552 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    405 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-26    408 DEBUG    Logical line: "return detect_cloud_status_safe(file_path)"
flake8.checker            SpawnPoolWorker-21    554 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    554 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    408 DEBUG    Logical line: "def should_skip_file(self, file_path: Path) -> bool:"
flake8.checker            SpawnPoolWorker-21    554 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    554 DEBUG    Logical line: "SUPPORTED_EXTENSIONS = {"xxxx", "xxxx", "xxxx"}"
flake8.checker            SpawnPoolWorker-26    408 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    409 DEBUG    Logical line: "status = self.detect_cloud_status_safe(file_path)"
flake8.checker            SpawnPoolWorker-21    556 DEBUG    Logical line: "def __init__(self, db_path: Optional[Path] = None, patterns: Optional[List[str]] = None, recursive: bool = True, chunk_size: int = 1024 * 1024, db=None, hasher=None, logger=None, onedrive_service=None, ):"
flake8.checker            SpawnPoolWorker-26    409 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    409 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    409 DEBUG    Logical line: "return status == CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-26    410 DEBUG    Logical line: "def is_cloud_only(self, file_path: Path) -> bool:"
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: "self.db: FileDatabaseProtocol = db if db is not None else get_database(db_path)"
flake8.checker            SpawnPoolWorker-26    410 DEBUG    Logical line: "return self.should_skip_file(file_path)"
flake8.checker            SpawnPoolWorker-26    410 DEBUG    Logical line: "def is_local(self, file_path: Path) -> bool:"
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: "self._hasher: HasherProtocol = hasher"
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-27    379 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-21    557 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-27    379 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-21    559 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    412 DEBUG    Logical line: "status = self.detect_cloud_status_safe(file_path)"
flake8.options.manager    SpawnPoolWorker-27    381 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-21    559 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-27    381 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorker-21    559 DEBUG    Logical line: "if logger is not None:"
%(default)s`.')".
flake8.checker            SpawnPoolWorker-21    55flake8.checker            SpawnPoolWorker-26    412 DEBUG    Logical line: ""
9 DEBUG    Logical line: "if logger is not None:"
flake8.checker            SpawnPoolWorker-26    414 DEBUG    Logical line: "return status != CloudFileStatus.CLOUD_ONLY"
flake8.options.manager    SpawnPoolWorker-27    383 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-21    561 DEBUG    Logical line: "self.logger = logger"
flake8.checker            SpawnPoolWorker-26    414 DEBUG    Logical line: "def get_service_info(self) -> dict:"
flake8.options.manager    SpawnPoolWorker-27    385 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-21    563 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-26    416 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-27    385 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-21    563 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    416 DEBUG    Logical line: "info = {"xxxxxxx": "xxxxxxxxxxxxxxx", "xxxxxxx": "xxxxxxx", "xxxxxxxxx": self._supported, "xxxxx": "xxxxxxxxxxxxxxxxxxxx", }"
flake8.checker            SpawnPoolWorkerflake8.checker            SpawnPoolWorker-26    416 DEBUG    Logical line: "info = {"xxxxxxx": "xxxxx-21    563 DEBUG    Logical line: "try:"
xxxxxxxxxx", "xxxxxxx": "xxxxxxx", "xxxxxxxxx": self._supported, "xxxxx": "xxxxxxxxxxxxxxxxxxxx", }"
flake8.options.manager    SpawnPoolWorker-27    385 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-27    385 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002BC63A809Aflake8.checker            SpawnPoolWorker-21    563 DEBUG    Logical line: "from src.lib.container import Container"
flake8.checker            SpawnPoolWorker-26    416 DEBUG    Logical line: "if self._supported:"
flake8.checker            SpawnPoolWorker-26    4flake8.checker            SpawnPoolWorker-21    563 DEBUG  16 DEBUG    Logical line: "if self._supported:"
  Logical line: "from src.lib.container import Container"
flake8.options.manager    SpawnPoolWorker-27    385 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-26    416 DEBUG    Logical line: "from ..lib.windows_onedrive_api import get_platform_info"
flake8.checker            SpawnPoolWorker-21    563 DEBUG    Logical line: "self.logger = Container().logger()"
flake8.checker            SpawnPoolWorker-21    563 DEBUia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-26    416 DEBUG    Logicaflake8.checker            SpawnPoia stdin. This is useful for editors piping the fiflake8.checker            SpawnPoolWorker-21    563 DEBUG    Logical line: "self.logger = Container().logger()"
--- Logging error ---
drive_api import get_platform_info"
ia stdin. This is useful --- Logging error ---
drive_api import get_platform_info"
--- Logging error ---
ia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
--- Logging error ---
Traceback (most recent call last):
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 118 (should have been between 0 and 113)
OSError: raw write() returned invalid length 135 (should have been between 0 and 37)
Call stack:
Call stack:
flake8                    SpawnPoolWorker-33    191 DEBUG    Added a None logging handler to logger root at flake8
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "<string>", line 1, in <module>
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-28    374 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
flake8.options.manager    SpawnPoolWorker-28    376 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
NameError: name '_mp_plugins' is not defined
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCaflake8.options.manager    SpawnPoolWorker-28    376 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
che\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\l  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))

During handling of the above exception, another exception occurred:

  File "C:\Users\burt_\AppData\Local\Packages\PythonSo  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kf
During handling of the above excepflake8.options.manager    SpawnPoolWorker-28    378 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CFB4E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".

During handling   File "C:\Program Files\WindowsApps\PythonSoftwa  File "C:\Users\burt_\AppD
During   File "C:\Program Filesflake8.options.manager    SpawnPoolWorker-28    378 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.options.manager    SpawnPoolWorker-28    378 DEBUG    Registered option "Option(--exclude, de  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-28    37ftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
ftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packaflake8.options.manager   calCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
lake8\checker.py", line 81, in _mp_run
    ).run_checks()
ftwareFoundation.Python.3.12_qbz5n2kfra8p0\Lcent call last):
lake8\checker.py", line 81, incent call2_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
2_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\chelake8\checker.p last):
 las2_qbz5n2kfra8p0\LocalCache\local-packa81, in _mp_run
    ).run_checks()
 lflake8.options.manager    SpawnPoolWorker-28    380 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFB4E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
 last):
flake8.options.manager    SpawnPoolWorker-27    403 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
2_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8.checker            SpawnPoolWorker-21    582 DEBUG    Logical line: "except Exception:"
81, in _mp_run
    ).run_checks()
flake8.checker            SpawnPoolWorker-26    435 DEBUG    Logical line: "info["xxxxxxxx"] = get_platform_info()"
2_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.0 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFB4E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
81, in _mp_run
    ).run_checks()
flake8.checker            SpawnPoolWorke last):
flake8.options.manager    SpawnPoolWorker-27    403 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, qion "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFB4E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
ion "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFB4E509A0>, comma_separated_list=Trion "Option(--extend-exclude, default='', type=functools.partial(<func81, in _mp_run
    ).run_checks()
fl81, in _mp_run
   2_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packa last):
flake8.options.manager    SpawnPoolWorker-27    403 DEBUG    Registered option "Option(--format, dion "Option(--extend-exclude, defauion "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFB4E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
--- Logging error ---
81, in _mflake8.options.manager    SpawnPoolWorker-27    405 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-21    584 DEBUG    Logical line: "import logging as _logging"
flake8.checker            SpawnPoolWorker-21    584 DEBUG    Logical line: "import logging as _logging"
--- Logging error ---

flake8.checker            SpawnPoolWorker-26    439 DEBUG    Logical line: "return info"
ker-26    439 DEBUG    Logical line: "return info"
flake8.checker            SpawnPoolWorker-21    584 DEBUG    Log
--- Logging error ---
    Logical line: "return info"
ogical line: "import logging as _logging"
--- Logging error ---

--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    408 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
ogical line: "import logging as _
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    408 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated    Logical lineflake8                    SpawnPoolWorker-34    186 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    408 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
Traceback (most recent call last):
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-27    410 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-26    454 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
OSError: raw write() returned invalid length 124 (should have been between 0 and 105)
Call stack:
flake8.options.manager    SpawnPoolWorker-27    422 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-26    456 DEBUG    Logical line: "import sys"
  File "<string>", line 1, in <module>
  File "<string>", lflake8.options.manager    SpawnPoolWorker-27    422 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationsflake8.checker            SpawnPoolWorker-26flake8.options.manager    SpawnPoolWorker-27    422 DEBUG    Registered option "Option(--per-file-  File "<sflake8.checker        ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
    456 DEBUG    Logical line: "import sys"
tring>", line 1, in <module>
tring>", line 1flake8.options.manager    SpawnPoolWorker-27    424 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-26    456 DEBUG    Logical line: "import time"
, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.checker            SpawnPoolWorker-26    462 DEBUG    Logical line: "import os"
flake8.options.manager    SpawnPoolWorker-27    431 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.options.manager    SpawnPoolWorker-27    435 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-26    466 DEBUG    Logical line: "class ProgressReporter:"
flake8                    SpawnPoolWorker-35    189 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-26    466flake8.options.manager    SpawnPoolWorker-27    435 DEBUG    Registered option "Option(--indent-size, default DEBUG    Logical line: "class ProgressReporter:"
=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8                    SpawnPoolWorker-35    189 DEBUG flake8.options.manager    SpawnPoolWorker-27    437 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
se), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-paflake8                    Spa  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwase), help='Comma-separated list of error codes to enable. For example,flake8.checker            SpawnPoolWorker-26    468 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
se), help='Comma-separated list of flake8.checker            SpawnPoolWorker-26    468 DEBUG    Logical line  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\localflake8.checker            SpawnPoolWse), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
--- Logging error ---
--- Logging error ---
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftflake8.checker    --- Loggingflake8.chckages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
0, in handle_newline
    self.run_logical_checks()
--- Lflak0, in handle_newline
    fl0, in handle_--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    437 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-26    470 DEBUG    Logical line: "def __init__(self, enabled: bool = None):"
flake8.options.manager    SpawnPoolWorker-29    388 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-29    388 DEBUG    Registered option "Option(-q, --quiet, flake8.checker            SpawnPoolWorker-26    470 DEBUG   ns.manager    SpawnPoolWorker-27    437 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
0, in ns.manager    SpawnPoolWorker-27    437 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002BC63A809A0>, comma_separated_: "def __init__(self, enabled: bool = None):"
flake8.options.manager    SpawnPoolWorker-29    38= None):"
flake8.options.manager   ns.manager    SpawnPoolWorker-27    437 DEBUG    Registered option "Option(--extend-select,flake8.optio>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
= Non= =True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8fla=True, normalize_paths=False), help='Comma-separated list of error codes to add to the li= None):"
--- Logging error ---
alize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
= None):"
--- Lof
--- Logging error ---
alize_paths=False), help='Comma-separated list of error codes to add to the list of flake8.options.manager    SpawnPoolWorker-29    388 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
0, in handle_newline
    self.run_logical_checks()
flake8.checker            SpawnPoolWorker-21    618 DEBUG    Logical line: "self.logger = _logging.getLogger(__name__)"
0, in handle_newline
    self.run_logical_checks()
flake8.checker            SpawnPooalize_paths=False), help='Comma-separated flake8.options.manager    SpawnPoolWorker-29    388 DEBUG    Registered option "Option(-q, --quiet, action='coun
--- Logginflake8.options.manager    SpawnPoolWorker-29    388 DEBU
--- 0, in handle_newline
    self.run_logical_alize_paths=False), h
-0, in handle_newline_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    Sp_paths=False), help='Comma-separated list of error codes to add to the list of seflake8.options- Logging error ---
0, in hand0, inflake8.- Logging _paths=False), help='Comma-separated lisfla_paths=False), help=Logging error ---
0,0_paths=FalLogging efLogg_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
--- Logging error ---
0, in handle_newline
    self.run_logical_checks()
flake8.checker            SpawnPoolWorker-21    618 DEBUG    Logical line: "self.logger = _logging.getLogger(__name__)"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    388 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    391 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-29    388 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---0, in handle_newline
    self.run_logical_checks()
flake8.checker            SpawnPoolWorker-21 _paths=False), help='Comma-separated list of error codes to add to the list of selected ones.action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    391 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
_paths=False), help='Comma-separated list of e0, in handle_newline
    self.run_logical_checksLogging error ---
flake8.checker            SpawnPoolWorker-26    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
Logging error ---
flake8.checker            SpawnPoolWorker-26    40, in handle_newline
  action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    _paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    443 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
0, in handler ---
flake8.options.manager    SpawnPoolWorker-27    443 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
gging error ---
flake8.checker            SpawnPoolWorker-26    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
0, in ion='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    391 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
r ---
flake8.options.manager    SpawnPoolWorker-27    443 DEBUG    Registered option "Option(--disable-noqa, action='store_hecker            SpawnPoolWorker-26    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
Worker-27    443 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
on='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    391 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
lWorker-21    618 DEBUG    Logical line: "self.logger = _logging.getLogger(__name__)"
--- Logging error ---
hecker            SpawnPoolWorker-26    475 DEBUG    LWorker-27    443 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False,on='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    39on='count', default=0, help='Report only file names, or nothing. This option is repeaker            SpawnPoolWorker-26    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
           SpawnPoolWorker-26    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
er-21    618 DEBUG    Logical line: "self.logger = _logging.getLogger(__name__)"
--- Logging error ---
er-21    618 DEBUG    Logical line: "self.logger = _UG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
           SpawnPoolWorker-26    475 DEBUG    Logic           SpawnPoolWorkeUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Diser-21    618 DEBUG    Logion='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    391 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
--- Logging error ---
t='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
--- Logging error ---
           Sr ---
t='auto', choices=('auto', 'always', 'never'), help='Whether to use coable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
able the effect of "# noqa". This will report r -      errors on lines with "# noqa" at the end.')".
   r errors on lines with "#t='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    405 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
t='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
--- Logging error ---
flake8.options.manager    Spaerrors on l           SpawnPoolWorker-26    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
errorxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
t='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output. PoolWorker-29    405 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
xxxxxxxxxxxxxxxxxxxxxxxxxxxxerr ---
flake8.checker            SpawnPoolWorker-21    635 DEBUG    Logical line: "self.patterns = patterns or ["x"]"
errors on lines with "# noqa" at the end.')".
--- Logging error ---

flake8.checker            SpawnPoolWorker-21    635 DEBUG    Logical line: "self.patterns = patterns or ["x"]"
errors on lines with "# noqa" at thPoolWorker-29    405 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
xxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
flake8.checker            SpawnPoolWorker-26    489 DEBUG    Logical line: "self._enabled = enabled"
PoolWorker-29    405 DEBUG    Registered option "Option(--count, action='store_true', help='Prinerrors on lines w
flake8.checker            SpawnPoolWorker-21    635 DEB
flake8.checker            Serrors oPoolWorker-29    405 DEBUG    Registered option xxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
flake8.checker        -
flake8.checker            SpawnPoolWorker-26    489 DEBUG    Logical line: "self._enabled = enabled"
-- Logging error ---
-- Logging "
-
flake8.checker            SpawnPoolWorker-26    4errors on lines with "# noqa" at the end.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    459 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
   SpawnPoolWorker-27    459 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
    SpawnPoolWorker-26    489 DEBUG    Logical line: "self._enabled = enabled"
"
--- Logging error ---
-- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    409 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
f files or directories to exclude. (Default: %(default)s)', metavar='patterns')".

--- Logging error ---
  459 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".

--- Loggin  459 DEBUG    Registered option "Option(--show-source, action='storf files or directories to exclude. (Defau   SpawnPoolWorker-26    489 DEBUG    Logical line: "self._enabled = enabled"
ption(--show-source, action='store_true', help='Show the source generate each error or warning.')".
f files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
 DEBUG    Logical line: "self._enabled = enabled"
ption(--show-source, action='store_true', help='Sh
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    644 DEBUG    Logical line: "self.recursive = recursive"
ption(--show-source, acti
--- Logging error ---
flake8.checker            SpawnPoolWorke DEBUG    Logical line: "ption(--show
--- Logging error ---
flake8. DEBUG    Logical line: "self._enabled = enabled"
--- Logging error ---
 DEBUG    Logical line: "self._enable
--- Logging erce, action='store_true', help='Show the source generate each error or warning.')".
ce, action='store_true', help='Show the so DEBUG    Logical PoolWorker-21    644 DEBUG    Logical line: "self.recursive = recursive"
 DEBUG   ce, action='store_tru DEBon='store_true', help='Show the source generate each error or warning.')".
  Logical line: "self.recursive = recursive"
on='store_true', help='Show the source  Logical line: "self.rf files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    417 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
 to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    417 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
  Logical lon='store_true', heon='store  Log. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    417 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
ogical line: "self.recursive = recursive"
on='store_true', help='Show the source generate each error or warning.')".
--- Logging error ---
 DEBUG    Logical line: "self._enabled = enabled"
--- Logging error ---
flake8.checker            SpawnPoolWorker-26    500 DEBUG    Logical line: "self._total_items = 0"
 DEBUG    Logical line: "self._enabled = enabled"
--- Logging error ---
flake8.checke. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    417 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<ogical line: "self.re. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPooogical lin.checker            SpawnPoolWorker-26    500 DEBUG    Logical line: "self._total_items = 0"
. (Default: %(default)s)', metavar='patterns')".
---.checker            SpawnPoolWorker-26    500 Dve = recursive"
on='store_true', help='Show the source generate each error or warning.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    469 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
.checker            Spaon='store_true', help='Show the source generate each error or warning.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorke".
ve = recve =.checker   on='store_true', help='Show the source generate each error or warning.checon='store_true', help='Show the so".
--- Logging error ---
ve = recursive"
--- Logging error ---
.crker-27    469 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
".
--- Loggive"
--- Logging error ---
ve"
--- Loggi.action='store_false', dest='show_source', help='Negate --show-source')".
".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    419 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    419 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0ve"
--al_items = 0"
action='store_false', dest='show_sour".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-29    419 DEBUG    Registered ve"al_itemaction='store_false', dest='show_source', help='Negate --show-source')".
--- Logging error ---
vaction='store_false', dest='show_source', help='"Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
al_"Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalizaction='store_false', deal_items = 0"
--- Logging error ---
ve"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    650 DEBUG    Logical line: "self.chunk_size = chunk_size"
al_items = 0"
--- ve"
--- Logging error ---
flake8.checker            SpawnPoolWorkgate --show-source')".
--- Logging error ---
"Option(--filename, default='*.py', type=functools.partial(<function _flagate --show-source')"."Option(--filename, default='*.py', ze"
al_items zeal_i-- Logging error ---
"Option(--filename"Option(-al-- Logging ze"
--- Logging error ---
-- Loze"
--- Loggig error ---
"Optg errorror ---
"Oze"
--rror "g err"Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F4FFD209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
ze"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    650 DEBUG    Logical line: ""
g error ---
flake8.checker            SpawnPoolWorker-26    503 DEBUG    Logical line: "self._current_item = 0"
8.checker            SpawnPoolWorker-26    503 DEBUG    Logical line: "self._current_item = 0"
 error ---
flake8.checker            SpawnPoolWorker-21    650 DEBUG    Logical line: ""
rror ---
flake8.options.manager    SpawnPoolWorker-27    471 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
ecker            SpawnPoolWorker-26    503 DEBUG    Logical line: "self._current_item = 0"
awnPoolWorker-27    471 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
ker            SpawnPoolWorker-21    650 DEBUG    Logical line: ""
awnPoolWorker-27    471 DEBUG    Registered option "Option(ecker            SpawnPoolWorker-26    503 DEBker            SpawnPoolWorker-21 awnPoolWorker-27    471 DEBUGecker            SpawnPecker      awnPoolWorker-ker            Spflake8                    SpawnPoolWorker-36    182 DEBUG    Added a None logging handler to logger root at flake8
'Count errors.')".
'Count errBUG    Logical line: ""
 0"
flake8                    SpawnPoolWorker-36    182 DEBUG ""
 0'Counflake8                    Spa""
--- Logging error ---
'Count errors.')".
--- Logging error ---
 0"
--- Logging error ---
flake8        "
--- Logging error ---
"
--- Loggin Logging error ---
flake8 'Count errors.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    483 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
8.options.manager    SpawnPoolWorker-27    483 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
Logging error ---
--- Logging error ---
flaLogging eDEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
--- Loggingf--- LLoggDEBUG    Registered option "Option(--exit-zero, action='store_trueflake8                    SpawnPoolWorker-36    182 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
- Logging error ---
gging error ---
tion "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
on "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8                    SpawnPoolWorker-36    182 DEBUG    Added a gging error ---
flake8.checker            SpawnPoolWorker-21    663 DEBUG    Logical line: ""
- Logging error ---
flake8.checker            SpawnPoolWorker-26    517 DEBUG    Logical line: "self._label = """
"self._label = """
on "Option(--exit-zero, action='store_true', help='Exigging error ---
flake8.checker            Spawn"self._labflake8                    SpawnPoo DEBUG    Logical line: ""
h status code "0" even if there are errors.')".
h status code "0" even itus code "0" even if there are errors.')".
"self._label = """
--- Logging error ---
tus code "0" even if t
"self._label = """
-tus code "0"self._labtus c
--- Logging error ---
tu"selfwnPoolWorker-36    182 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
orker-36    182 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
= """
--- Logging error ---
---

--- Logging error ---

--
--
--- Logging error ---
---
flake8.checker            SpawnPoolWorker-21    665 DEBUG    Logical line: ""
   SpawnPoolWorker-21    665 DEBUG    Logical line: ""
 665 DEBUG    Logical line: ""

--- Logging error ---
flake8.options.manager    SpawnPoolWorker-27    488 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
--
flake8.checker            SpawnPoolWorker-26    520 DEBUG    Logical line: "self._start_time = 0.0"
flake8.options.manager    SpawnPoolWorker-30    380 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-30    380 DEBUG    Registered option "Option(-q, --quiet, flake8.options.manager    SpawnPoolWorker-27    491 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-21    669 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    523 DEBUG    Logical line: "self._last_update_time = 0.0"
flake8.checker            SpawnPoolWorker-26    523 Daction='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
EBUG    Logical line: "self._last_update_time = 0.0"
flake8.options.manager    SpawnPoolWorker-27    491 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-26    523 DEBUG    Logical line: "self._terminal_width = 80"
flake8.options.manager    SpawnPoolWorker-30    383 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-27    492 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-27    492 DEBUG    Registered option "Option(--bug-rflake8.options.manager    SpawnPoolWorker-30    383 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorker-26    524 DEBUG    Logical line: "self._is_active = False"
flake8.options.manager    SpawnPoolWorker-30    383 DEBflake8.options.manager    SpawnPoolWorker-27   flake8.checker            SpawnPoolWorker-26    524 DEBUG    Logical line: "self._is_active = False"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    670 DEBUG    Logical line: "if onedrive_service is not None:"
er-21    670 DEBUG    Logical line: "if onedrive_service is not None:"
UG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
 492 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
UG    Registered option "Option(--color, default='auto', choices=('auto', 'always'er-21    670 DEBUG    Logical line:  492 DEBUG    Registered option "Option(--bug-report, action='store_truTraceback (most recent call last):
 492 DEBUG    Registered option "OpTraceback (most reUG    Registered option "Option(--color, cent call last):
tion(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
er-21    670 DEBUG    Logical line: "if onedrive_service is not None:"
--- Logging error ---
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-27    493 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
"if onedrive_service is not None:"
--- Logging error ---
default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-30    385 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-30    385 DEBUG    Registered option "Option(--count, actidefault ignore list with ['B901', 'B902', 'B903', 'B904',\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
"if onedrive_service is not Ndefault ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
--- Logging error ---
on='store_true', help='Print total number of errors to standard output after all other output.')".
default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B9"if onedrive_service is not None:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    671 DEBUG    Logical line: "self._onedrive = onedrive_service"
\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.checker            SpawnPoolWorker-26    525 DEBUG    Logical line: "if self._enabled is None:"
\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.writ"if onedrive_service is not None:"
--- Logging error ---
flake8.checker            default ignore list with ['B901', "if onedrive_service is not None:"
--- Loe(msg + self.terminator)
flake8.checker            SpawnPoolWorker-26    525 DEBUG    Logical line: "if self._enabled is None:"
on='store_true', help='Print total number of errore(msg + self.terminator)
flake8.checker            SpawnPoolWorkone:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    671 DEBUG    Logical line: "self._onedrive = onedrive_service"
on='store_true', help='Prdefault ignore lione:"
--- Logging error ---
flake8.checker            SpawnPoolWorkere(msg + self.terminator)
flake8one:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    671 DEBUG    Logical line: "self._onedrive = onedrive_service"
--- Logging error ---
e(msg + self.tere(msg + self.terminator)
flake8.checker            SpawnPoolWorker-26    525 DEBUG    Logical line: "if self._enabled is None:"
--- Logging error ---
one:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    671 flake8.options.manager    SpawnPoolWorker-30    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F4E67309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
Traceback (most recent call last):
Traceback (most re--- Logging error ---
minator)
flake8.checker            SpawnPoolWorker-26    525 DEBUG    Logical line: "if self._enabled is None:"
--- Logging error ---
Traceback SpawnPoolWorker-30    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F4E67309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging SpawnPoolWorker-30    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F4E67309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
 SpawnPoolWorker-30    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000 (most recent call last):
Traceback (most recent call last):
minator)
flake8.checker            SpawnPoolWorker-26    525 DEBUG    Logical line: "if self._enabled is None:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-26    533 DEBUG    Logical line: "self._enabled = self._should_show_progress()"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
flake8.checker            SpawnPoolWorker-26    534 DEBUG    Logical line: "self._update_terminal_width()"
OSError: raw write() returned invalid length 171 (should have been between 0 and 142)
NameError: name '_mp_plugins' is not defined
Call stack:

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
flake8.checker            SpawnPoolWorker-26    537 DEBUG    Logical line: "def start_progress(self, total_items: int, label: str) -> None:"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
OSError: raw write() returned invalid length 186 (should have been between 0 and 115)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
Call stack:
flake8.checker            SpawnPoolWorker-26    538 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
Call sflake8.checker            SpawnPoolWorker-26    538 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
tack:
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8.checker            SpawnPoolWorker-26    539 DEBUG    Logical line: "if not self._enabled or total_items <= 0:"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-paflake8.checker            SpawnPoolWorker-26    539 DEBUG    0:"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.checker            SpawnPoolWorker-26    540 DEBUG    Logical line: "return"
Message: 'Logical line: "%s"'
Arguments: ('self._onedrive = onedrive_service',)
flake8                    SpawnPoolWorker-37    184 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-21    690 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-26    543 DEBUG    Logical line: "self._total_items = total_items"
flake8.checker            SpawnPoolWorker-21    690 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    544 DEBUG    Logical line: "self._current_item = 0"
flake8.checker            SpawnPoolWorker-21    690 DEBUG    Logical line: "self._onedrive = OneDriveService()"
flake8.checker            SpawnPoolWorker-26    544 DEBUG    Logical line: "self._label = label"
flake8.checker            SpawnPoolWorker-21    690 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    544 DEBUG    Logical line: "self._start_time = time.time()"
flake8.checker            SpawnPoolWorker-21    696 DEBUG    Logical line: "self._onedrive = None"
flake8.checker            SpawnPoolWorker-26    550 DEBUG    Logical line: "self._last_update_time = self._start_time"
flake8.checker            SpawnPoolWorker-21    696 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    550 DEBUG    Logical line: "self._is_active = True"
flake8.checker            SpawnPoolWorker-26    550 DEBUG    Logical line: "self._update_terminal_width()"
flake8.checker            SpawnPoolWorker-21    696 DEBUG    Logical line: "def scan_directory(self, directory: Path, recursive: bool = False, metadata=None, progress_reporter=None, cloud_status: str = "xxxxx", ) -> Iterator[UserFile]:"
flake8.checker            SpawnPoolWorker-26    550 DEBUG    Logical line: "self._display_progress()"
flake8.checker            SpawnPoolWorker-26    550 DEBUG    Logical line: "def update_progress(self, current_item: int, current_file: str = None) -> None:"
flake8.checker            SpawnPoolWorker-21    696 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-31    387 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-31    387 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-31    387 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-21    698 DEBUG    Logical line: "directory = Path(directory)"
flake8.options.manager    SpawnPoolWorker-31    387 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002064BF309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-26    552 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-32    373 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-31    387 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.checker            SpawnPoolWorker-26    552 DEflake8.checker            Slake8_normalize at 0x000002064BF309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
lake8_normalize at 0x000002064BF309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-32    373 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-21    698 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    552 DEBUG    Logical line: "if not self._enabled or not self._is_active:"
flake8.options.manager    SpawnPoolWorker-32    373 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorkerBUG    Logical line: "if not self._enabled or not self._is_active:"
flake8.checker      t self._enabled or not self._is_active:"
flake8.options.manager    SpawnPoolWorker-32    373 DEBflake8.chet self._enabled or noflake8.options.manager    Sflaket self._ent selflake8.options.manager    SpawnPoolWorker-32    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-32    373 DEBUG    Registered option "Option(--count, actit self._enabled or not self._is_active:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    698 DEBUG    Logical line: "if not directory.exists() or not directory.is_dir():"
t self._enabled or not self._is_flake8.checker            SpawnPoolWorker-21    698 DEBUG    Logiflake8.options.manager    SpawnPoolWorker-32    37t self._enabled flake8.checker            SpawnPtrue', help='Print total number of errors to standard output after all other output.')".
oolWorker-21    698 DEBUG    Logical line: "if not directory.exists() or not directory.is_dir():"
or not self._is_active:"
--- Logging error ---
true', help='Print total number of errors to or not self._is_active:": "if not directory.exists() or not directory.is_dir():"
: "if not directory.exists() true', help='Print totdirectory.exists() or not directory.is_dir():"
mber of errors to standard output after all other output.')".
output.')".
directory.exists() or not directory.is_dir():"
--- Logging error ---
or not self._is_active:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-26    555 DEBUG    Logical line: "return"
or not self._is_active:"
--- Logging error ---
flake8.checker    directory.exists() or not directory        SpawnPoolWorker-26    555 DEBUG    Logical line: "return"
.is_dir():"
--- Logging error ---
output.')".
--- Logging error ---
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.checker            SpawnPoolWorker-26    555 DEBUG    Logical line: "self._current_item = current_item"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n55 DEBUG    Logical line: "self._current_item = current_item"
  File "C:\Program Files\WindowsApps\PythonSoftw: "self._current_item = current_item"
  File "C:\Program Files: "self._current_it  File "C:\P: "self._  File: "s  F: "self._current_item = current_item"
--- Logging error ---
em = current_item"
--- Logging error ---
areFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 65 (should have been between 0 and 48)
Call stack:
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "<string>", line 1, in <module>
flake8                    SpawnPoolWorker-38    171 DEBUG    Added a None logging handler to logger root at flake8
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
OSError: raw write() returned invalid length 134 (should have been between 0 and 39)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8                    SpawnPoolWorker-38    171 DEBUG Call stack:
honSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
Call sflake8                    SpaCalhonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessl stack:
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
Message: 'Logical line: "%s"'
Arguments: ('if not directory.exists() or not directory.is_dir():',)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('self._current_item = current_item',)
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "raise DirectoryNotFoundError(f"Directory not found: {directory}")"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "current_time = time.time()"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "if current_time - self._last_update_time < 0.1:"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "raise DirectoryNotFoundError(f"Directory not found: {directory}")"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "return"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "self._last_update_time = current_time"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "if recursive:"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "self._update_terminal_width()"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "candidates = list(directory.rglob("x"))"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "self._display_progress(current_file)"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: "def finish_progress(self) -> None:"
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    569 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    716 DEBUG    Logical line: "candidates = list(directory.iterdir())"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "if not self._enabled or not self._is_active:"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "except PermissionError:"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "raise"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "return"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "self._is_active = False"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "candidates = []"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "if sys.stdout.isatty():"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "sys.stdout.write("xx" + "x" * self._terminal_width + "xx")"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "files = [entry for entry in candidates if getattr(entry, "xxxxxxx", lambda: False)() and self._match_patterns(entry.name)]"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "sys.stdout.flush()"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "def _should_show_progress(self) -> bool:"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    573 DEBUG    Logical line: "return sys.stdout.isatty()"
flake8.checker            SpawnPoolWorker-21    720 DEBUG    Logical line: "total_files = len(files)"
flake8.checker            SpawnPoolWorker-26    575 DEBUG    Logical line: "def _update_terminal_width(self) -> None:"
flake8.checker            SpawnPoolWorker-21    722 DEBUG    Logical line: "if progress_reporter and hasattr(progress_reporter, "xxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-26    575 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    722 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    575 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-21    722 DEBUG    Logical line: "progress_reporter.start_progress(total_files, "xxxxxxxx")"
flake8.checker            SpawnPoolWorker-26    575 DEBUG    Logical line: "size = os.get_terminal_size()"
flake8.checker            SpawnPoolWorker-21    722 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    575 DEBUG    Logical line: "self._terminal_width = max(size.columns, 40)"
flake8.checker            SpawnPoolWorker-21    722 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    576 DEBUG    Logical line: "except (OSError, AttributeError):"
flake8.checker            SpawnPoolWorker-21    723 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-21    723 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    576 DEBUG    Logical line: "self._terminal_width = 80"
flake8.checker            SpawnPoolWorker-21    723 DEBUG    Logical line: "total_files = 0"
flake8.checker            SpawnPoolWorker-26    576 DEBUG    Logical line: "def _display_progress(self, current_file: str = None) -> None:"
flake8.checker            SpawnPoolWorker-21    723 DEBUG    Logical line: "for idx, entry in enumerate(files, start=1):"
flake8.checker            SpawnPoolWorker-26    576 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    723 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    577 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    724 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    577 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    724 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    724 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    726 DEBUG    Logical line: "if not self._validate_path_like(entry):"
flake8.checker            SpawnPoolWorker-26    579 DEBUG    Logical line: "if not sys.stdout.isatty() and not self._enabled:"
flake8.checker            SpawnPoolWorker-21    726 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    579 DEBUG    Logical line: "return"
flake8.checker            SpawnPoolWorker-21    726 DEBUG    Logical line: "if progress_reporter and hasattr(progress_reporter, "xxxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-26    579 DEBUG    Logical line: "if self._total_items > 0:"
flake8.checker            SpawnPoolWorker-26    579 DEBUG    Logical line: "percentage = min(100.0, (self._current_item / self._total_items) * 100)"
flake8.checker            SpawnPoolWorker-21    726 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    579 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-26    579 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-26    581 DEBUG    Logical line: "percentage = 0.0"
flake8.checker            SpawnPoolWorker-21    728 DEBUG    Logical line: "progress_reporter.update_progress(idx, str(entry.name))"
flake8.checker            SpawnPoolWorker-26    581 DEBUG    Logical line: "elapsed_time = time.time() - self._start_time"
flake8.checker            SpawnPoolWorker-21    728 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    581 DEBUG    Logical line: "if self._current_item > 0 and elapsed_time > 0:"
flake8.checker            SpawnPoolWorker-21    728 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-21    728 DEBUG    Logical line: "continue"
flake8.checker            SpawnPoolWorker-26    581 DEBUG    Logical line: "items_per_second = self._current_item / elapsed_time"
flake8.checker            SpawnPoolWorker-21    728 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    728 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    730 DEBUG    Logical line: "if progress_reporter and hasattr(progress_reporter, "xxxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-26    583 DEBUG    Logical line: "remaining_items = self._total_items - self._current_item"
flake8.checker            SpawnPoolWorker-21    730 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    583 DEBUG    Logical line: "if items_per_second > 0:"
flake8.checker            SpawnPoolWorker-21    730 DEBUG    Logical line: "progress_reporter.update_progress(idx, str(entry.name))"
flake8.checker            SpawnPoolWorker-26    583 DEBUG    Logical line: "eta_seconds = remaining_items / items_per_second"
flake8.checker            SpawnPoolWorker-21    730 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    583 DEBUG    Logical line: "eta_str = self._format_time(eta_seconds)"
ept Exception:"
flake8.checker            SpawnPoolWorker-26    583 DEBUG    Logical line: "eta_str = self._format_time(eta_seconds)"
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-26    585 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    585 DEBUG    Logical line: "eta_str = "xxxxx""
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "user_file = UserFile(entry)"
flake8.checker            SpawnPoolWorker-26    585 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    585 DEBUG    Logical line: "eta_str = "xxxxx""
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "if self._onedrive is not None:"
flake8.checker            SpawnPoolWorker-26    585 DEBUG    Logical line: "progress_info = f"{self._label} {self._current_item}/{self._total_items} ({percentage:.1f}%) ETA: {eta_str}""
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "status = self._onedrive.detect_cloud_status_safe(entry)"
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    732 DEBUG    Logical line: "status = CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: "if status is None:"
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: "status = CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: "user_file.cloud_status = status"
flake8.checker            SpawnPoolWorker-21    734 DEBUG    Logical line: "user_file.is_cloud_only = status == CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: "user_file.is_local = status != CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: "yield user_file"
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: "except PermissionError:"
flake8.checker            SpawnPoolWorker-21    735 DEBUG    Logical line: "raise"
flake8.checker            SpawnPoolWorker-21    736 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-21    737 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    737 DEBUG    Logical line: "continue"
flake8.checker            SpawnPoolWorker-21    737 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    737 DEBUG    Logical line: "if progress_reporter and hasattr(progress_reporter, "xxxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-21    738 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    591 DEBUG    Logical line: "if current_file:"
flake8.checker            SpawnPoolWorker-21    738 DEBUG    Logical line: "progress_reporter.finish_progress()"
flake8.checker            SpawnPoolWorker-26    591 DEBUG    Logical line: "available_width = self._terminal_width - len(progress_info) - 3"
flake8.checker            SpawnPoolWorker-21    738 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-21    738 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-26    591 DEBUG    Logical line: "if available_width > 10:"
flake8.checker            SpawnPoolWorker-26    592 DEBUG    Logical line: "truncated_file = self._truncate_filename(current_file, available_width)"
flake8.checker            SpawnPoolWorker-21    739 DEBUG    Logical line: "def scan_recursive(self, directory: Path, metadata=None, progress_reporter=None, cloud_status: str = "xxxxx", ) -> Iterator[UserFile]:"
flake8.checker            SpawnPoolWorker-26    592 DEBUG    Logical line: "progress_info += f" - {truncated_file}""
flake8.checker            SpawnPoolWorker-26    593 DEBUG    Logical line: "if len(progress_info) > self._terminal_width:"
flake8.checker            SpawnPoolWorker-21    740 DEBUG    Logical line: "yield from self.scan_directory(directory, recursive=True, metadata=metadata, progress_reporter=progress_reporter, cloud_status=cloud_status, )"
flake8.checker            SpawnPoolWorker-26    593 DEBUG    Logical line: "progress_info = progress_info[: self._terminal_width - 3] + "xxx""
flake8.checker            SpawnPoolWorker-21    740 DEBUG    Logical line: "def scan(self, paths_or_directory) -> List[dict] or Iterator[UserFile]:"
flake8.checker            SpawnPoolWorker-21    740 DEBUG    Logical line: "def scan(self, paths_or_directory) -> List[dict] or Iterator[UserFile]:"
flake8.checker            SpawnPoolWorker-26    596 DEBUG    Logical line: "sys.stdout.write(f"\r{progress_info}")"
flake8.checker            SpawnPoolWorker-21    742 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    596 DEBUG    Logical line: "sys.stdout.flush()"
flake8.checker            SpawnPoolWorker-21    742 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    596 DEBUG    Logical line: "def _truncate_filename(self, filename: str, max_length: int) -> str:"
flake8.checker            SpawnPoolWorker-26    596 DEBUG    Logical lineflake8.checker            SpawnPoolWorker-21    742 DEBUG    Logical line: ""
--- Logging error ---
flake8.checker            SpawnPoolWflake8.checker            SpawnPoolWorker-21    742flake8.checker           flake8.checker     SpawnPoolWorker-21    742 DEBUG    Logical line: ""
--- Logging error ---
        SpawnPoolWorker-26    596 DEBUG    Logical line: "def _truncate_filename(self, filename: str, max_length: int) -> str:"
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 150 (should have been between 0 and 79)
Call stack:
flake8.checker            SpawnPoolWorker-26    598 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.checker            SpawnPoolWorker-26    601 DEBUG    Logical line: "if len(filename) <= max_length:"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 547, in handle_newline
    self.run_logical_checks()
flake8.options.manager    SpawnPoolWorker-33    372 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-26    604 DEBUG    Logical line: "return filename"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('',)
flake8.options.manager    SpawnPoolWorker-33    373 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-26    605 DEBUG    Logical line: "if max_length <= 3:"
flake8.options.manager    SpawnPoolWorker-33    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-21    752 DEBUG    Logical line: "if isinstance(paths_or_directory, (str, Path)):"
flake8.checker            SpawnPoolWorker-21    752 DEBUG    Logical line: "if isinstance(paths_or_directory, (str, Path)):"
flake8.options.manager    SpawnPoolWorker-33    375 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-26    607 DEBUG    Logical line: "return "xxx""
flake8.options.manager    SpawnPoolWorker-33    375 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-21    753 DEBUG    Logical line: "return self.scan_directory(Path(paths_or_directory), recursive=self.recursive)"
flake8.checker            SpawnPoolWorker-26    607 DEBUG    Logical line: "return "xxx" + filename[-(max_length - 3) :]"
flake8.options.manager    SpawnPoolWorker-33    375 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-33    375 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-26    607 DEBUG    Logical line: "def _format_time(self, seconds: float) -> str:"
flake8.checker            SpawnPoolWorker-21    755 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-33    376 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-21    755 DEBUG    Logical line: "results = []"
flake8.checker            SpawnPoolWorker-26    608 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-33    376 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-21    755 DEBUG    Logical line: "for p in paths_or_directory:"
flake8.options.manager    SpawnPoolWorker-33    376 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-21    755 DEBUG    Logical line: "p = Path(p)"
flake8.checker            SpawnPoolWorker-26    608 DEBUG    Logical line: "if seconds < 0:"
flake8.options.manager    SpawnPoolWorker-33    376 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-21    755 DEBUG    Logical line: "if not p.exists():"
flake8.checker            SpawnPoolWorker-26    608 DEBUG    Logical line: "return "xxxxx""
flake8.checker            SpawnPoolWorker-26    608 DEBUG    Logical line: "return "xxxxx""
flake8.options.manager    SpawnPoolWorker-33    377 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-21    756 DEBUG    Logical line: "self.logger.debug("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", p)"
flake8.options.manager    SpawnPoolWorker-33    377 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-21    756 DEBUG    Logicalflake8.options.manager    SpawnPoolWorker-33    377 DEBUG    Registered option "Option(--max-line-length, default=79, typflake8.checker            SpawnPoolWorker-26    609 DEBUG    Logical line: "seconds = int(seconds)"
e=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
 line: "self.logger.debug("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", p)"
flake8.options.manager    SpawnPoolWorker-33    377 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-26    609 DEBUG    Logical line: "hours = seconds // 3600"
flake8.checker            SpawnPoolWorker-21    756 DEBUG    Logical line: "continue"
flake8.options.manager    SpawnPoolWorker-33    383 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-26    615 DEBUG    Logical line: "minutes = (seconds % 3600) // 60"
flake8.options.manager    SpawnPoolWorker-33    383 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-21    761 DEBUG    Logical line: "files = ([p] if p.is_file() else ([f for f in p.rglob("x") if f.is_file()] if self.recursive else [f for f in p.iterdir() if f.is_file()]))"
flake8.options.manager    SpawnPoolWorker-33    383 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-26    615 DEBUG    Logical line: "secs = seconds % 60"
flake8.options.manager    SpawnPoolWorker-33    383 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000283D91B09A0>, comma_sepaflake8.checker            SpawnPoolWorker-26    6rated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
15 DEBUG    Logical line: "secs = seconds % 60"
flake8.options.manager    SpawnPoolWorker-33    385 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
15 DEBUG    Logical lineflake8.options.manager    SpawnPoolWorker-33    385 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-33    385 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=15 DEBUG    Logical line: "secs = seconds % 60"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    763 DEBUG    Logical line: "for f in files:"
flake8.checker            SpawnPoolWorker-21   flake8.options.manager    SpawnPoolWorker-33    385 DEBUG    Regis--- Logging error ---
 763 DEBUG    Logical line: "for f in files:"
Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-21    763 DEBUG    Logical line: "if not self._match_patterns(f.name):"
flake8.checker            SpawnPoolWorker-21    763 DEBUGTraceback (most reTracebackflake8.checker            SpTracflake8.checkerTrflake8.flaTfTraceback (most recent call last):
flake8.checker            SpawnPoolWorker-26    619 DEBUG    Logical line: "if hours > 0:"
Traceback (most recent call last):
flake8.checker            Sp_patterns(f.name):"
flake8.options.manager    SpawnPoolWorker-34    366 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-34    366 DEBUG    Registered option "Option(-q, --quiet, Traceback (most recent call lastaction='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
_patterns():
flake8.checker            SpawnPoolWorker-26    619 DEBUG    Logical line: "if hours > 0:"
f.name):"
):
flake8.checker            SpawnPoolWorker-26f.name):"
--- Logging error ---
):
flake8.checker      ):
flake8.c):
flflake8.options.manager    SpawnPoolWorker-34    366 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
f.name):"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    768 DEBUG    Logical line: "continue"
ake8.checker            SpawnPoolWorker-26    619 DEBUG    Logical line: "if hours > 0:"
flake8.options.manager    SpawnPoolWorker-34    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-21    769 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-34    368 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E01EB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-26    623 DEBUG    Logical line: "return f"{hours:02d}:{minutes:02d}:{secs:02d}""
flake8.checker            SpawnPoolWorker-21    769 DEBUG    Logical line: "st = f.stat()"
flake8.checker            SpawnPoolWorker-21    769 DEBUG    Logical line: "st = f.stat()"
flake8.options.manager    SpawnPoolWorker-34    369 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001E01EB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-34    369 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001E01EB809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-26    624 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    771 DEBUG    Logical line: "except (OSError, PermissionError) as e:"
 PermissionError) as e:"
flake8.checker            SpawnPoolWorker-flake8.options.manager    SpawnPoolWorker-34    369 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001E01EB809Aflake8.checker        PermissionEr     SpawnPoolWorker-26    624 DEBUG    Logical line: "else:"
ror) as e:"
flake8.options.manager    SpawnPoolWorker-34    370 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-26    624 DEBUG    Logical line: "return f"{minutes:02d}:{secs:02d}""
flake8.checker            SpawnPoolWorker-21    771 DEBUG    Logical line: "self.logger.warning("xxxxxxxxxxxxxxxxxxxxxxxxxx", f, e)"
flake8.checker            SpawnPoolWorker-21    771 DEBUG    Logicaflake8.options.manager    SpawnPoolWorker-34    370 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name us"{minutes:02d}:{secs:02d}""
"{minutes:02d}xxxxx", f, e)"
flake8.options.manager    SpawnPoolWorker-34    370 DEBUG    Registeredflake8.options.manager    SpawnPool"{minutxxxxx", f, e)"
--- Logging error ---
xxxxx", f, e)"
---flake8.options.ma"{minutes:02d}:{secs:02d}""
--- Logging error ---
"{minutes:02d}:{secs:02d}"xxxxx", fia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
:{secs:02d}""
--- Logging error ---
--- Logging error ---
ng error ---
ia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
--- Logging error ---
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
Traceback (most recent call last):
OSError: raw write() returned invalid length 42 (should have been between 0 and 29)
Call stack:
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 26 (should have been between 0 and 16)
Call stack:
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kf  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Program Files\WindowsApps\PythonSoftwakfra8p0\LocalCache\local-packages\Python312\site-packages\f  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.checker            SpawnPoolWorker-21    776 DEBUG    Logical line: "continue"
lake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.checker            SpawnPoolWorker-21    776 DEBUG    Logical line: "size = int(st.st_size)"
flake8.checker            SpawnPoolWorker-21    776 DEBUG    Logical line: "size = int(st.st_size)"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.checker            SpawnPoolWorker-21    778 DEBUG    Logical line: "mtime = float(st.st_mtime)"
Traceback (most recent call last):
Traceback (most re)"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python3cent call last):
Message: 'Logical line: "%s"'
Arguments: ('return f"{minutes:02d}:{secs:02d}"',)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: ""
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    633 DEBUG    Logical line: "def set_enabled(self, enabled: bool) -> None:"
OSError: raw write() returned invalid length 287 (should have been between 0 and 101)
Call stack:
flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: "cached = self.db.get_cached_hash(f, size, mtime)"
flake8.checker            SpawnPoolWorker-26    633 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    633 DEBUG    Logical line: "self._enabled = enabled"
flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: "cached = None"
flake8.checker            SpawnPoolWorker-26    633 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: "if cached:"
flake8.checker            SpawnPoolWorker-26flake8.checker            SpawnPoolWorker-21flake8.checker        flake8.checker            SpawnPoolWorker-21    780 DEBUG    Logical line: "if cached:"
    SpawnPoolWorker-26    633 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-21    782 DEBUG    Logical line: "hash_value = cached"
flake8.checker            SpawnPoolWorker-26    635 DEBUG    Logical line: "def is_enabled(self) -> bool:"
flake8.checker            SpawnPoolWorker-21    782 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-26    635 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    782 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    635 DEBUG    Logical line: "return self._enabled"
flake8.checker            SpawnPoolWorker-21    782 DEBUG    Logical line: ""
flake8                    SpawnPoolWorker-39    193 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-21    784 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    785 DEBUG    Logical line: "hasher_fn = (self._hasher if self._hasher is not None else __import__("xxxxxxxxxxxxxxxxxxxxxxxx", fromlist=["xxxxxxxxxxx"]).stream_hash)"
flake8.checker            SpawnPoolWorker-21    785 DEBUG    Logical line: "hash_value = hasher_fn(f, chunk_size=self.chunk_size)"
flake8.checker            SpawnPoolWorker-21    785 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-21    785 DEBUG    Logical line: "self.db.set_cached_hash(f, size, mtime, hash_value)"
flake8.checker            SpawnPoolWorker-21    786 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-21    786 DEBUG    Logical line: "self.logger.debug("xxxxxxxxxxxxxxxxxxxxxxxxxxxx", f)"
flake8.checker            SpawnPoolWorker-21    786 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-21    786 DEBUG    Logical line: "self.logger.warning("xxxxxxxxxxxxxxxxxxxxxxxxxx", f, e)"
flake8.checker            SpawnPoolWorker-21    786 DEBUG    Logical line: "continue"
flake8.checker            SpawnPoolWorker-21    787 DEBUG    Logical line: "results.append({"xxxx": str(f), "xxxx": size, "xxxxx": mtime, "xxxx": hash_value, })"
flake8.checker            SpawnPoolWorker-21    787 DEBUG    Logical line: "return results"
flake8.checker            SpawnPoolWorker-21    787 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    788 DEBUG    Logical line: "def _validate_path_like(self, file_path: Path) -> bool:"
flake8.checker            SpawnPoolWorker-21    788 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-21    788 DEBUG    Logical line: "if not file_path.exists() or not file_path.is_file():"
flake8.checker            SpawnPoolWorker-21    788 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-26    646 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-26    646 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-21    793 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    646 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-21    793 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-21    793 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    646 DEBUG    Logical line: "from typing import Dict, Any"
flake8.checker            SpawnPoolWorker-21    793 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-26    646 DEBUG    Logical line: "from ..models.scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-21    793 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    795 DEBUG    Logical line: "if self.SUPPORTED_EXTENSIONS:"
flake8.checker            SpawnPoolWorker-26    648 DEBUG    Logical line: "class DiskSpaceError(Exception):"
flake8.checker            SpawnPoolWorker-21    796 DEBUG    Logical line: "if file_path.suffix.lower() not in self.SUPPORTED_EXTENSIONS:"
flake8.checker            SpawnPoolWorker-26    649 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    796 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-26    649 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-21    796 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    649 DEBUG    Logical line: "class ResultExporter:"
flake8.checker            SpawnPoolWorker-21    796 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-21 flake8.checker            SpawnPoolWorker-26    64flake8                    SpawnPoolWorker-40    183 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker           flake8.checker        flake8                    SpawnPoolWorker-40    183 DEBUG  SpawnPoolWorker-26    649 DEBUG    Logical line: "class ResultExporter:"
    SpawnPoolWorker-21    796 DEBUG    Logical line: "return False"
   Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-21    802 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    655 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    802 DEBUG    Logical line: "if not os.access(file_path, os.R_OK):"
flake8.checker            SpawnPoolWorker-26    655 DEBUG    Logical line: "def export_yaml(self, result: ScanResult, output_path: Path) -> None:"
flake8.checker            SpawnPoolWorker-21    802 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-21    804 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-21    804 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-26    657 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    804 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-26    657 DEBUG    Logical line: "data = self._prepare_yaml_export_data(result)"
flake8.checker            SpawnPoolWorker-21    804 DEBUG    Logical line: "stat_result = file_path.stat()"
flake8.checker            SpawnPoolWorker-26    657 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-21    805 DEBUG    Logical line: "size = int(getattr(stat_result, "xxxxxxx", 0))"
flake8.checker            SpawnPoolWorker-26    658 DEBUG    Logical line: "with open(output_path, "x", encoding="xxxxx") as f:"
flake8.checker            SpawnPoolWorker-21    805 DEBUG    Logical line: "except Exception:"
flake8.options.manager    SpawnPoolWorker-35    380 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.manager    SpawnPoolWorker-35    382 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-21    807 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-26    660 DEBUG    Logical line: "yaml.dump(data, f, default_flow_style=False, allow_unicode=True, indent=2, )"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-pflake8.options.manager    SpawnPoolWorker-35    385 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-21    810 DEBUG    Logical line: "if size <= 0:"
flake8.checker            SpawnPoolWorker-26    664 DEBUG    Logical line: "except OSError as e:"
ackages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 50, in parse_args
    options.register_default_options(option_manager)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\main\options.py", line 197, in register_default_options
    add_option(
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-flake8.options.manager    SpawnPoolWorker-35    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-21    810 DEBUG    Logical line: "return False"
flake8.checker            SpawnPoolWorker-26    664 DEBUG    Logical line: "if e.errno == 28:"
flake8.checker            SpawnPoolWorker-21 flake8.checker            SpawnPoolWorker-26       810 DEBUG    Logical line: "return False"
664 DEBUG    Logical line: "if e.errno == 28:"
flake8.options.manager    SpawnPoolWorker-35    386 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _f  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 290, in add_option
    LOG.debug('Registered option "%s".', option)
flake8.checker            SpawnPoolWorker-21    812 DEBUG    Logical line: "return True"
flake8.options.manager    SpawnPoolWorker-35    386 DEBUG    Registered option "Option(--exclude, depackages\Python312\site-packages\flake8\options\manager.py", line 290, in add_option
    LOG.debug('Registered option "%s".', option)
664 DEBUG    Logical linflake8.checker            SpawnPoolWorker-21 664 DEBUG   flake8.checker        packages\Python312\site-packages\flake8\options\manager.py", line 29flake8.options.manager    SpawnPoolWorker-35    388 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-35    388 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000packages\Python312\site-packages\fflake8.checker            SpawnPoolWorker-21    812 DEBUG    Logical line: "return True"
--- Logging error ---
664 DEBUG    Logical line: "if e.errno == 28:"
--- Logging error ---
ude, default='', type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
--- Logging error ---
0, in add_option
    LOG.debug('Registered option "%s".', option)
0, in add_option
    LOG.debug('R0, in add_optionude, default='', type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normaliz    SpawnPoolWorker-21    812 DEBUG    Logical line: "return True"
--- Logging error ---
--- Loggingflake8                    SpawnPoolWorker-41    178 DEBUG    Added a None logging handler to logger root at flake8
egistered option "%s".', option)
egistered option Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-35    391 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8                    SpawnPoolWorker-41    178 DEBUG     SpawnPoolWorker-21    812 DEBUG    Logical line: "return True"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    815 DEBUG    Logical line: "def validate_file(self, file_path) -> bool:"
Message: 'Registered option "%s".'
Arguments: (Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)'),)
flake8.checker            SpawnPoolWorker-21    815 DEBUG    Logical line: "def validate_file(self, file_path) -> bool:"
flake8.checker            SpawnPoolWorker-21    815 DEBUG    flake8.checker            SpawMessage: 'Registered option "%s".'
Arguments: (Option(--stdin-display-name, default='stdin', help='The name used when reportinflake8.checker    Added a None logging handler to logger root at flake8
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-35    393 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5nflake8.options.manager    SpawnPoolWorker-35    393 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name us   Added a None logging handlMessage: 'Registered option "%s".'
Arguments: (Option(--stdin-flake8.checker            SpawnPoolWorker-21    815 DEBUG    Logical line: "def validate_file(self, file_path) -> bool:"
--- Logging error ---
   Added a Nonflake8.checker            SpawnPoolWorker-21    815 DEBUG    Logical linflake8.options.manager    SpawnPoolWorker-35    393 DEBUG    Registered  File "C:\Program Files\WindowsApps\PythonSoftw  File "C:\Program Files--- Logging error ---
   Addeflake8.options.manager    SpawnPoolflake8.options.maflake8.options.manager    SpawnPoolWorker-34    416 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
     File "C:\Pflake8.options.manager    SpawnPoolWorker-34    416 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet  File flake8.oflak  Fflake8.options.manager    SpawnPoolWorker-34    416 DEBUG    Registered option "Option(--format, defaultOSError: raw write() returned invalid length 96 (should have been between 0 and 48)
flake8.options.manager    SpawnPoolWorker-34    416 fl--- Logging error ---
flake8.checker            SpawnPoolWorker-21    818 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
ed when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-21    818 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    ed when reporting errors from code passed via stdin. This is useful for flake8.checker            SpawnPoolWorker-21    818 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxOSError: raw write() returned invalid length 96 (should have been between 0 and 48)
flake8.checker            SpawnPoolWorker-26    672 DEBUG    Logical line: "raise DiskSpaceError(f"Insufficient disk space to write {output_path}") from e"
 errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-21    818 DEBUG    Logical linOSError: raw write() returned invalid length 96 (should have been between 0 and 48)
flake8.checker            SpawnPoolW-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example,  errors from code passed via stdin. This is useful for editors e file contents to flake8. (Default: %(default)s)')".
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
OSError: raw write() returned invalid length 96 (should havexxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxng containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
e file contents to flake8. orker-26    672 DEBUG    Logical line: "raise DiskSpaceError(f"Insufficient disk space to write {output_path}") from e"
-format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
orker-26    672 DEBUG    Logical line: "raise DiskSpaceError-format='%%(path)s %%(code)s'``. (Defauflake8.options.manager    SpawnPoolWorker-35    397 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-21    821 DEBUG    Logical line: "try:"
e: "try:"
(f"Insufficient disk space to write {output_path}") from e"
pawnPoolWorker-35    397 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
lt: %(default)s)", metavar='format')".
(f"Insufficient disk space to e: "try:"
write {output_path}") from e"
flake8.options.manager    SpawnPoolWorker-35    398 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-21    823 DEBUG    Logical line: "p = file_path if isinstance(file_path, Path) else Path(file_path)"
flake8.options.manager    SpawnPoolWorker-34    421 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-35    399 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-26    676 DEBUG    Logical line: "elif e.errno == 13:"
flake8.options.manager    SpawnPoolWorker-34    424 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001E01EB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-35    402 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-21    826 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-26    679 DEBUG    Logical line: "raise PermissionError(f"Cannot write to {output_path}: Permission denied") from e"
flake8.checker            SpawnPoolWorker-21    flake8.checker            SpawnPoolWorker-26    679 DEBUG    Logical line: "raisflake8.options.manager    SpawnPoolWorker-35    402 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002E1623A09A0>, comma_sepflake8.options.manager    SpawnPoolWorker-34    424 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001E01EB809A0>, comma_separated_list=True, flake8.options.manager    SpawnPoolWorker-34    424 DEBUG    Registered option "Option(--ignore, tyflake8.options.manager    SpawnPoolWorker-35    402 DEBUG    Registered option "Option(--extenflake8.checker            SpawnPoolWorkeflake8.checker          826 DEBUG    Logical line: "except Exception:"
e PermissionError(f"Cannot write to {output_path}: Permission denied") from e"
826 DEBUG    Logical linflake8.options.manager    SpawnPoolWorker-34    427 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001E01EB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-35    404 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
ile-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
e: "except Exception:"
ile-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames flake8.options.manager    SpawnPoolWorker-34    427 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-26    683 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-flake8.options.manager    SpawnPoolWorker-34    427 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationse: "except Eile-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
--- Logging error ---
e: "exflake8.options.manager    SpawnPoolWorker-34    427 DEBUG    Registered option "Option(--per-file-flake8.checker       flake8.options.manager    SpawnPoolWorker-34    4flake8.cheflakeflake8.options.manager  flake8.checker            SpawnPoolWorker-21    830 DEBUG    Logical line: "return False"
flflake8.checker            SpawnPoolWorker-21 er            SpawnPoolWorker-21    830 DEBUG    Logical line: "return False"
26    683 DEBUG    Logical line: "else:"
26    683 DEBUG    Loer            SpawnPoolWorker-21    830flake8.options.manager    SpawnPoolWorker-34    429 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
        SpawnPoolWorker-21    830 DEBUG    Logical line: "return False"
length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
length, default=79, type=<class 'int'>, help='Maximum allowed line lengt        SpawnPoolWorker-21    830 DEgical line: "else:"
=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
is run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-26    685 DEBUG    Logical line: "raise"
flake8.checker            SpawnPoolWorker-21    832 DEBUG    Logical line: "return self._validate_path_like(p)"
flake8.checker            SpawnPoolWorker-flake8.checker            SpawnPoolWorker-21    832 DEBU26    685 DEBUG    Logical line: "raise"
G    Logical line: "return self._validate_path_like(p)"
is run. (Default: %(default)s)', metavar='n')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-26    686 DEBUG    Logical line: "def _prepare_yaml_export_data(self, result: ScanResult) -> Dict[str, Any]:"
flake8.checker            SpawnPoolWorker-21    833 DEBUG    Logical line: "def _should_include_file(self, user_file, cloud_status: str) -> bool:"
flake8.checker            SpawnPoolWorker-21    834 DEBUG    Logical line: "if cloud_status == "xxx":"
flake8.checker            SpawnPoolWorker-26    687 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-21    834 DEBUG    Logical line: "return True"
flake8.checker            SpawnPoolWorker-21 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.checker            SpawnPoolWorker-21    834 DEBUG    Logical line: "return True"
--- Logging error ---
xxxxxxxxxxxxxxxxxxxxxxxxxxx""""
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 113 (should have been between 0 and 90)
Call stack:
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
Traceback (most recent call last):
flake8                    SpawnPoolWorker-42    180 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-26    691 DEBUG    Logical line: "data = {"xxxxxxx": "xxxxx", "xxxxxxxx": {"xxxxxxxxx": result.metadata.start_time.isoformat() if result.metadata.start_time else None, "xxxxxxxxxxxxxxxxx": str(result.metadata.scan_paths[0]) if result.metadata.scan_paths else None, "xxxxxxxxxxxxxxxx": result.metadata.duration_seconds, "xxxxxxxxxxxxxxxxx": result.metadata.total_files_found, "xxxxxxxxxxxxxxxxxxxxx": result.metadata.total_files_processed, "xxxxxxxxx": result.metadata.recursive, "xxxxxx": result.metadata.errors if result.metadata.errors is not None else [], "xxxxxxxxxxxxxxxxxxx": getattr(result.metadata, "xxxxxxxxxxxxxxxxxxx", 0), "xxxxxxxxxxxxx": getattr(result.metadata, "xxxxxxxxxxxxx", []), }, "xxxxxxxxxxxxxxxx": [{"xxxxxxxx": group.hash_value, "xxxxxxxxxx": len(group.files), "xxxxxxxxxxxxxxxx": group.total_size, "xxxxxxxxxxxxxxxx": self._format_file_size(group.total_size), "xxxxxxxxxxxxxxxxxx": group.wasted_space, "xxxxxxxxxxxxxxxxxx": self._format_file_size(group.wasted_space), "xxxxx": [{"xxxx": str(file.path), "xxxxxxxxxx": file.size, "xxxxxxxxxx": self._format_file_size(file.size), "xxxx": file.hash if hasattr(file, "xxxxx") and file._hash else None, } for file in group.files], } for group in result.duplicate_groups], "xxxxxxxxxxxxxxxxx": [{"xxxxxxxx": group.base_name, "xxxxxxxxxxxxxxxx": group.average_similarity, "xxxxx": [{"xxxx": str(file.path), "xxxxxxxxxx": file.size, "xxxxxxxxxx": self._format_file_size(file.size), } for file in group.files], } for group in result.potential_match_groups], }"
flake8.checker            SpawnPoolWorker-26    691 DEBUG    Logical line: "data = {"xxxxxxx": "xxxxx", "xxxxxxxx": {"xxxxxxxxx": result.metadata.start_time.isoformat() if result.metadata.start_time else None, "xxxxxxxxxxxxxxxxx": str(result.metadata.scan_paths[0]) if result.metadata.scan_paths else None, "xxxxxxxxxxxxxxxx": result.metadata.duration_seconds, "xxxxxxxxxxxxxxxxx": result.metadata.total_files_found, "xxxxxxxxxxxxxxxxxxxxx": result.metadata.total_files_processed, "xxxxxxxxx": result.metadata.recursive, "xxxxxx": result.metadata.errors if result.metadata.errors is not None else [], "xxxxxxxxxxxxxxxxxxx": getattr(result.metadata, "xxxxxxxxxxxxxxxxxxx", 0), "xxxxxxxxxxxxx": getattr(result.metadata, "xxxxxxxxxxxxx", []), }, "xxxxxxxxxxxxxxxx": [{"xxxxxxxx": group.h  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
flake8.checker            SpawnPoolWorker-26    691 DEBUG    Logical line: "data = {"xxxxxxx": "xxxxx", "xxxxxxxx": {"xxxxxxxxx": result.metadata.start_time.isoformat() if result.metadata.start_time else None, "xxxxxxxxxxxxxxxxx": str(result.metadata.scan_paths[0]) if result.metadata.scan_paths else None, "xxxxxxxxxxxxxxxx": result.metadata.duration_seconds, "xxxxxxxxxxxxxxxxx": result.met  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfr  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\sitorker-36    182 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-36    370 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
orker-36    182 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-36    3  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundati  File "C:\Program Files\WindowsApps\PythonSoftwarorker-36    182 DEBUG    Added a None logging handler to logger root at flak  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
NameError: name '_mp_plugins' is not defined
NameError: name '_mp_plorker-36    182 DEBUG    Added a None a8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
a8p0\Lib\multiprocessing\process.py", lorker-36    182 DEBNameError: name '_mp_plugins' is not defined
flake8.options.manager    SpawnPoolWorker-34    446 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
NameError: name '_mp_plugins' is not defined
flake8.options.manager    SpawnPoolWorker-34    446 DEBUG    Registered option "Option(--max-doc-lenga8p0\Lib\multiproceflake8.checker            SpawnPoolWorker-26    701 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-36    373 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-36    373 DEBUG    Registered option "Option(--color, default='auto'NameError: name '_mp_plugins' is not defined
flake8.options.manager    Sa8p0\Lib\flake8.checker            SpawnPoolWorkflake8.checker     a8p0flake8.options.manager    SpawnPoolWorker-36    373 DEBNameError: name '_mp_plugins' is notNameError: name '_on "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.ch default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
 default='auto', choices=('auto', 'always', 'never'), help='Whflakflake8.options.manager    SpawnPoolWorker-34    448 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
a8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.checker            SpawnPoolWorker-21    850 DEBUG    Logical line: "elif cloud_status == "xxxxx":"
a8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.checkerf spaces used for indentation (Default: %(default)s)', metavar='n')".
a8p0\Lib\multiprocessing\process.py", line 314a8p0\Lib\multiprocessinfault)s`.')".
indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-26    703 DEBUG    Logical line: ""
indentation (Default: %(dea8p0\Lib\mufault)s)', metavar='n')".
ltiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.checker            SpawnPoolWorker-21    850 DEBUG    Logical line: "elif cloud_status == "xxxxx":"
flake8.checker            SpawnPoolWorkfault)s`.')".
--- Logging error ---
fault)s`.')".
--- ltiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.checker      e8.checker            SpawnPoolWorker-26    703 DEBUG    Logical line: ""
e8.checker            SpawnPoolWorkerfault)s`.ltiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.checker            SpawnPoolWorker-21    850 DEBUG    Logical line: "elif cloud_status == "xxxxx":"
--- Logging error ---
e8.checker        faul SpawnPoolWorker-21    850 DEBUG    Logical line: "elif cloud_status == "xxxxx":"
--- Logging error ---
e8.checke--- Logging error ---
850 DEBUG    Logical line: "elif cloud_status == "xxxxx":"
--- Logging error ---
850 DEBUG    Logical line: "elif cloud_st--- Logginge8.checker            SpawnPoolWorker-26    703 DEBUG    Logical line: ""
--- Logging error ---
6    703 DEBUG    Logical line: ""
--- Logging error ---
ng error ---
Traceback (most recent call last):
850 DEBUG    Logical line: "elif cloud_status == "xxxxx":"
--- Logging error ---
flake8.checker            SpawnPoolWorker-21    852 DEBUG    Logical line: "return getattr(user_file, "xxxxxxxx", False)"
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
OSError: raw write() returned invalid length 79 (should have been between 0 and 75)
NameError: name '_mp_plugins' is not defined
Call stack:

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.checker            SpawnPoolWorker-21    859 DEBUG    Logical line: "elif cloud_status == "xxxxxxxxxx":"
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
OSError: raw write() returned invalid length 62 (should have been between 0 and 15)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
Call stack:
flake8.checker            SpawnPoolWorker-21    861 DEBUG    Logical line: "return getattr(user_file, "xxxxxxxxxxxxx", False)"
Call sflake8.checker            SpawnPoolWorker-21    861 DEBUG    Logtack:
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
ical line: "return getattr(user_file, "xxxxxxxxxxxxx", False)"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\lflake8.checker            SpawnPoolWorker-21    863 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-21    863 DEBUG    Logical line: "else:"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 547, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
ocal-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
ocal-packages\Python312\site-packages\flake8\checker.py", line 442, in run_flake8.checker            SpawnPoolWorker-21    865 DEBUG    Logical line: "return True"
  File "<string>", line 1, in <module>
  File "<string>", llogical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
ine 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
Message: 'Logical line: "%s"'
Arguments: ('',)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64  File "C:\Program Files\WindowsApps\PythonSflake8.checker            SpawnPoolWorker-26    719 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-21    865 DEBUG    Logical line: "def _match_patterns(self, name: str) -> bool:"
oftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
flake8.checker            SpawnPoolWorker-26    720 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-21    867 DEBUG    Logical line: "for pat in self.patterns:"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 50, in parse_args
    options.register_default_options(option_manager)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\main\options.py", line 150, in register_default_options
    add_option(
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 290, in add_option
    LOG.debug('Registered option "%s".', option)
flake8.checker            SpawnPoolWorker-21    867 DEBUG    Logical line: "if fnmatch.fnmatch(name, pat):"
flake8.checker            SpawnPoolWorker-26    720 DEBUG    Logical line: "meta = data.get("xxxxxxxx", {})"
flake8.checker            SpawnPoolWorker-26    720 DEBflake8.checker            SpawnPoolWorker-21    867 DEUG    Logical line: "meta = data.get("xxxxxxxx", {})"
BUG    Logical line: "if fnmatch.fnmatch(name, pat):"
Message: 'Registered option "%s".'
Arguments: (Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.'),)
flake8.checker            SpawnPoolWorker-21    868 DEBUG    Logical line: "return True"
flake8.options.manager    SpawnPoolWorker-36    393 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-26    721 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-36    393 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-21    868 DEBUG    Logical line: "return False"
flake8.options.manager    SpawnPoolWorker-36    393 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.checker            SpawnPoolWorker-21    868 DEBUG    Logical line: "return False"
--- Logging error ---
flake8.checker            SpawnPoolWorker-26    721 DEBUG    Logical line: ""
--- Logging error ---
lake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most reTraceback (most recent call last):
cent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 109 (should have been between 0 and 91)
OSError: raw write() returned invalid length 110 (should have been between 0 and 79)
Call stack:
Call stack:
flake8.options.manager    SpawnPoolWorker-36    395 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
  File "<string>", line 1, in <module>
  File "<string>", line 1, in <module>
  File "<string>", le>
flake8.options.manager    SpawnPoolWorker-36    395 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.options.manager    SpawnPoolWorker-36    395 DEBUG    Registered option "Option(-e>
e>-extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
flake8.options.manager    SpawnPoolWorker-36    395 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.manager    SpawnPoolWorker-36    398 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.manager    SpawnPoolWorker-36    398 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8                    SpawnPoolWorker-43    184 DEBUG    Added a None logging handler to logger root at flake8
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.options.manager    SpawnPoolWorker-36    406 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 547, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
flake8.options.manager    SpawnPoolWorker-36    408 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-36    408 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example,  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.options.manager    SpawnPoolWorker-37    377 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
 ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
Message: 'Logical line: "%s"'
Arguments: ('',)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
Message: 'Logical line: flake8.options.manager    SpawnPoolWorker-37    377 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-36    408 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000022CD8F409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
"%s"'
Arguments: ('',)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
flake8.options.manager    SpawnPoolWorker-37    377 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-36    408 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-26    738 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-36    408 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationsflake8.options.manager    SpawnPoolWorker-36    408 DEBUG    Registered option "Option(--per-file-er-26    738 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-37    377 DEBUG    Registered option "Option(--count, acti  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python3er-26    738 DEBUG  flake8.options.manager    SpawnPoolWorker-36    410 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-37    379 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BA27F209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-37    379 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.options.manager    SpawnPoolWorker-36    410 DEBUG    Registered option "Option(--max-line-length, default=79, typ  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFounder-26    738 DEBUG    Logical line: ""
--- Logging error ---
  Logical line: ""
--- Logging error ---
fault='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BA27F209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
12\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
fault='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BA27F209A0>, comma_sepa  Logical line: ""
-flake8.options.manager    SpawnPoolWorker-36    410 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
a-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
pe=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
pe=<class 'int'>, help='Maximum allowed doc line length for thecks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
a-separated list of files or directories to excludTraceback (most recent call last):
Traceback (most rea-separated list of filespe=<class 'int'>, help='Maximumcks
    LOG.debug('Logical lineTracebacka-separated cks
    LOG.debpe=<class 'int'pe=<clacks
   Traca-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
Tra-separated list of files or directories to exclude. (Default:pe=Ta-separated list of files or di entirety of this run. (Default: %(default)s)', metavar='n')".
a-separated lisTraceback (most recent call last):
flake8.checker            SpawnPoolWorker-26    740 DEBUG    Logical line: ""
cks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.checker            SpawnPoolWorker-21    887 DEBUG    Logical line: "def get_supported_extensions(self):"
a-separcks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.checker          Traceback (most recent call last):
flake8.checker         SpawnPoolWorker-21    887 DEBUG    Logical line: "def get_supported_extensions(self):"
     SpawnPoolWorker-26    740 DEBUG    Logical line: ""
 entirety of this run. (Default:: %(default)s)', metavar='n')".
     SpawnPoolWorker-26    74  SpawnPoolWorker-21    887 DEBUG    Logical   SpawnPoolWorker-21       SpawnPool: %(default)s)',     Sp        SpawnPoolWorker-26    740 DEBUG    Logical line: ""
--- Logging error ---
: %(default)s)', metavar='n')".
--- Logging error ---
     SpawnPoolWorker-26    740 DEBUG      SpawnPoolWorker-21    887 DEBUG    Logical line: "def get_supported_extensions(self):"
--- Logging error ---
: %(default)s)', metavar='n'     SpawnPoolWorker: %(default)s)--- Logging error ---
-26    740 DEBUG    Logical line: ""
--- Logging error ---
', metavar='n')".
--- Logging error ---
flake8                    SpawnPoolWorker-44    179 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-38    373 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-38    375 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-38    375 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-38    376 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-38    379 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-38    379 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-38    379 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-38    379 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-38    379 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-38    380 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-38    383 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-38    383 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-38    383 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-38    383 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-38    383 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-38    385 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-38    385 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-38    385 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-38    385 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-38    387 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-38    387 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-38    387 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-38    387 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000029D8B8609A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8                    SpawnPoolWorker-45    177 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-45    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-38    395 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-38    395 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-38    395 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-38    395 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-38    395 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-38    395 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-38    396 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-38    396 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-38    396 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-38    398 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    398 DEBUG    Logical line: "from .file_scanner import FileScanner as VideoFileScanner"
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: "from ..models.file import UserFile as VideoFile"
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: "import builtins"
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: "FileScanner = VideoFileScanner"
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: "setattr(builtins, "xxxxxxxxx", VideoFile)"
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: "setattr(builtins, "xxxxxxxxxxx", FileScanner)"
flake8.checker            SpawnPoolWorker-38    400 DEBUG    Logical line: "__all__ = ["xxxxxxxxxxxxxxxx", "xxxxxxxxx", "xxxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-38    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    407 DEBUG    Logical line: "from .file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-38    407 DEBUG    Logical line: "from .duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-38    407 DEBUG    Logical line: "from .progress_reporter import ProgressReporter"
flake8.checker            SpawnPoolWorker-38    407 DEBUG    Logical line: "from .result_exporter import ResultExporter, DiskSpaceError"
flake8.checker            SpawnPoolWorker-38    407 DEBUG    Logical line: "from .video_file_scanner import VideoFileScanner"
flake8.checker            SpawnPoolWorker-38    409 DEBUG    Logical line: "__all__ = ["xxxxxxxxxxx", "xxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-38    411 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    411 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-38    413 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-38    415 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    415 DEBUG    Logical line: "VideoFile = UserFile"
flake8.checker            SpawnPoolWorker-38    415 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-38    415 DEBUG    Logical line: "def sample_video_files(request, tmp_path):"
flake8.checker            SpawnPoolWorker-38    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    417 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    417 DEBUG    Logical line: "files = []"
flake8.checker            SpawnPoolWorker-38    417 DEBUG    Logical line: "for i, suffix in enumerate(["xxxx", "xxxx", "xxxx"]):"
flake8.checker            SpawnPoolWorker-38    418 DEBUG    Logical line: "p = tmp_path / f"movie{i}{suffix}""
flake8.checker            SpawnPoolWorker-38    418 DEBUG    Logical line: "p.write_bytes(b"xxxx")"
flake8.checker            SpawnPoolWorker-38    418 DEBUG    Logical line: "files.append(UserFile(p))"
flake8.checker            SpawnPoolWorker-38    418 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    418 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    418 DEBUG    Logical line: "return files"
flake8.checker            SpawnPoolWorker-38    435 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    435 DEBUG    Logical line: "from typing import TYPE_CHECKING"
flake8.checker            SpawnPoolWorker-38    435 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-38    436 DEBUG    Logical line: "pytest.skip("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", allow_module_level=True, )"
flake8.checker            SpawnPoolWorker-38    436 DEBUG    Logical line: "if TYPE_CHECKING:"
flake8.checker            SpawnPoolWorker-38    436 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.checker            SpawnPoolWorker-38    436 DEBUG    Logical line: "from src.cli.main import cli"
flake8.checker            SpawnPoolWorker-38    436 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: "from src.cli.main import cli"
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: "class CliRunner:"
flake8.checker            SpawnPoolWorker-38    437 DEBUG    Logical line: "def invoke(self, *args, **kwargs):"
flake8.checker            SpawnPoolWorker-38    438 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-38    438 DEBUG    Logical line: "def cli(*args, **kwargs):"
flake8.checker            SpawnPoolWorker-38    438 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-38    439 DEBUG    Logical line: "class TestCLICloudStatusContract:"
flake8.checker            SpawnPoolWorker-38    439 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    439 DEBUG    Logical line: "def test_cli_has_cloud_status_flag(self):"
flake8.checker            SpawnPoolWorker-38    439 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    439 DEBUG    Logical line: "runner = CliRunner()"
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: "result = runner.invoke(cli, ["xxxxxx"])"
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: "assert ("xxxxxxxxxxxxxx" in result.output), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: "def test_cli_cloud_status_accepts_local_value(self):"
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: "runner = CliRunner()"
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: "result = runner.invoke(cli, ["xxxxxxxxx", "xxxxxxxxxxxxxx", "xxxxx"])"
flake8.checker            SpawnPoolWorker-38    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-38    442 DEBUG    Logical line: "assert ("xxxxxxxxxxxxxxxxx" not in result.output or "xxxxxxxxxxxx" not in result.output), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-38    442 DEBUG    Logical line: "def test_cli_cloud_status_accepts_cloud_only_value(self):"
flake8.checker            SpawnPoolWorker-38    442 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-39    387 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-38    442 DEBUG    Logical line: "runner = CliRunner()"
flake8.options.manager    SpawnPoolWorker-39    387 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8                    SpawnPoolWorker-46    176 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-39    395 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-38    450 DEBUG    Logical line: "result = runner.invoke(cli, ["xxxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxx"])"
flake8.options.manager    SpawnPoolWorker-39    395 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000024F9FB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-38    451 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-40    373 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-40    373 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-40    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-39    400 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000024F9FB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-39    400 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.checker            SpawnPoolWorker-38    455 DEBUG    Logical line: "assert ("xxxxxxxxxxxxxxxxx" not in result.output or "xxxxxxxxxxxx" not in result.output), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-40    373 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000237020709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
024F9FB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-40    379 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000237020709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-38    461 DEBUG    Logical line: "def test_cli_cloud_status_accepts_all_value(self):"
flake8.options.manager    SpawnPoolWorker-39    413 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000024F9FB809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-40    387 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000237020709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-40    387 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000237020709Aflake8.checker            SpawnPoolWorker-38    468 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-39    413 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matchinflake8.options.manager    SpawnPoolWorker-39    414 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-38    469 DEBUG    Logical line: "runner = CliRunner()"
flake8.options.manager    SpawnPoolWorker-41    368 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
g the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-39    416 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-41    369 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-40    390 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-38    471 DEBUG    Logical line: "result = runner.invoke(cli, ["xxxxxxxxx", "xxxxxxxxxxxxxx", "xxx"])"
flake8.options.manager    SpawnPoolWorker-40    390 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name usflake8.checker            SpawnPoolWorker-38    471 DEBUG    Logical lineflake8.checker            SpawnPoolWed when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-41    369 DEBUG    Registered option "Option(--color, default='auto'ed when reporting errors from code passed via stdin. This is useful for flake8.checker    flake8.options.manager    SpawnPoolWorker-39    417 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000024F9FB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-41    370 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-39    417 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000024F9FB809A0>, comma_separated_list=True, flake8.options.manager    SpawnPoolWorker-41    370 DEBUG    Registered option "Option(--count, actiflake8.ched when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-41    37ed when reporting errors from code passed via stdin. This is useful for editors pipflake8.options.manager    SpawnPoolWorker-39    417 DEBUG    Registered option "Option(--ignore, tyflake8.checker            SpawnPoolWorker-38    473 DEBUG    Logical line: ""
ed when reporting errors from code passed        SpawnPoolWorker-38    473 DEBUG    Logical line: ""
true', help='Print total number of errors to standard output after all other output.')".
        SpawnPoolWorker-38    flake8.options.manager    SpawnPoolWorker-39    420 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000024F9FB809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
473 DEBUG    Logical line: ""
ard output after all other output.')".
=True, normalize_paths=False), help='Comma-separated list of error codes to add to the li=True, normalize_paths=False), help='Comma-sard output after all473 DEBUG    Loeparated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
 other output.')".
flake8.options.manager    SpawnPoolWorker-39    428 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-41    381 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-38    484 DEBUG    Logical line: "assert ("xxxxxxxxxxxxxxxxx" not in result.output or "xxxxxxxxxxxx" not in result.output), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-41    383 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-39    430 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-38    485 DEBUG    Logical line: "def test_cli_cloud_status_rejects_invalid_value(self):"
flake8.options.manager    SpawnPoolWorker-39    431 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-41    384 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-41    384 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CF135809Aflake8.checker            SpawnPoolWorker-38    486 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-39    431 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-39    431 DEBUG    Registered option "Option(--indent-size, defaultflake8.checker            SpawnPoolWorker-38    486 DEBUG    Logic=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
al line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-41    385 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
al line: """"xxxxxxxxxxxxxxxxxxxxia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
=4, type=<class 'int'>, help='Number of spaces used fo=4, type=<class 'int'>, helia stdin. This is useful for editors piping the fial line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
ia stdin. This is useful al line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
--- Logging error ---
flake8                    SpawnPoolWorker-47    181 DEBUG    Added a None logging handler to logger root at flake8
=4, type=<class 'int'>, help='Number of spaces used for indentatiofor editors piping the file contents to flake8. (Default: %(default)s)')".
flake8                    SpawnPoolWorker-47    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-41    394 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-41    394 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-41    394 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-41    396 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-41    396 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-42    375 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-42    375 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-42    380 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-41    401 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-41    401 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-42    380 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-41    401 DEBUG    Registered option "Option(--max-doc-length, default=None, type=flake8.options.manager    SpawnPoolWorker-42    380 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
flake8                    SpawnPoolWorker-48    179 DEBUG    Added a None logging handler to logger root at flake8
<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-41    409 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-41    413 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-41    413 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-41    413 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-41    419 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-41    419 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-41    419 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-41    419 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-41    419 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-41    423 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-41    423 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-41    423 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-41    423 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-41    423 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-41    425 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-41    425 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-41    427 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-41    427 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-41    427 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-43    371 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-43    371 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-43    371 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-41    429 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-43    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-41    431 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-41    431 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flaflake8.options.manager    SpawnPoolWorker-43    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-43    373 DEBUG    Registered option "Option(--count, action='store_tflake8.options.manager    SpawnPoolWorker-41    431 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
"Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
--- Logging error ---
"Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CF135809A0>, comma_separat"Option(--include-in-doctest, default='', type=functools.partial(flake8                    SpawnPoolWorker-49    190 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-50    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-44    387 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-44    387 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-44    387 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-44    387 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-44    389 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-44    390 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000265549209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-44    391 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-44    392 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-44    392 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-44    392 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-44    392 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-44    392 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-44    392 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-44    392 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-44    392 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "from src.cli.main import main"
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-44    397 DEBUG    Logical line: "def test_cli_scan_exports_yaml(tmp_path):"
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: "fixture_dir = Path("xxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: "if not fixture_dir.exists():"
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: "fixture_dir = tmp_path / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: "fixture_dir.mkdir(parents=True, exist_ok=True)"
flake8.checker            SpawnPoolWorker-44    399 DEBUG    Logical line: "(fixture_dir / "xxxxxxxxxx").write_bytes(b"xx" * 1024)"
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "(fixture_dir / "xxxxxxxxxx").write_bytes(b"xx" * 2048)"
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "(fixture_dir / "xxxxxxxxx").write_text("xxxxxxx")"
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "runner = CliRunner()"
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "out_file = tmp_path / "xxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "result = runner.invoke(main, ["xxxx", str(fixture_dir), "xxxxxxxx", str(out_file)])"
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "assert (result.exit_code == 0), f"CLI failed: stdout={result.stdout} stderr={result.stderr}""
flake8.checker            SpawnPoolWorker-44    401 DEBUG    Logical line: "assert out_file.exists(), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    403 DEBUG    Logical line: "content = yaml.safe_load(out_file.read_text())"
flake8.checker            SpawnPoolWorker-44    403 DEBUG    Logical line: "assert isinstance(content, dict), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    403 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    403 DEBUG    Logical line: "assert any(k in content for k in ("xxxxxxxxxxxxx", "xxxx", "xxxxxxxxxxxxxxxx")), f"Export missing expected keys: got {list(content.keys())}""
flake8                    SpawnPoolWorker-51    172 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-44    412 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "from typing import TYPE_CHECKING"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "if TYPE_CHECKING:"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "from src.services.cloud_file_service import CloudFileService"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    414 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "from src.services.cloud_file_service import CloudFileService"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "class CloudFileService:"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "class CloudFileStatus:"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "class TestCloudFileServiceContract:"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: "def test_cloud_file_service_class_exists(self):"
flake8.checker            SpawnPoolWorker-44    416 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "assert CloudFileService is not None, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "assert hasattr(CloudFileService, "xxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "def test_cloud_file_service_get_file_status_method_exists(self):"
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "assert hasattr(CloudFileService, "xxxxxxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "def test_cloud_file_service_is_windows_only_method_exists(self):"
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "assert hasattr(CloudFileService, "xxxxxxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    418 DEBUG    Logical line: "def test_cloud_file_service_instantiation(self):"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "service = CloudFileService()"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "assert service is not None, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "pytest.fail(f"CloudFileService instantiation failed: {e}")"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "def test_get_file_status_returns_cloud_file_status(self):"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "service = CloudFileService()"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: "test_path = Path("xxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    420 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    422 DEBUG    Logical line: "result = service.get_file_status(test_path)"
flake8.checker            SpawnPoolWorker-44    422 DEBUG    Logical line: "assert isinstance(result, type(CloudFileStatus.LOCAL)), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    422 DEBUG    Logical line: "def test_get_file_status_accepts_pathlib_path(self):"
flake8.options.manager    SpawnPoolWorker-45    389 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-44    422 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-45    389 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-44    422 DEBUG    Logical line: "service = CloudFileService()"
flake8.options.manager    SpawnPoolWorker-45    389 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-45    389 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-44    422 DEBUG    Logical line: "test_path = Path("xxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-45    389 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-44    424 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-44    424 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-44    424 DEBUG    Logical line: "service.get_file_status(test_path)"
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    424 DEBUG    Logical line: "except TypeError as e:"
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    424 DEBUG    Logical line: "if "xxxx" in str(e).lower():"
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-45    391 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-44    425 DEBUG    Logical line: "pytest.fail("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    425 DEBUG    Logical line: "def test_get_file_status_accepts_string_path(self):"
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-44    425 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-44    425 DEBUG    Logical line: "service = CloudFileService()"
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-44    425 DEBUG    Logical line: "test_path = "xxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-45    392 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-44    425 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-44    426 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-44    426 DEBUG    Logical line: "service.get_file_status(test_path)"
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-44    426 DEBUG    Logical line: "except TypeError as e:"
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-44    426 DEBUG    Logical line: "if "xxxx" in str(e).lower():"
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-44    426 DEBUG    Logical line: "pytest.fail("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-44    426 DEBUG    Logical line: "def test_is_windows_only_returns_boolean(self):"
flake8.options.manager    SpawnPoolWorker-45    393 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-45    394 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-45    394 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-45    394 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002BB0AFC09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-45    394 DEBUG    Extending default select list with ['F']
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: "service = CloudFileService()"
flake8.options.manager    SpawnPoolWorker-45    394 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-45    394 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: "result = service.is_windows_only()"
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: "assert isinstance(result, bool), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: "def test_is_windows_only_returns_true_on_windows(self):"
flake8.options.config     SpawnPoolWorker-45    394 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-45    394 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-45    394 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.aggregator SpawnPoolWorker-45    394 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-45    394 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: "import platform"
flake8.options.aggregator SpawnPoolWorker-45    394 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-44    427 DEBUG    Logical line: "if platform.system() == "xxxxxxx":"
flake8.checker            SpawnPoolWorker-44    428 DEBUG    Logical line: "service = CloudFileService()"
flake8.checker            SpawnPoolWorker-44    428 DEBUG    Logical line: "result = service.is_windows_only()"
flake8.checker            SpawnPoolWorker-44    428 DEBUG    Logical line: "assert (result is True), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    428 DEBUG    Logical line: "def test_get_file_status_handles_nonexistent_files(self):"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "service = CloudFileService()"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "nonexistent_path = Path("xxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "result = service.get_file_status(nonexistent_path)"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "assert hasattr(CloudFileStatus, result.name), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "except FileNotFoundError:"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "pytest.fail("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: "def test_get_file_status_handles_permission_errors(self):"
flake8.checker            SpawnPoolWorker-44    429 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "service = CloudFileService()"
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "restricted_path = Path("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "result = service.get_file_status(restricted_path)"
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "if result is not None:"
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "assert hasattr(CloudFileStatus, result.name), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "except PermissionError:"
flake8.checker            SpawnPoolWorker-44    431 DEBUG    Logical line: "pytest.fail("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    433 DEBUG    Logical line: "def test_cloud_file_service_thread_safety_design(self):"
flake8.checker            SpawnPoolWorker-44    433 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    433 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    433 DEBUG    Logical line: "services = [CloudFileService() for _ in range(5)]"
flake8.checker            SpawnPoolWorker-44    433 DEBUG    Logical line: "assert (len(services) == 5), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    434 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    434 DEBUG    Logical line: "for service in services:"
flake8.checker            SpawnPoolWorker-44    434 DEBUG    Logical line: "assert (service is not None), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    403 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    404 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-45    404 DEBUG    Logical line: "from enum import Enum"
flake8.checker            SpawnPoolWorker-45    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    404 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-45    405 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-45    405 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-45    405 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    405 DEBUG    Logical line: "class CloudFileStatus(Enum):"
flake8.checker            SpawnPoolWorker-45    405 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-52    169 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-45    405 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: "class TestCloudFileStatusContract:"
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: "def test_cloud_file_status_enum_exists(self):"
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: "assert issubclass(CloudFileStatus, Enum), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: "def test_cloud_file_status_has_local_value(self):"
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    408 DEBUG    Logical line: "assert hasattr(CloudFileStatus, "xxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    408 DEBUG    Logical line: "assert CloudFileStatus.LOCAL.value == "xxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    408 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    408 DEBUG    Logical line: "def test_cloud_file_status_has_cloud_only_value(self):"
flake8.checker            SpawnPoolWorker-45    408 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    408 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    409 DEBUG    Logical line: "assert hasattr(CloudFileStatus, "xxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    409 DEBUG    Logical line: "assert (CloudFileStatus.CLOUD_ONLY.value == "xxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    409 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    410 DEBUG    Logical line: "def test_cloud_file_status_mvp_only_values(self):"
flake8.checker            SpawnPoolWorker-45    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    410 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    410 DEBUG    Logical line: "expected_values = {"xxxxx", "xxxxxxxxxx"}"
flake8.checker            SpawnPoolWorker-45    410 DEBUG    Logical line: "actual_values = {status.value for status in CloudFileStatus}"
flake8.checker            SpawnPoolWorker-45    411 DEBUG    Logical line: "assert (actual_values == expected_values), f"MVP CloudFileStatus must contain only {expected_values}, got {actual_values}""
flake8.checker            SpawnPoolWorker-45    411 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    411 DEBUG    Logical line: "def test_cloud_file_status_enum_string_representation(self):"
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "assert str(CloudFileStatus.LOCAL) == "xxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "assert str(CloudFileStatus.CLOUD_ONLY) == "xxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "def test_cloud_file_status_enum_equality(self):"
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: "if os.getenv("xxxxxxxxxxxxxxxxxxxxxx", "x") == "x":"
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "assert CloudFileStatus.LOCAL == CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: "pytest.skip("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", allow_module_level=True, )"
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "assert CloudFileStatus.CLOUD_ONLY == CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-45    412 DEBUG    Logical line: "assert CloudFileStatus.LOCAL != CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: "class TestDocumentationUpdateContract:"
flake8.checker            SpawnPoolWorker-44    445 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "def test_cloud_file_status_enum_hashable(self):"
flake8.checker            SpawnPoolWorker-44    448 DEBUG    Logical line: "def test_readme_mentions_onedrive_integration(self):"
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    448 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "status_set = {CloudFileStatus.LOCAL, CloudFileStatus.CLOUD_ONLY}"
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "assert len(status_set) == 2, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    448 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "status_dict = {CloudFileStatus.LOCAL: "xxxxxxxxxx", CloudFileStatus.CLOUD_ONLY: "xxxxxxxxxx", }"
flake8.checker            SpawnPoolWorker-44    448 DEBUG    Logical line: "assert readme_path.exists(), "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "assert len(status_dict) == 2, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    448 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.checker            SpawnPoolWorker-45    415 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "def test_cloud_file_status_iteration(self):"
flake8.checker            SpawnPoolWorker-44    450 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "statuses = list(CloudFileStatus)"
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "assert len(statuses) == 2, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    450 DEBUG    Logical line: "onedrive_keywords = ["xxxxxxxx", "xxxxxxxxxx", "xxxxxxxxxxxx", "xxxxxxxxxx", "xxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "assert CloudFileStatus.LOCAL in statuses, "xxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "assert CloudFileStatus.CLOUD_ONLY in statuses, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: "def test_cloud_file_status_value_access(self):"
flake8.checker            SpawnPoolWorker-44    450 DEBUG    Logical line: "assert any(keyword in content for keyword in onedrive_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: "def test_readme_documents_cloud_status_flag(self):"
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "assert CloudFileStatus("xxxxx") == CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "assert CloudFileStatus("xxxxxxxxxx") == CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "def test_cloud_file_status_invalid_value_raises_error(self):"
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "with pytest.raises(ValueError):"
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: "assert ("xxxxxxxxxxxxxx" in content), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "CloudFileStatus("xxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "with pytest.raises(ValueError):"
flake8.checker            SpawnPoolWorker-44    452 DEBUG    Logical line: "def test_readme_includes_cloud_status_examples(self):"
flake8.checker            SpawnPoolWorker-45    419 DEBUG    Logical line: "CloudFileStatus("xxxxxx")"
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: "def test_cloud_file_status_type_annotation_support(self):"
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx")"
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: "def test_function(status: CloudFileStatus) -> str:"
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: "example_patterns = ["xxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: "return status.value"
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: "result = test_function(CloudFileStatus.LOCAL)"
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: "assert any(pattern in content for pattern in example_patterns), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-45    421 DEBUG    Logical line: "assert result == "xxxxx""
flake8.checker            SpawnPoolWorker-44    454 DEBUG    Logical line: "def test_readme_explains_windows_requirement(self):"
flake8.checker            SpawnPoolWorker-44    456 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    456 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    456 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.options.manager    SpawnPoolWorker-46    365 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-46    366 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-46    366 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-44    458 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-46    366 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-46    366 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.options.manager    SpawnPoolWorker-46    366 DEBUG    Registered option "Option(--exclude, deflake8.checker            SpawnPoolWorker-44    458 DEBUG    Logical line: "windows_keywords = ["xxxxxxx", "xxxxxxxxxxxx", "xxxxxxxxxxxx", "xxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-44    458 DEBUG    Logical line: "windows_keywords = ["xxxxxxx", "xxxxxxxxxxxx", "xxxxxxxxxxxx", "xxxxxxxx", ]"
flake8.options.manager    SpawnPoolWorker-46    367 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
arated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
o the list of excluded ones.', metavar='patterns')".
o the list of excluded onesflake8.checker            SpawnPoolWorker-44    459 DEBUG    Logical line: "assert any(keyword in content for keyword in windows_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    459 DEBUG    Logical line: "assert any(keyword in content for keyword in windows_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
o the list of excluded ones.', metavar='patterns')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-44    461 DEBUG    Logical line: "def test_readme_documents_output_format_changes(self):"
flake8.checker            SpawnPoolWorker-44    461 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-53    179 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-44    464 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    464 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.checker            SpawnPoolWorker-44    464 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    464 DEBUG    Logical line: "output_keywords = ["xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxx", "xxxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-44    464 DEBUG    Logical line: "assert any(keyword in content for keyword in output_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    464 DEBUG    Logical line: "def test_help_documentation_exists(self):"
Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-44    466 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    466 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined
flake8.checker            SpawnPoolWorker-44    467 DEBUG    Logical line: ""

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-44    468 DEBUG    Logical line: ""
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5nflake8.checker            SpawnPoolWorker-44    468 DEBUG    Logical line: ""
2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 154 (should have been between 0 and 54)
Call stack:
flake8.checker            SpawnPoolWorker-44    468 DEBUG    Logical line: "help_requirements = ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-44    469 DEBUG    Logical line: "assert (len(help_requirements) == 3), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    469 DEBUG    Logical line: "def test_api_documentation_includes_cloud_status(self):"
flake8.checker            SpawnPoolWorker-44    469 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
flake8.checker            SpawnPoolWorker-44    471 DEBUG    Logical line: ""
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 50, in parse_args
    options.register_default_options(option_manager)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\main\options.py", line 176, in register_default_options
    add_option(
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 290, in add_option
    LOG.debug('Registered option "%s".', option)
flake8.checker            SpawnPoolWorker-44    471 DEBUG    Logical line: ""
Message: 'Registered option "%s".'
Arguments: (Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns'),)
flake8.checker            SpawnPoolWorker-44    472 DEBUG    Logical line: "api_fields = ["xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxx"]"
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-44    472 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-44    472 DEBUG    Logical line: "assert (len(api_fields) == 3), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-46    379 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-44    472 DEBUG    Logical line: "def test_changelog_mentions_onedrive_feature(self):"
flake8.options.manager    SpawnPoolWorker-46    381 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-44    474 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-46    381 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-46    381 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-44    474 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-46    382 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-46    382 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    474 DEBUG    Logical line: "possible_changelog_files = [Path("xxxxxxxxxxxx"), Path("xxxxxxxxxx"), Path("xxxxxxxxxx"), Path("xxxxxxxxxx"), ]"
flake8.options.manager    SpawnPoolWorker-46    382 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.bugbear            SpawnPoolWorker-45    441 INFO     Optional warning B903 not present in selected warnings: None. Not firing it at all.
flake8.bugbear            SpawnPoolWorker-45    443 INFO     Optional warning B905 not present in selected warnings: None. Not firing it at all.
flake8.options.manager    SpawnPoolWorker-46    383 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-46    383 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-44    476 DEBUG    Logical line: "changelog_exists = any(path.exists() for path in possible_changelog_files)"
flake8.options.manager    SpawnPoolWorker-46    383 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-46    383 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-44    476 DEBUG    Logical line: "if changelog_exists:"
flake8.options.manager    SpawnPoolWorker-46    383 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-46    383 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-44    476 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-46    389 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-44    481 DEBUG    Logical line: "for changelog_path in possible_changelog_files:"
flake8.options.manager    SpawnPoolWorker-46    389 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-44    481 DEBUG    Logical line: "if changelog_path.exists():"
flake8.options.manager    SpawnPoolWorker-46    389 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-46    389 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-44    481 DEBUG    Logical line: "content = changelog_path.read_text(encoding="xxxxx").lower()"
flake8.checker            SpawnPoolWorker-44    481 DEBUG    Logical line: "content = changelog_path.read_text(encoding="xxxxx").lower()"
flake8.options.manager    SpawnPoolWorker-46    392 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-46    392 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-46    392flake8.checker            SpawnPoolWorker-44    484 DEBUG    Logical line: "assert ("xxxxxxxx" in content or "xxxxx" in content), f"{changelog_path.name} must mention OneDrive integration feature""
flake8.checker            SpawnPoolWorker-45    452 DEBUG    Logical line: ""
 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-46    393 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.checker            SpawnPoolWorker-45    453 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-46    393 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-44    485 DEBUG    Logical line: "break"
flake8.checker            SpawnPoolWorker-45    454 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-45    454 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-46    394 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-44    486 DEBUG    Logical line: "else:"
flake8.options.manager    SpawnPoolWorker-46    394 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.checker            SpawnPoolWorker-45    454 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-46    394 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-44    486 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-46    394 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flaflake8.checker            SpawnPoolWorker-45    454 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-45    454 DEBUG    Logical line: "import tempfile"
flake8.options.manager    SpawnPoolWorker-46    396 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CFA67209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-46    396 DEBUG    Extending default select list with ['F']
flake8.checker     flake8.checker            SpawnPoolWorker-45    455 DEBUG    Logical line: "import shutil"
er-44    486 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-46    396 DEBUG    Extending default select list with ['F']
--- Logging error ---
er-44    486 DEBUG  flake8.checker            SpawnPoolWorker-45    455 DEBUG    Logical line: "import shutil"
--- Logging error ---
er-44    4--- Logging error ---
flake8.checker            SpawnPoolWorker-45    455 DEBUG86 DEBUG    Logical line: ""
    Logical line: "import shutil"
--- Logging error ---
flake8.checker            SpawnPoolWorker-44    489 DEBUG    Logical line: "raise AssertionError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    489 DEBUG    Logical line: "def test_contributing_guidelines_mention_windows_testing(self):"
flake8.checker            SpawnPoolWorker-44    489 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
      SpawnPoolWorker-44    489 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
      SpawnPoolWorker-44    489 DEBUG    Logical line: """"xx      SpawnPoolWorker-44    48Traceback (most recent call last):
Traceback (most re      SpawnPool      STraceback (most recent call last):
pawnPoolWorker-44    489 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.checker            SpawnPoolWorker-44    494 DEBUG    Logical line: "contributing_path = Path("xxxxxxxxxxxxxxx")"
OSError: raw write() returned invalid length 158 (should have been between 0 and 103)
Call stack:
flake8.checker            SpawnPoolWorker-44    496 DEBUG    Logical line: "if contributing_path.exists():"
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.checker            SpawnPoolWorker-44    498 DEBUG    Logical line: "content = contributing_path.read_text(encoding="xxxxx").lower()"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 51, in parse_args
    option_manager.register_plugins(plugins)
flake8.checker            SpawnPoolWorker-44    498 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-47    367 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-47    367 DEBUG    Registered option "Option(-q, --quiet, flake8.checker            SpawnPoolWorkaction='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
er-44    498 DEBUG    Logical line: ""
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 262, in register_plugins
    self.extend_default_select([loaded.entry_name])
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 309, in extend_default_select
    LOG.debug("Extending default select list with %r", error_codes)
flake8.options.manager    SpawnPoolWorker-47    369 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-44    502 DEBUG    Logical line: "testing_keywords = ["xxxxxxx", "xxxxxxx", "xxxxxxxx", "xxxxx"]"
flake8.options.manager    SpawnPoolWorker-47    369 DEBUG    Registered option "Option(--color, default='auto'  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-pating_keywords = ["xxxxxxx", "xxxxxxx", "xxxxxxxx", "xxxxx"]"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundationting_keywords = ["xxxxxxx", "xx%(default)s`.')".
flake8                    SpawnPoolWorker-54    183 DEBUG    Added a None logging handler to logger root at flake8
xxxxx", "xxxxxxxx", "xxxxx"]"
%(default)s`.')".
--- Logging error ---
Message: 'Extending default select list with %r'
Arguments: (['F'],)
flake8                    SpawnPoolWorker-54    183 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-46    412 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-46    412 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-44    504 DEBUG    Logical line: "assert any(keyword in content for keyword in testing_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.options.config     SpawnPoolWorker-46    412 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-44    504 DEBUG    Logical line: "else:"
flake8.options.config     SpawnPoolWorker-46    412 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.checker            SpawnPoolWorker-44    504 DEBUG    Logical line: ""
flake8.options.config     SpawnPoolWorker-46    415 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.checker            SpawnPoolWorker-44    507 DEBUG    Logical line: "raise AssertionError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.aggregator SpawnPoolWorker-46    415 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-46    415 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-46    415 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-44    508 DEBUG    Logical line: "def test_technical_documentation_explains_implementation(self):"
flake8.checker            SpawnPoolWorker-44    508 DEBUG    Logical line: "def test_technical_documentation_explains_implementation(self):"
flake8.checker            SpawnPoolWorker-44    508 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    508 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    508 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    508 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.checker            SpawnPoolWorker-44    509 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    509 DEBUG    Logical line: "technical_keywords = ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxx", "xxxxxx", "xxxxxxxxxxxxxxx", ]"
xxxxxxxx", "xxxxxx", "xxxxxxxxxxxxxxx", ]"
Traceback (most recent call last):
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 110 (should have been between 0 and 19)
Call stack:
flake8.checker            SpawnPoolWorker-44    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    510 DEBUG    Logical line: "has_technical_details = any(keyword in content for keyword in technical_keywords)"
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
flake8.checker            SpawnPoolWorker-44    512 DEBUG    Logical line: "if not has_technical_details:"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 50, in parse_args
    options.register_default_options(option_manager)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\main\options.py", line 150, in register_default_options
    add_option(
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 290, in add_option
    LOG.debug('Registered option "%s".', option)
flake8.checker            SpawnPoolWorker-44    514 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    514 DEBUG    Logical line: ""
Message: 'Registered option "%s".'
Arguments: (Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.'),)
flake8.options.manager    SpawnPoolWorker-47    383 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-44    516 DEBUG    Logical line: "raise AssertionError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-47    383 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-47    383 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.checker            SpawnPoolWorker-44    516 DEBUG    Logical line: "def test_error_handling_documentation(self):"
lake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-47    383 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-44    518 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-47    386 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-44    519 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-47    386 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-47    386 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-44    519 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.options.manager    SpawnPoolWorker-47    389 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-47    389 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    522 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    522 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-47    389 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-47    389 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-44    522 DEBUG    Logical line: "error_keywords = ["xxxxxxxxxxx", "xxxxxxxx", "xxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxx", ]"
or_keywords = ["xxxxxxxxxxx", "xxxxxxxx", "xxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxx", ]"
flake8.options.manager    SpawnPoolWorker-47    391 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-47    391 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-47    391 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-47    391 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    524 DEBUG    Logical line: "assert any(keyword in content for keyword in error_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-44    524 DEBUG    Logical line: "assert any(keyword in content for keyword in error_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-47    391 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-47    391 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_sepaflake8.checker            SpawnPoolWorker-44    524 DEBUG    Logical line: "def test_performance_impact_documentation(self):"
flake8.checker            SpawnPoolWorker-44    524 DEBUG    Logical line: "def test_performance_impact_documentation(self):"
flake8.options.manager    SpawnPoolWorker-47    393 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-47    393 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-44    526 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-44    526 DEBUG    Logical line: """flake8.options.manager    SpawnPoolWorker-47    393 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-47    393 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
--- Logging error ---
xxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-47    393 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-44    527 DEBUG    Logical line: "readme_path = Path("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-44    528 DEBUG    Logical line: "content = readme_path.read_text(encoding="xxxxx").lower()"
flake8.checker            SpawnPoolWorker-44    528 DEBUG    Logicalflake8.checker            SpawnPooTraceback (most recent call last):
Traceback (most recent call last):
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 189 (should have been between 0 and 179)
Call stack:
flake8.checker            SpawnPoolWorker-44    532 DEBUG    Logical line: ""
  File "<string>", line 1, in <module>
flake8.checker            SpawnPoolWorker-44    532 DEBUG    Logical line: "performance_keywords = ["xxxxxxxxxxx", "xxxxxxxx", "xxxxxx", "xxxxx", "xxxx", ]"
flake8.checker            SpawnPoolWorker-46    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-44    532 DEBUG    Logical line: "performance_keywords = ["xxxxxxxxxxx", "xxxxxxxx", "xxxxxx", "xxxxx", "xxxx", ]"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.checker            SpawnPoolWork  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfraflake8.checker            SpawnPoolWorker-44    534 DEBUG    Logical line: "assert any(keyword in content for keyword in performance_keywords), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-46    442 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 109, in worker
    initializer(*initargs)
flake8.checker            SpawnPoolWorker-46    444 DEBUG    Logical line: "import pytest"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 74, in _mp_init
    plugins, options = parse_args(argv)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\parse_args.py", line 50, in parse_args
    options.register_default_options(option_manager)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\main\options.py", line 334, in register_default_options
    add_option(
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\options\manager.py", line 290, in add_option
    LOG.debug('Registered option "%s".', option)
flake8.checker            SpawnPoolWorker-46    445 DEBUG    Logical line: "import yaml"
Message: 'Registered option "%s".'
Arguments: (Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source'),)
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: "import tempfile"
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: "import shutil"
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: "from src.cli.main import main"
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-46    447 DEBUG    Logical line: "class TestCLIExportContract:"
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-47    406 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-46    449 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-46    449 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-50    347 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-47    408 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-47    408 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-50    347 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-50    347 DEBUG    Registered option "Option(--color, default='auto'flake8.options.manager    SpawnPoolWorker-50    347 DEBflake8.options.manager    SpawnPoolWorker-47    408 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-46    449 DEBUG    Logical line: "def setup_method(self):"
flake8.checker            SpawnPoolWorker-46    449flake8.options.manager    SpawnPoolWorker-47    408  DEBUG    Logical line: "def setup_method(self):"
DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-50    347 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-46    449 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-50    347 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-46    449 DEBUG    Logical line: "self.runner = CliRunner()"
flake8.options.manager    SpawnPoolWorker-47    408 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-47    409 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-50    348 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-47    409 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-46    450 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
flake8.options.manager    SpawnPoolWorker-49    371 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-47    409 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001CDCE3909A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-50    348 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-49    371 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-46    450 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-47    409 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-47    409 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-49    371 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-50    348 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-46    451 DEBUG    Logical line: "self.test_video1 = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-48    390 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-48    390 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-47    410 DEBUG    Extending default select list with ['W']
flake8.options.manager    SpawnPoolWorker-49    372 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-50    349 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-46    451 DEBUG    Logical line: "self.test_video2 = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-46    451 DEBUG    Logicflake8.options.manager    SpawnPoolWorker-50    349 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quietflake8.options.manager    SpawnPoolWorker-49    372 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.config     SpawnPoolWorker-47    411 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoflake8.options.manager    SpawnPoolWorker-49    372 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.options.manager    SpawnPoolWorker-49    372 DEBUG    Registered option "Option(-olWorker-46    451 DEBUG    Logical line: "self.test_video2 = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.options.config     SpawnPoolWorker-47    411 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
(self.temp_dir) / "xxxxxxxxxx""
flake8.options.config     SpawnPoolWorker-47    411 DEBUG    Option "exflake8.options.manager    SpawnPoolWorker-50    350 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-49    373 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
-filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
clude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
clude" returned value: '.venv,venv,e-filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_pat-filename, default='*.py', type=functools.partial(<function _flake8_norclude" returned vaflake8.options.manager    SpawnPoolWorker-50    350 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-46    452 DEBUG    Logical line: "self.test_video1.touch()"
flake8.checker            SpawnPoolWorker-46    452lue: '.venv,venv,env,build,dist,__pycache__,backups'
malize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-50    350 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True,  DEBUG    Logical line: "self.test_video1.touch()"
flake8.options.config     SpawnPoolWorker-47    415 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.manager    SpawnPoolWorker-50    354 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.aggregator SpawnPoolWorker-47    415 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.manager    SpawnPoolWorker-49    377 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-46    456 DEBUG    Logical line: "self.test_video2.touch()"
flake8.options.aggregator SpawnPoolWorker-47    415 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.manager    SpawnPoolWorker-50    354 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-49    377 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-46    456 DEBUG    Logical line: "def teardown_method(self):"
flake8.checker            SpawnPoolWorker-44    548 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.aggregator SpawnPoolWorker-47    415 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.aggregator SpawnPoolWorker-47    415 DEBUG    Overriding default value of (None) for "extend_ignoreflake8.options.manager    SpawnPoolWorker-49    379 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-50    356 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-44    548 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.checker            SpawnPoolWorker-46    458 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-46    458 DEBflake8.options.manager    SpawnPoolWorker-50    356 DEBUG    Registered option "Option(--max-line-length, default=79, typflake8.options.manager    SpawnPoolWorker-49    379 DEBUG    Registered option "Option(--hang-closing, actiflake8.options.manager    SpawnPoolWorker-50    356 DEBUG   flake8.checker            Sflake8.options.manager    SpawnPoolWorker-49    379 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    550 DEBUG    Logical line: "import os"
 Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
pawnPoolWorker-46    458 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
pawnPoolWorker-46    458 DEBUG    Logicalools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-44    550 DEBUG    Logical line: "import os"
--- Logging error ---
 Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum Registered option "Option(--max-line-length,pawnPoolWorker-46   ools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list ofpawnPoolWoools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_s Registered option "Op line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
 line: """"xxxxxxxxxxools.partial(<function _flake8_normalize at 0x0000020F11E409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-50    360 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-50    360 DEBUG    Registered option "Option(--max-doc-length, default=None, type= line: """   360 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
   360 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='M"xxxxxxxxxxxxxxxxxxxxxxxxx""""
   360 DEBUG    Registered option "Option(--max-do"xxxxxxxxxxxxxxxc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
xxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-50    362 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-46    464 DEBUG    Logical line: "shutil.rmtree(self.temp_dir, ignore_errors=True)"
flake8.options.manager    SpawnPoolWorker-50    362 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-46    464 DEBUG    Logical line: "@pytest.mark.contract"
flake8.options.manager    SpawnPoolWorker-50    362 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001A41A8309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-46    464 DEBUG    Logical line: "def test_yaml_export_default_format(self):"
flake8.options.manager    SpawnPoolWorker-50    362 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-46    464 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-46    465 DEBUG    Logical line: "export_file = Path(self.temp_dir) / "xxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-46    465 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxxxx", str(export_file), self.temp_dir])"
flake8.checker            SpawnPoolWorker-46    465 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxxxx", str(export_file), self.temp_dir])"
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.bugbear            SpawnPoolWorker-47    425 INFO     Optional warning B903 not present in selected warnings: None. Not firing it at all.
flake8.checker            SpawnPoolWorker-46    465 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-50    363 DEBUG    Registered option "Option(--benchmark, flake8.bugbear            SpawnPoolWorker-47    425 INFO     Optional warflake8.checker            SpawnPoolWorker-46    465 DEBUG    Logical line: ""
--- Logging error ---
flake8.checker            SpawnPoolWorker-46    465flake8.options.manager    SpawnPoolWorker-50    36 DEBUG    Logical line: ""
--- Logging error ---
3 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-47    430 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "from typing import TYPE_CHECKING"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "if TYPE_CHECKING:"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "from src.services.result_exporter import ResultExporter"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "from src.models.scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-47    432 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-47    434 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    434 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    434 DEBUG    Logical line: "from src.services.result_exporter import ResultExporter"
flake8.checker            SpawnPoolWorker-47    434 DEBUG    Logical line: "from src.models.scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-47    434 DEBUG    Logical line: "from src.models.user_file import UserFile as VideoFile"
flake8.checker            SpawnPoolWorker-47    434 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "class ResultExporter:"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "class ScanResult:"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "class VideoFile:"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "def __init__(self, path):"
flake8.checker            SpawnPoolWorker-47    435 DEBUG    Logical line: "self.path = path"
flake8.checker            SpawnPoolWorker-47    436 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    436 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    436 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-47    436 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-47    436 DEBUG    Logical line: "class CloudFileStatus:"
flake8.checker            SpawnPoolWorker-47    436 DEBUG    Logical line: "LOCAL = "xxxxx""
flake8.checker            SpawnPoolWorker-47    437 DEBUG    Logical line: "CLOUD_ONLY = "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    437 DEBUG    Logical line: "class TestOutputFormatCloudStatusContract:"
flake8.checker            SpawnPoolWorker-47    437 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    437 DEBUG    Logical line: "def test_result_exporter_includes_cloud_status_in_yaml(self):"
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: "exporter = ResultExporter()"
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: "assert hasattr(exporter, "xxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    438 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    439 DEBUG    Logical line: "def test_result_exporter_includes_cloud_status_in_json(self):"
flake8.checker            SpawnPoolWorker-47    439 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    439 DEBUG    Logical line: "exporter = ResultExporter()"
flake8.checker            SpawnPoolWorker-47    439 DEBUG    Logical line: "assert hasattr(exporter, "xxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: "def test_video_file_yaml_serialization_includes_cloud_status(self):"
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: "video = UserFile(Path("xxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: "expected_cloud_attrs = ["xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: "for attr in expected_cloud_attrs:"
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: "assert hasattr(video, attr), f"VideoFile must have {attr} property for cloud status serialization""
flake8.checker            SpawnPoolWorker-47    440 DEBUG    Logical line: "def test_video_file_json_serialization_includes_cloud_status(self):"
flake8.checker            SpawnPoolWorker-47    442 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    442 DEBUG    Logical line: "video = UserFile(Path("xxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-47    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    442 DEBUG    Logical line: "expected_attrs = ["xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    442 DEBUG    Logical line: "for attr in expected_attrs:"
flake8.checker            SpawnPoolWorker-47    442 DEBUG    Logical line: "assert hasattr(video, attr), f"VideoFile must have {attr} for JSON serialization""
flake8.checker            SpawnPoolWorker-47    443 DEBUG    Logical line: "def test_scan_result_preserves_cloud_status_information(self):"
flake8.checker            SpawnPoolWorker-47    443 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    444 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    444 DEBUG    Logical line: "result = ScanResult()"
flake8.checker            SpawnPoolWorker-47    444 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    444 DEBUG    Logical line: "assert hasattr(result, "xxxxxxxxxxxxxxxx") or hasattr(result, "xxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    445 DEBUG    Logical line: "def test_yaml_output_format_cloud_status_schema(self):"
flake8.checker            SpawnPoolWorker-47    445 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    445 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    445 DEBUG    Logical line: "expected_cloud_fields = ["xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-47    445 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: "assert (len(expected_cloud_fields) == 3), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: "def test_json_output_format_cloud_status_schema(self):"
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: "expected_json_cloud_schema = {"xxxxxxxxxxxx": "xxxxxx", "xxxxxxxxxxxxx": "xxxxxxx", "xxxxxxxx": "xxxxxxx", }"
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: "assert (len(expected_json_cloud_schema) == 3), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: "def test_output_format_backward_compatibility(self):"
flake8.checker            SpawnPoolWorker-47    446 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: "exporter = ResultExporter()"
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: "assert hasattr(exporter, "xxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: "assert hasattr(exporter, "xxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: "def test_cloud_status_enum_serialization(self):"
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: "local_status = CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: "cloud_only_status = CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-47    448 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    450 DEBUG    Logical line: "assert str(local_status).lower() in ["xxxxx", "xxxxxxxxxxxxxxxxxxxxx", ], "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    450 DEBUG    Logical line: "assert str(cloud_only_status).lower() in ["xxxxxxxxxx", "xxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxx", ], "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    450 DEBUG    Logical line: "def test_output_format_handles_mixed_cloud_status(self):"
flake8.checker            SpawnPoolWorker-47    450 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    451 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    451 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    451 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    451 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    451 DEBUG    Logical line: "mixed_statuses = [CloudFileStatus.LOCAL, CloudFileStatus.CLOUD_ONLY]"
flake8.checker            SpawnPoolWorker-47    451 DEBUG    Logical line: "assert (len(mixed_statuses) == 2), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    452 DEBUG    Logical line: "def test_output_format_cloud_status_filtering_metadata(self):"
flake8.checker            SpawnPoolWorker-47    452 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    452 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    452 DEBUG    Logical line: "exporter = ResultExporter()"
flake8.checker            SpawnPoolWorker-47    453 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    453 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    453 DEBUG    Logical line: "assert hasattr(exporter, "xxxxxxxxxxx") or hasattr(exporter, "xxxxxxxxxxx"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    454 DEBUG    Logical line: "def test_yaml_output_cloud_status_human_readable(self):"
flake8.checker            SpawnPoolWorker-47    454 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    454 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    454 DEBUG    Logical line: "readable_values = ["xxxxx", "xxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    454 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    454 DEBUG    Logical line: "assert ("xxxxx" in readable_values), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    455 DEBUG    Logical line: "assert ("xxxxxxxxxx" in readable_values), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    455 DEBUG    Logical line: "def test_json_output_cloud_status_api_compatible(self):"
flake8.checker            SpawnPoolWorker-47    455 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    456 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    456 DEBUG    Logical line: "api_field_names = ["xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    456 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    456 DEBUG    Logical line: "for field in api_field_names:"
flake8.checker            SpawnPoolWorker-47    456 DEBUG    Logical line: "assert ("x" in field or field.islower()), f"JSON field {field} must be snake_case for API compatibility""
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-51    354 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-51    355 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000232F71B09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-51    356 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-51    358 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-51    358 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-51    358 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-51    358 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-51    358 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-51    358 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-55    170 DEBUG    Added a None logging handler to logger root at flake8
flake8.bugbear            SpawnPoolWorker-51    373 INFO     Optional warning B903 not present in selected warnings: None. Not firing it at all.
flake8.options.manager    SpawnPoolWorker-52    348 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-52    350 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000265418509A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-52    352 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-52    354 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-52    354 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-52    354 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-52    354 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-52    354 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-52    354 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-51    383 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    490 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    383 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    490 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-51    383 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-47    490 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-47    490 DEBUG    Logical line: "import json"
flake8.checker            SpawnPoolWorker-51    383 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-47    492 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-51    385 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-47    492 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-51    385 DEBUG    Logical line: "import shutil"
flake8.checker            SpawnPoolWorker-51    385 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    492 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-51    385 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    492 DEBUG    Logical line: "import shutil"
flake8.checker            SpawnPoolWorker-51    385 DEBUG    Logical line: "from src.services.video_file_scanner import VideoFileScanner"
flake8.checker            SpawnPoolWorker-47    492 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    493 DEBUG    Logical line: "from src.services.result_exporter import ResultExporter"
flake8.checker            SpawnPoolWorker-51    386 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.checker            SpawnPoolWorker-51    386 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-47    493 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-47    493 DEBUG    Logical line: "from src.models.duplicate_group import DuplicateGroup"
flake8.checker            SpawnPoolWorker-51    386 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    386 DEBUG    Logical line: "class VideoFileScanner:"
flake8.checker            SpawnPoolWorker-47    493 DEBUG    Logical line: "from src.models.potential_match_group import PotentialMatchGroup"
flake8.checker            SpawnPoolWorker-51    386 DEBUG    Logical line: "def scan_directory(self, directory, recursive=True):"
flake8.checker            SpawnPoolWorker-47    493 DEBUG    Logical line: "from src.models.scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-47    494 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-51    387 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    494 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    387 DEBUG    Logical line: "def validate_file(self, file_path):"
flake8.checker            SpawnPoolWorker-47    494 DEBUG    Logical line: "TEST_TIMEOUT = 30"
flake8.checker            SpawnPoolWorker-51    387 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    494 DEBUG    Logical line: "class TestResultExporterContract:"
flake8.checker            SpawnPoolWorker-51    387 DEBUG    Logical line: "class VideoFile:"
flake8.checker            SpawnPoolWorker-47    495 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-51    388 DEBUG    Logical line: "def __init__(self, path):"
flake8.checker            SpawnPoolWorker-52    359 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    495 DEBUG    Logical line: "def setup_method(self):"
flake8.checker            SpawnPoolWorker-51    388 DEBUG    Logical line: "self.path = path"
flake8.checker            SpawnPoolWorker-47    495 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    359 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "class UserFile:"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: "self.exporter = ResultExporter()"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "def __init__(self, path):"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "self.path = path"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: "self.scan_result = self.create_test_scan_result()"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "class CloudFileStatus:"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "class TestVideoFileScannerContract:"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: "def teardown_method(self):"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "LOCAL = "xxxxx""
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "CLOUD_ONLY = "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "def setup_method(self):"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "class TestUserFileCloudIntegrationContract:"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "def test_user_file_has_cloud_properties(self):"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "self.scanner = VideoFileScanner()"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "user = UserFile(Path("xxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-47    496 DEBUG    Logical line: "shutil.rmtree(self.temp_dir, ignore_errors=True)"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "self.create_test_files()"
flake8.checker            SpawnPoolWorker-52    360 DEBUG    Logical line: "assert hasattr(user, "xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-51    389 DEBUG    Logical line: "def teardown_method(self):"
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "assert hasattr(user, "xxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: "shutil.rmtree(self.temp_dir, ignore_errors=True)"
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "assert hasattr(user, "xxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: "def create_test_scan_result(self):"
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "def test_is_local_and_is_cloud_only_are_boolean(self):"
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: "def create_test_files(self):"
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "user = UserFile(Path("xxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "assert isinstance(user.is_local, bool)"
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: "(Path(self.temp_dir) / "xxxxxxxxxx").write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: "video1_path = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "assert isinstance(user.is_cloud_only, bool)"
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: "video2_path = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: "(Path(self.temp_dir) / "xxxxxxxxxx").write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "def test_cloud_status_enum_or_string(self):"
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: "video3_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: "(Path(self.temp_dir) / "xxxxxxxxxx").write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "user = UserFile(Path("xxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-47    498 DEBUG    Logical line: "video4_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-52    363 DEBUG    Logical line: "status = user.cloud_status"
flake8.checker            SpawnPoolWorker-51    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    365 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "(Path(self.temp_dir) / "xxxxxxxxxxxx").write_text("xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video1_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-52    365 DEBUG    Logical line: "assert (isinstance(status, str) or hasattr(status, "xxxx") or hasattr(status, "xxxxx"))"
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "(Path(self.temp_dir) / "xxxxxxxxx").write_bytes(b"xxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video2_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video3_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "subdir = Path(self.temp_dir) / "xxxxxx""
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video4_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "subdir.mkdir()"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video1 = UserFile(video1_path)"
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "(subdir / "xxxxxxxxxxxxxx").write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video1._size = 1500000"
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "(subdir / "xxxxxxxxxxxxxx").write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-52    365 DEBUG    Logical line: "def test_mutual_exclusivity_of_booleans(self):"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video1._hash = "xxxxxxx""
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    365 DEBUG    Logical line: "user = UserFile(Path("xxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video2 = UserFile(video2_path)"
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "deep_dir = subdir / "xxxx" / "xxxxxx""
flake8.checker            SpawnPoolWorker-47    500 DEBUG    Logical line: "video2._size = 1500000"
flake8.checker            SpawnPoolWorker-52    365 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    393 DEBUG    Logical line: "deep_dir.mkdir(parents=True)"
flake8.checker            SpawnPoolWorker-52    367 DEBUG    Logical line: "assert user.is_local != user.is_cloud_only"
flake8.checker            SpawnPoolWorker-47    502 DEBUG    Logical line: "video2._hash = "xxxxxxx""
flake8.checker            SpawnPoolWorker-47    504 DEBUG    Logical line: "video3 = UserFile(video3_path)"
flake8.checker            SpawnPoolWorker-52    369 DEBUG    Logical line: "def test_lazy_evaluation_and_caching(self):"
flake8.checker            SpawnPoolWorker-51    397 DEBUG    Logical line: "(deep_dir / "xxxxxxxxxxxxxx").write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    504 DEBUG    Logical line: "video3._size = 2000000"
flake8.checker            SpawnPoolWorker-52    369 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    504 DEBUG    Logical line: "video3._hash = "xxxxxxx""
flake8.checker            SpawnPoolWorker-51    397 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-52    369 DEBUG    Logical line: "user = UserFile(Path("xxxxxxxxxxxxxxxxxxxxxxxxx"))"
flake8.checker            SpawnPoolWorker-47    506 DEBUG    Logical line: "video4 = UserFile(video4_path)"
flake8.checker            SpawnPoolWorker-51    399 DEBUG    Logical line: "def test_scan_directory_returns_iterator(self):"
flake8.checker            SpawnPoolWorker-52    371 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    371 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    506 DEBUG    Logical line: "video4._size = 2000000"
flake8.checker            SpawnPoolWorker-51    399 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    371 DEBUG    Logical line: "_ = user.cloud_status"
flake8.checker            SpawnPoolWorker-47    506 DEBUG    Logical line: "video4._hash = "xxxxxxx""
flake8.checker            SpawnPoolWorker-51    399 DEBUG    Logical line: "result = self.scanner.scan_directory(Path(self.temp_dir))"
flake8.checker            SpawnPoolWorker-52    371 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-52    flake8.checker            SpawnPoolWorker-51    399 DEBUG    Logical371 DEBUG    Logical line: "except Exception:"
 line: "result = self.scanner.scan_directory(Path(self.temp_dir))"
flake8.checker            SpawnPoolWorker-52    371 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-51    399 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    506 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    372 DEBUG    Logical line: "assert hasattr(user, "xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-51    401 DEBUG    Logical line: "assert hasattr(result, "xxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    508 DEBUG    Logical line: "duplicate_group = DuplicateGroup("xxxxxxx", [video1, video2])"
flake8.checker            SpawnPoolWorker-51    401 DEBUG    Logical line: "assert hasattr(result, "xxxxxxxx")"
flake8.checker            SpawnPoolWorker-51    401 DEBUG    Logical line: "assert hasattr(result, "xxxxxxxx")"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    508 DEBUG    Logical lflake8.checker            SpawnPoolWorker-51    401 DEBUG    Logicalflake8.checker            SpawnPoolWorker-47    508 DEBUG    Logical line: "duplicate_group = DuplicateGroup("xxxxxxx", [video1, video2])"
flake8.checker            SpawnPoolWorker-47    509 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    509 DEBUG    Logical line: "potential_group = PotentialMatchGroup("xxxxxxxxxxxx", 0.95, [video3, video4])"
flake8.checker            SpawnPoolWorker-47    509 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    510 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)], recursive=True)"
flake8.checker            SpawnPoolWorker-47    510 DEBUG    Logical line: "result = ScanResult(metadata)"
flake8.checker            SpawnPoolWorker-47    510 DEBUG    Logical line: "result.duplicate_groups = [duplicate_group]"
flake8.options.manager    SpawnPoolWorker-53    360 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-53    360 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-47    510 DEBUG    Logical line: "result.potential_matches = [potential_group]"
flake8.options.manager    SpawnPoolWorker-53    360 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-47    511 DEBUG    Logical line: "return result"
flake8.options.manager    SpawnPoolWorker-53    361 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    511 DEBUG    Logical line: "@pytest.mark.contract"
flake8.options.manager    SpawnPoolWorker-53    361 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-53    361 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    511 DEBUG    Logical line: "def test_export_yaml_creates_valid_yaml(self):"
flake8                    SpawnPoolWorker-56    184 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-53    363 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-47    515 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-53    365 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-47    515 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-53    365 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-47    515 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-53    365 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    515 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, output_path)"
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-47    517 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    517 DEBUG    Logical line: "assert output_path.exists()"
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    517 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-53    367 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    519 DEBUG    Logical line: "with open(output_path, "x") as f:"
flake8.options.manager    SpawnPoolWorker-53    369 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-47    519 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.options.manager    SpawnPoolWorker-53    369 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-47    519 DEBUG    Logical line: "assert isinstance(data, dict)"
flake8.options.manager    SpawnPoolWorker-53    369 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-53    369 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-47    519 DEBUG    Logical line: "self.validate_export_schema(data)"
flake8.options.manager    SpawnPoolWorker-53    369 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-47    519 DEBUG    Logical line: "def validate_export_schema(self, data):"
flake8.options.manager    SpawnPoolWorker-53    373 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-47    523 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-53    373 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-53    373 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-47    523 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    523 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-53    374 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-47    524 DEBUG    Logical line: "assert "xxxxxxx" in data"
flake8.options.manager    SpawnPoolWorker-53    374 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-47    524 DEBUG    Logical line: "assert "xxxxxxxx" in data"
flake8.options.manager    SpawnPoolWorker-53    374 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-47    524 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    524 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxx" in data"
flake8.options.manager    SpawnPoolWorker-53    375 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-53    375 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-47    525 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in data"
flake8.options.manager    SpawnPoolWorker-53    375 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.checker            SpawnPoolWorker-47    525 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-53    375 DEBUG    Registered option "Option(--max-comflake8.checker            SpawnPoolWorker-47    525 DEBUG    Logical line: ""
--- Logging error ---
flake8.bugbear            SpawnPoolWorker-52    390 INFO     Optional warning B903 not present in selected warnings: None. Not firing it at all.
plexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.bugbear            SpawnPoolWorker-52    390 INFO     Optional warning B905 not present in selected warnings: None. Not firing it at all.
flake8.options.manager    SpawnPoolWorker-53    376 DEBUG    Extending default select list with ['C90']
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-53    376 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
OSError: raw write() returned invalid length 112 (should have been between 0 and 79)
Call stack:
flake8.options.manager    SpawnPoolWorker-53    377 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-53    377 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-53    377 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001622E9209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.options.manager    SpawnPoolWorker-53    377 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-53    377  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
 DEBUG    Extending default select list with ['F']
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-paflake8.options.manager    SpawnPoolWorker-53    377 DEBUG    Extending default select list with ['E']
ckages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 547, in handle_newline
    self.run_logical_checks()
flake8.options.manager    SpawnPoolWorker-53    378 DEBUG    Extending default select list with ['W']
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('',)
flake8.checker            SpawnPoolWorker-47    529 DEBUG    Logical line: "metadata = data["xxxxxxxx"]"
flake8.options.config     SpawnPoolWorker-53    378 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-53    381 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-53    381 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-53    381 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-47    531 DEBUG    Logical line: "assert "xxxxxxxxx" in metadata"
flake8.options.aggregator SpawnPoolWorker-53    381 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.checker            SpawnPoolWorker-47    531 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in metadata"
flake8.options.aggregator SpawnPoolWorker-53    381 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pyflake8.checker            SpawnPoolWorker-47    531 DEBUG flake8.options.aggregator SpawnPoolWorker-53    381 DEBUG    Overriflake8.checker            Spading default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
wnPoolWorker-47    531 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in metadata"
flake8.options.aggregator SpawnPoolWorker-53    383 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-47    533 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxx" in metadata"
flake8                    SpawnPoolWorker-57    170 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-52    402 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    539 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in metadata"
flake8.checker            SpawnPoolWorker-52    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    539 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxx" in metadata"
flake8.checker            SpawnPoolWorker-52    404 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-47    539 DEBUG    Logical line: "assert "xxxxxxxxx" in metadata"
flake8.checker            SpawnPoolWorker-52    404 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-47    539 DEBUG    Logical line: "@pytest.mark.contract"
flake8.options.manager    SpawnPoolWorker-54    357 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-54    358 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-54    358 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-47    544 DEBUG    Logical line: "def test_export_handles_unicode_characters_in_paths(self):"
flake8.checker            SpawnPoolWorker-52    408 DEBUG    Logical line: "import shutil"
flake8.options.manager    SpawnPoolWorker-54    358 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000013BD2FC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-54    358 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000013BD2FC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    544 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-52    408 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-54    358 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000013BD2FC09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    545 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-52    409 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-54    359 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-52    409 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    545 DEBUG    Logical line: "unicode_path = Path(self.temp_dir) / "xxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-54    359 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-52    409 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-47    545 DEBUG    Logical line: "emoji_path = Path(self.temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-52    409 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.options.manager    SpawnPoolWorker-54    359 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quietflake8.checker            SpawnPoolWorker-52    409 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-47    545 DEBUG    Logical line: "unicode_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    545 DEBUG    Loflake8.checker            SpawnPoolWorker-52    409 DEBUG    Logical l-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
--- Logging error ---
-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=flake8.checker            SpawneDetector"
eDetecflake8.checker -nothing) or a format string containing %%-style mapping keDe-nothing) or a format string flake8.flake8                    SpawnPoolWorker-58    174 DEBUG    Added a None logging handler to logger root at flake8
PoolWorker-47    545 DEBUG    Logical line: "unicode_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
  545 DEBUG    Logical line: "unicode_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
eDetector"
--- Logging error ---
flake8                    SpawnPoolWorker-58    174 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-47    560 DEBUG    Logical line: "emoji_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    560 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    560 DEBUG    Logical line: "unicode_video = UserFile(unicode_path)"
flake8.checker            SpawnPoolWorker-47    560 DEBUG    Logical line: "unicode_video._size = 1000"
flake8.checker            SpawnPoolWorker-47    561 DEBUG    Logical line: "unicode_video._hash = "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    561 DEBUG    Logical line: "emoji_video = UserFile(emoji_path)"
flake8.checker            SpawnPoolWorker-47    561 DEBUG    Logical line: "emoji_video._size = 1000"
flake8.checker            SpawnPoolWorker-47    561 DEBUG    Logical line: "emoji_video._hash = "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    561 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    561 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-47    562 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-47    562 DEBUG    Logical line: "result = ScanResult(metadata)"
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "result.duplicate_groups = [DuplicateGroup("xxxxxxxxxxxx", [unicode_video, emoji_video])]"
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "self.exporter.export_yaml(result, output_path)"
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "assert output_path.exists()"
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "with open(output_path, "x", encoding="xxxxx") as f:"
flake8.checker            SpawnPoolWorker-53    413 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "content = f.read()"
flake8.checker            SpawnPoolWorker-47    563 DEBUG    Logical line: "assert "xxxxxxxxxxxxxx" in content"
flake8.checker            SpawnPoolWorker-53    413 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    565 DEBUG    Logical line: "assert "xxxxxxxxxxx" in content"
flake8.checker            SpawnPoolWorker-47    565 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    415 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-47    565 DEBUG    Logical line: "def test_export_formats_file_sizes_human_readable(self):"
flake8.checker            SpawnPoolWorker-53    415 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-53    415 DEBUG    Logical line: "import shutil"
flake8.checker            SpawnPoolWorker-47    565 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    415 DEBUG    Logical line: "import subprocess"
flake8.checker            SpawnPoolWorker-47    565 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    415 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-47    565 DEBUG    Logical line: "small_path = Path(self.temp_dir) / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    415 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-53    416 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    566 DEBUG    Logical line: "medium_path = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    416 DEBUG    Logical line: "class TestCLIIntegration:"
flake8.checker            SpawnPoolWorker-47    567 DEBUG    Logical line: "large_path = Path(self.temp_dir) / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    416 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    567 DEBUG    Logical line: "small_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-53    416 DEBUG    Logical line: "@property"
flake8.checker            SpawnPoolWorker-47    567 DEBUG    Logical line: "medium_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-53    418 DEBUG    Logical line: "def workspace_dir(self):"
flake8.checker            SpawnPoolWorker-47    568 DEBUG    Logical line: "large_path.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-47    569 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    419 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    569 DEBUG    Logical line: "small_file = UserFile(small_path)"
flake8.checker            SpawnPoolWorker-53    419 DEBUG    Logical line: "return Path(__file__).parent.parent.parent"
flake8.checker            SpawnPoolWorker-47    569 DEBUG    Logical line: "small_file._size = 1024"
flake8.checker            SpawnPoolWorker-53    419 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-47    569 DEBUG    Logical line: "small_file._hash = "xxxxx""
flake8.checker            SpawnPoolWorker-47    569 DEBUG    Logical line: "small_file._hash = "xxxxx""
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "def temp_video_dir(self):"
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "medium_file = UserFile(medium_path)"
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "medium_file._size = 1048576"
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "medium_file._hash = "xxxxx""
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "temp_dir = Path(tempfile.mkdtemp())"
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "large_file = UserFile(large_path)"
flake8.checker            SpawnPoolWorker-47    571 DEBUath)"
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "video1 = temp_dir / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "large_file._size = 1073741824"
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "video2 = temp_dir / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "large_file._hash = "xxxxx""
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "video3 = temp_dir / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    571 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-53    421 DEBUG    Logical line: "video4 = temp_dir / "xxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    421 DEBUG  flake8.checker            SpawnPoolWorker-47    573 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-47    573 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-47    573 DEBUG    Logical line: "result = ScanResult(metadata)"
flake8.checker            SpawnPoolWorker-53    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    423 DEBUG    Logical line: "video1.write_bytes(b"xxxxxxxxxxxxxxx" * 100)"
flake8.checker            SpawnPoolWorker-47    573 DEBUG    Logical line: "result.duplicate_groups = [DuplicateGroup("xxxxx", [small_file, medium_file, large_file])]"
flake8.checker            SpawnPoolWorker-53    423 DEBUG    Logical line: "video2.write_bytes(b"xxxxxxxxxxxxxxx" * 100)"
flake8.checker            SpawnPoolWorker-47    573 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    423 DEBUG    Logical line: "video3.write_bytes(b"xxxxxxxxxxxxxxx" * 100)"
flake8.checker            SpawnPoolWorker-47    575 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    425 DEBUG    Logical line: "video4.write_bytes(b"xxxxxxxxxxxxxxx" * 100)"
flake8.checker            SpawnPoolWorker-47    575 DEBUG    Logical line: "self.exporter.export_yaml(result, output_path)"
flake8.checker            SpawnPoolWorker-53    425 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    425 DEBUG    Logical line: "subdir = temp_dir / "xxxxxx""
flake8.checker            SpawnPoolWorker-47    575 DEBUG    Logical line: "with open(output_path, "x") as f:"
flake8.checker            SpawnPoolWorker-53    425 DEBUG    Logical line: "subdir.mkdir()"
flake8.checker            SpawnPoolWorker-47    575 DEBUG    Logical line: "content = f.read()"
flake8.checker            SpawnPoolWorker-53    425 DEBUG    Logical line: "video5 = subdir / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    576 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    426 DEBUG    Logical line: "video5.write_bytes(b"xxxxxxxxxxxxxxx" * 100)"
flake8.checker            SpawnPoolWorker-47    576 DEBUG    Logical line: "size_units = ["x", "xx", "xx", "xx"]"
flake8.checker            SpawnPoolWorker-53    426 DEBUG    Logical line: "yield temp_dir"
flake8.checker            SpawnPoolWorker-53    426 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-47    576 DEBUG    Logical line: "assert any(unit in content for unit in size_units)"
flake8.checker            SpawnPoolWorker-53    426 DEBUG    Logical line: "shutil.rmtree(temp_dir)"
flake8.checker            SpawnPoolWorker-47    576 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    426 DEBUG    Logical line: "def test_cli_help_command(self):"
flake8.checker            SpawnPoolWorker-47    576 DEBUG    Logical line: "def test_export_uses_iso8601_timestamps(self):"
flake8.checker            SpawnPoolWorker-47    576 DEBUG    Logical line: "def test_export_uses_iso8601_timestamps(self):"
flake8.checker            SpawnPoolWorker-53    427 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    577 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    577 DEBUG    Logical line: "from datetime import datetime"
flake8.checker            SpawnPoolWorker-53    427 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    577 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-53    427 DEBUG    Logical line: "workspace_dir = Path(__file__).parent.parent.parent"
flake8.checker            SpawnPoolWorker-47    578 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    428 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxx"], capture_output=True, text=True, cwd=str(workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    578 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-47    578 DEBUG    Logical line: "metadata.start_time = datetime.now()"
flake8.checker            SpawnPoolWorker-53    428 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    578 DEBUG    Logical line: "result = ScanResult(metadata)"
flake8.checker            SpawnPoolWorker-47    578 DEBUG    Logical line: "result.duplicate_groups = []"
flake8.checker            SpawnPoolWorker-53    429 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.stdout"
flake8.checker            SpawnPoolWorker-47    579 DEBUG    Logical line: "result.potential_match_groups = []"
flake8.checker            SpawnPoolWorker-53    429 DEBUG    Logical line: "assert "xxxxxxxxxxx" in result.stdout"
flake8.checker            SpawnPoolWorker-47    582 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    431 DEBUG    Logical line: "assert "xxxxxxxx" in result.stdout"
flake8.checker            SpawnPoolWorker-47    582 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    431 DEBUG    Logical line: "def test_cli_version_check(self):"
flake8.checker            SpawnPoolWorker-47    582 DEBUG    Logical line: "self.exporter.export_yaml(result, output_path)"
flake8.checker            SpawnPoolWorker-53    431 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    433 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    584 DEBUG    Logical line: "with open(output_path, "x") as f:"
flake8.checker            SpawnPoolWorker-47    584 DEBUflake8.checker            SpawnPoolWorker-53    433 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxx"], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
G    Logical line: "with open(output_path, "x") as f:"
flake8.checker            SpawnPoolWorker-47    584 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-53    433 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    584 DEBUG    Logical line: "scan_date = data["xxxxxxxx"]["xxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-53    433 DEBUG    Logical line: "def test_cli_basic_scan(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    584 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    584 DEBUG    Logical line: "import re"
flake8.checker            SpawnPoolWorker-53    433 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    584 DEBUG    Logical line: "iso8601_pattern = r"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    586 DEBUG    Logical line: "assert re.match(iso8601_pattern, scan_date), f"Invalid ISO 8601 format: {scan_date}""
flake8.checker            SpawnPoolWorker-53    435 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", str(temp_video_dir)], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    586 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    586 DEBUG    Logical line: "def test_export_handles_permission_error(self):"
flake8.checker            SpawnPoolWorker-53    435 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    586 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    435 DEBUG    Logical line: "assert "xxxxxxxx" in result.stdout or "xxxxxxxxxxxx" in result.stdout"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    437 DEBUG    Logical line: "assert "xxxxxxxxx" in result.stdout.lower()"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    437 DEBUG    Logical line: "def test_cli_recursive_scan(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    437 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, output_path)"
flake8.checker            SpawnPoolWorker-53    437 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxxxxx", "xxxxxxxxx", str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: "assert output_path.exists()"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: "def test_export_handles_disk_space_error(self):"
flake8.checker            SpawnPoolWorker-53    437 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    588 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    437 DEBUG    Logical line: "assert "xxxxxxxx" in result.stdout or "xxxxxxxxxxxx" in result.stdout"
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    439 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    439 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    439 DEBUG    Logical line: "assert "xxxxxxxxxx" in result.stdout or "xxxxxx" in result.stdout"
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    440 DEBUG    Logical line: "def test_cli_yaml_export(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    440 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-53    440 DEBUG    Logical line: "output_file = temp_video_dir / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, output_path)"
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: "assert output_path.exists()"
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: "except Exception as e:"
flake8.checker            SpawnPoolWorker-53    440 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxx", str(output_file), str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    590 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    592 DEBUG    Logical line: "assert "xxxxxxxxxx" in str(e).lower() or "xxxxx" in str(e).lower()"
flake8.checker            SpawnPoolWorker-53    441 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    592 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    441 DEBUG    Logical line: "assert output_file.exists()"
flake8.checker            SpawnPoolWorker-47    592 DEBUG    Logical line: "def test_export_creates_parent_directories(self):"
flake8.checker            SpawnPoolWorker-53    441 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    592 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    441 DEBUG    Logical line: "with open(output_file, "x") as f:"
flake8.checker            SpawnPoolWorker-53    442 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    593 DEBUG    Logical line: "output_path = (Path(self.temp_dir) / "xxxx" / "xxxxxx" / "xxxx" / "xxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-53    442 DEBUG    Logical line: "assert "xxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    593 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    442 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    593 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    442 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    593 DEBUG    Logical line: "with pytest.raises(FileNotFoundError):"
flake8.checker            SpawnPoolWorker-53    442 DEBUG    Logical line: "assert isinstance(data["xxxxxxxx"], dict)"
flake8.checker            SpawnPoolWorker-47    593 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, output_path)"
flake8.checker            SpawnPoolWorker-53    443 DEBUG    Logical line: "assert isinstance(data["xxxxxxxxxxxxxxxx"], list)"
flake8.checker            SpawnPoolWorker-47    594 DEBUG    Logical line: "if __name__ == "xxxxxxxx":"
flake8.checker            SpawnPoolWorker-53    443 DEBUG    Logical line: "assert isinstance(data["xxxxxxxxxxxxxxxxx"], list)"
flake8.checker            SpawnPoolWorker-53    443 DEBUG    Logical line: "def test_cli_yaml_export(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    594 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    594 DEBUG    Logical line: "pytest.main([__file__, "xx", "xx", "xxxxxxxx"])"
flake8.checker            SpawnPoolWorker-53    443 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    443 DEBUG    Logical line: "output_file = temp_video_dir / "xxxxxxxxxxxx""
flake8                    SpawnPoolWorker-59    169 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-47    594 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    595 DEBUG    Logical line: "def test_format_text_output_returns_string(self):"
flake8.checker            SpawnPoolWorker-47    595 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    444 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxx", str(output_file), str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    595 DEBUG    Logical line: "result = self.exporter.format_text_output(self.scan_result)"
flake8.checker            SpawnPoolWorker-47    595 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "assert isinstance(result, str)"
flake8.checker            SpawnPoolWorker-53    445 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "assert len(result) > 0"
flake8.checker            SpawnPoolWorker-53    445 DEBUG    Logical line: "assert output_file.exists()"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "def test_format_text_output_includes_summary_statistics(self):"
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "with open(output_file, "x") as f:"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "result = self.exporter.format_text_output(self.scan_result)"
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "assert "xxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "assert "xxxxxxx" in result.lower() or "xxxxxxxxxx" in result.lower()"
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "assert "xxxxx" in result.lower()"
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "assert isinstance(data["xxxxxxxx"], dict)"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "assert isinstance(data["xxxxxxxxxxxxxxxx"], list)"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "assert any(char.isdigit() for char in result)"
flake8.checker            SpawnPoolWorker-53    446 DEBUG    Logical line: "assert isinstance(data["xxxxxxxxxxxxxxxxx"], list)"
flake8.checker            SpawnPoolWorker-47    596 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    448 DEBUG    Logical line: "def test_cli_duplicate_detection(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    598 DEBUG    Logical line: "def test_format_text_output_groups_duplicates_clearly(self):"
flake8.checker            SpawnPoolWorker-53    448 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    448 DEBUG    Logical line: "output_file = temp_video_dir / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    598 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    598 DEBUG    Logical line: "result = self.exporter.format_text_output(self.scan_result)"
flake8.checker            SpawnPoolWorker-47    598 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    448 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxx", str(output_file), str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    598 DEBUG    Logical line: "assert "xxxxxxxxx" in result.lower() or "xxxxx" in result.lower()"
flake8.checker            SpawnPoolWorker-47    601 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    601 DEBUG    Logical line: "assert any(str(file.path.name) in result for group in self.scan_result.duplicate_groups for file in group.files)"
flake8.checker            SpawnPoolWorker-53    451 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-53    451 DEBUG    Logical line: "with open(output_file, "x") as f:"
flake8.checker            SpawnPoolWorker-47    601 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    601 DEBUG    Logical line: "def test_format_text_output_shows_potential_space_savings(self):"
flake8.checker            SpawnPoolWorker-53    451 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    601 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    451 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    451 DEBUG    Logical line: "duplicate_groups = data["xxxxxxxxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    601 DEBUG    Logical line: "result = self.exporter.format_text_output(self.scan_result)"
flake8.checker            SpawnPoolWorker-53    452 DEBUG    Logical line: "assert len(duplicate_groups) >= 1"
flake8.checker            SpawnPoolWorker-47    602 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    452 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    602 DEBUG    Logical line: "savings_keywords = ["xxxxxxx", "xxxxxx", "xxxxx", "xxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-53    452 DEBUG    Logical line: "found_duplicate = False"
flake8.checker            SpawnPoolWorker-47    602 DEBUG    Logical line: "assert any(keyword in result.lower() for keyword in savings_keywords)"
flake8.checker            SpawnPoolWorker-53    452 DEBUG    Logical line: "for group in duplicate_groups:"
flake8.checker            SpawnPoolWorker-53    452 DEBUG    Logical line: "files = [f["xxxx"] for f in group["xxxxx"]]"
flake8.checker            SpawnPoolWorker-47    602 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    603 DEBUG    Logical line: "def test_format_text_output_lists_errors(self):"
flake8.checker            SpawnPoolWorker-53    453 DEBUG    Logical line: "if any("xxxxxxxxxx" in f for f in files) and any("xxxxxxxxxxxxxxx" in f for f in files):"
flake8.checker            SpawnPoolWorker-47    603 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    603 DEBUG    Logical line: "result = self.exporter.format_text_output(self.scan_result)"
flake8.checker            SpawnPoolWorker-53    453 DEBUG    Logical line: "found_duplicate = True"
flake8.checker            SpawnPoolWorker-53    453 DEBUG    Logical line: "found_duplicate = True"
flake8.checker            SpawnPoolWorker-53    454 DEBUG    Logical line: "assert len(group["xxxxx"]) == 2"
flake8.checker            SpawnPoolWorker-47    605 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    605 DEBUG    Logical line: "if self.scan_result.metadata.errors:"
flake8.checker            SpawnPoolWorker-53    454 DEBUG    Logical line: "break"
flake8.checker            SpawnPoolWorker-47    607 DEBUG    Logical line: "assert "xxxxx" in result.lower()"
flake8.checker            SpawnPoolWorker-53    456 DEBUG    Logical line: "assert found_duplicate, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    456 DEBUG    Logical line: "def test_cli_potential_matches(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    607 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    607 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    607 DEBUG    Logical line: "def test_format_text_output_human_readable_file_sizes(self):"
flake8.checker            SpawnPoolWorker-53    456 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    607 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    456 DEBUG    Logical line: "output_file = temp_video_dir / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    607 DEBUG    Logical line: "result = self.exporter.format_text_output(self.scan_result)"
flake8.checker            SpawnPoolWorker-47    609 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    458 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxx", str(output_file), str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    609 DEBUG    Logical line: "size_units = ["x", "xx", "xx", "xx", "xx"]"
 "xx", "xx", "xx"]"
flake8.checker            SpawnPoolWorker-53    458 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx "xx", "xxflake8.checker            SpawnPoolWorker-53    458 DEBUG    "xx", "xx", "xx"]"
flake8.checker            SpawnPoolWorker-47    611 DEBUG    Logical line: "assert any(unit in result for unit in size_units)"
flake8.checker            SpawnPoolWorker-47    611 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    460 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    612 DEBUG    Logical line: "def test_format_text_output_verbose_mode(self):"
flake8.checker            SpawnPoolWorker-53    462 DEBUG    Logical line: "with open(output_file, "x") as f:"
flake8.checker            SpawnPoolWorker-47    612 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    462 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    612 DEBUG    Logical line: "normal_result = self.exporter.format_text_output(self.scan_result, verbose=False)"
flake8.checker            SpawnPoolWorker-53    462 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    463 DEBUG    Logical line: "potential_matches = data["xxxxxxxxxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    613 DEBUG    Logical line: "verbose_result = self.exporter.format_text_output(self.scan_result, verbose=True)"
flake8.checker            SpawnPoolWorker-53    463 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    613 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    463 DEBUG    Logical line: "found_potential = False"
flake8.checker            SpawnPoolWorker-53    463 DEBUG    Logical line: "found_potential = False"
flake8.checker            SpawnPoolWorker-53    465 DEBUG    Logical line: "for group in potential_matches:"
flake8.checker            SpawnPoolWorker-47    615 DEBUG    Logical line: "assert len(verbose_result) >= len(normal_result)"
flake8.checker            SpawnPoolWorker-53    465 DEBUG    Logical line: "if "xxxxx" in group["xxxxxxxx"].lower():"
flake8.checker            SpawnPoolWorker-47    615 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    615 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    467 DEBUG    Logical line: "found_potential = True"
flake8.checker            SpawnPoolWorker-47    617 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    467 DEBUG    Logical line: "assert len(group["xxxxx"]) >= 1"
flake8.checker            SpawnPoolWorker-47    617 DEBUG    Logical line: "def test_export_creates_parent_directories(self):"
 >= 1"
flake8.checker            SpawnPoolWorker-47    617 DEBUG    Logical line: "def test_export_creates_parent_directories(self):"
flake8.checker            SpawnPoolWorker-53    471 DEBUG    Logical line: "break"
flake8.checker            SpawnPoolWorker-47    621 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    471 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    621 DEBUG    Logical line: "nested_path = Path(self.temp_dir) / "xxxx" / "xxxxxx" / "xxxx""
flake8.checker            SpawnPoolWorker-53    471 DEBUG    Logical line: ""
flake8                    SpawnPoolWorker-60    167 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-53    471 DEBUG    Logical line: "def test_cli_non_recursive_scan(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    621 DEBUG    Logical line: "output_path = nested_path / "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    471 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    621 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    473 DEBUG    Logical line: "output_file = temp_video_dir / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    623 DEBUG    Logical line: "assert not nested_path.exists()"
flake8.checker            SpawnPoolWorker-47    623 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    623 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, output_path)"
flake8.checker            SpawnPoolWorker-53    473 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxxxxxxxx", "xxxxxxxx", str(output_file), str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    623 DEBUG    Logical line: "assert output_path.exists()"
flake8.checker            SpawnPoolWorker-47    624 DEBUG    Logical line: "assert nested_path.is_dir()"
flake8.checker            SpawnPoolWorker-47    624 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    474 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    624 DEBUG    Logical line: "def test_export_overwrites_existing_file(self):"
flake8.checker            SpawnPoolWorker-47    624 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    474 DEBUG    Logical line: "with open(output_file, "x") as f:"
flake8.checker            SpawnPoolWorker-47    625 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    475 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    625 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    625 DEBUG    Logical line: "with open(output_path, "x") as f:"
flake8.checker            SpawnPoolWorker-53    475 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    475 DEBUG    Logical line: "all_files = []"
flake8.checker            SpawnPoolWorker-47    625 DEBUG    Logical line: "f.write("xxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-53    475 DEBUG    Logical line: "for group in data["xxxxxxxxxxxxxxxx"]:"
flake8.checker            SpawnPoolWorker-47    626 DEBUG    Logical line: "original_size = output_path.stat().st_size"
flake8.checker            SpawnPoolWorker-47    626 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    476 DEBUG    Logical line: "all_files.extend([f["xxxx"] for f in group["xxxxx"]])"
flake8.checker            SpawnPoolWorker-47    626 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, output_path)"
flake8.checker            SpawnPoolWorker-53    476 DEBUG    Logical line: "for group in data["xxxxxxxxxxxxxxxxx"]:"
flake8.checker            SpawnPoolWorker-47    626 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    476 DEBUG    Logical line: "all_files.extend([f["xxxx"] for f in group["xxxxx"]])"
flake8.checker            SpawnPoolWorker-47    626 DEBUG    Logical line: "new_size = output_path.stat().st_size"
flake8.checker            SpawnPoolWorker-47    626 DEBUG    Logical line: "assert new_size != original_size"
flake8.checker            SpawnPoolWorker-53    477 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    477 DEBUG    Logical line: "subdir_files = [f for f in all_files if "xxxxxx" in f or "xxxxxxxxxx" in f]"
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: "with open(output_path, "x") as f:"
flake8.checker            SpawnPoolWorker-53    477 DEBUG    Logical line: "assert (len(subdir_files) == 0), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: "assert "xxxxxxx" in data"
flake8.checker            SpawnPoolWorker-53    477 DEBUG    Logical line: "def test_cli_error_handling_nonexistent_directory(self):"
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-53    477 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: "def test_export_handles_empty_results(self):"
flake8.checker            SpawnPoolWorker-53    477 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxxxxxxxxxxxxxxxx"], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    627 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    629 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-53    478 DEBUG    Logical line: "assert result.returncode != 0"
flake8.checker            SpawnPoolWorker-47    629 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-53    478 DEBUG    Logical line: "assert "xxxxx" in result.stderr.lower() or "xxxxxxxxx" in result.stderr.lower()"
flake8.checker            SpawnPoolWorker-47    629 DEBUG    Logical line: "empty_result = ScanResult(metadata)"
flake8.checker            SpawnPoolWorker-47    629 DEBUG    Logical line: "empty_result.duplicate_groups = []"
flake8.checker            SpawnPoolWorker-53    478 DEBUG    Logical line: "def test_cli_progress_reporting(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    629 DEBUG    Logical line: "empty_result.potential_match_groups = []"
flake8.checker            SpawnPoolWorker-53    481 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    632 DEBUG    Logical line: "output_path = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    632 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    481 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", str(temp_video_dir)], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    632 DEBUG    Logical line: "self.exporter.export_yaml(empty_result, output_path)"
flake8.checker            SpawnPoolWorker-47    632 DEBUG    Logical line: "assert output_path.exists()"
flake8.checker            SpawnPoolWorker-53    481 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    632 DEBUG    Logical line: "with open(output_path, "x") as f:"
flake8.checker            SpawnPoolWorker-53    483 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    634 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    634 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    483 DEBUG    Logical line: "assert any(keyword in result.stdout.lower() for keyword in ["xxxxxxxx", "xxxxxxxxxx", "xxxxxxxxx", "xxxxx", "xxxxxxxxx", ])"
flake8.checker            SpawnPoolWorker-47    634 DEBUG    Logical line: "assert "xxxxxxx" in data"
flake8.checker            SpawnPoolWorker-47    634 DEBUG    Logical line: "assert data["xxxxxxx"]["xxxxxxxxxxxxxxxx"] == []"
flake8.checker            SpawnPoolWorker-53    483 DEBUG    Logical line: "def test_cli_colorized_output(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    634 DEBUG    Logical line: "assert data["xxxxxxx"]["xxxxxxxxxxxxxxxxx"] == []"
flake8.checker            SpawnPoolWorker-47    634 DEBUG    Logical line: "assert data["xxxxxxx"]["xxxxxxxxxxxxxxxxx"] == []"
flake8.checker            SpawnPoolWorker-53    483 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: "@pytest.mark.contract"
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: "def test_export_json_and_yaml_equivalent_content(self):"
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", str(temp_video_dir)], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: "json_path = Path(self.temp_dir) / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: "yaml_path = Path(self.temp_dir) / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: "assert len(result.stdout) > 0"
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: "self.exporter.export_json(self.scan_result, json_path)"
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: "def test_cli_metadata_generation(self, temp_video_dir):"
flake8.checker            SpawnPoolWorker-47    636 DEBUG    Logical line: "self.exporter.export_yaml(self.scan_result, yaml_path)"
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    485 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-53    487 DEBUG    Logical line: "output_file = temp_video_dir / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    638 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    638 DEBUG    Logical line: "with open(json_path, "x") as f:"
flake8.checker            SpawnPoolWorker-47    638 DEBUG    Logical line: "json_data = json.load(f)"
flake8.checker            SpawnPoolWorker-53    487 DEBUG    Logical line: "result = subprocess.run(["xxxxxx", "xx", "xxx", "xxxxxxxx", str(output_file), str(temp_video_dir), ], capture_output=True, text=True, cwd=str(self.workspace_dir), )"
flake8.checker            SpawnPoolWorker-47    638 DEBUG    Logical line: "with open(yaml_path, "x") as f:"
flake8.checker            SpawnPoolWorker-53    487 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    638 DEBflake8.checker            SpawnPoolWorker-53    487 DEflake8.checker            Sflake8.checker            Sflake8.checker            SpawnPoolWorker-53    487 DEBUG    Logical line: "assert result.returncode == 0"
flake8.checker            SpawnPoolWorker-47    643 DEBUG    Logical line: "yaml_data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-53    493 DEBUG    Logical line: "with open(output_file, "x") as f:"
flake8.checker            SpawnPoolWorker-47    644 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-53    494 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-47    644 DEBUG    Logical line: "assert json_data["xxxxxxx"] == yaml_data["xxxxxxx"]"
flake8.checker            SpawnPoolWorker-53    494 DEBUG    Logical line: "metadata = data["xxxxxxxx"]"
flake8.checker            SpawnPoolWorker-47    644 DEBUG    Logical line: "assert (json_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])"
flake8.checker            SpawnPoolWorker-47    644 DEBUG    Logical line: "assert (jsonflake8.checker            SpawnPoolWorker-53    494 DEBUG    Logical line: "metadata = data["xxxxxxxx"]"
--- Logging error ---
flake8.checker            SpawnPoolWorker-53    494 DEBUG    LogUG    Logical line: "assert (json_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])"
flake8.options.manager    SpawnPoolWorker-55    349 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPflake8.options.manager    SpawnPoolWorker-55    349 DEBUG    Registered option "Option(-q, --quiet, UG    Logical line: "assert (json_data["xxxxxxxx"]["xxxxxxxxUG    Logical line: "assert (jflake8.options.manager    SpawnPoolWorker-55    34flake8.options.manager    (json_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])"
action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
 (json_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])"
--- Logging error ---
 (json_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"] == yaml_data[action='count', default=0, help='Report only file xxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])"
--- Logging error ---
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-55    362 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-55    362 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
OSError: raw write() returned invalid length 121 (should have been between 0 and 94)
Call stack:
flake8.options.manager    SpawnPoolWorker-55    363 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-55    363 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
  File "<string>", line 1, in <module>
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.options.manager    SpawnPoolWorker-55    364 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8.options.manager    SpawnPoolWorker-55    365 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8                    SpawnPoolWorker-61    186 DEBUG    Added a None logging handler to logger root at flake8
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('assert (json_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])',)
Message: 'Logical line: "%s"'
Arguments: ('assert (json_data["xxxxxxxx"]flake8.options.manager    SpawnPoolWorker-55    369 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
["xxxxxxxxxxxxxxxxx"] == yaml_data["xxxxxxxx"]["xxxxxxxxxxxxxxxxx"])',)
flake8.options.manager    SpawnPoolWorker-55    371 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-55    371 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    673 DEBUG    Logical line: "assert len(json_data["xxxxxxx"]["xxxxxxxxxxxxxxxx"]) == len(yaml_data["xxxxxxx"]["xxxxxxxxxxxxxxxx"])"
flake8.options.manager    SpawnPoolWorker-55    377 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-55    377 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-47    673 DEBUG    Logical line: "if __name__ == "xxxxxxxx":"
flake8.options.manager    SpawnPoolWorker-55    379 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    675 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-55    379 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-55    381 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    677 DEBUG    Logical line: "pytest.main([__file__, "xx", "xx", "xxxxxxxx"])"
flake8.checker            SpawnPoolWorker-47    677 DEBUG    Logical line: "pytest.main([__file__, "xx", "xx", "xxxxxxxx"])"
flake8.options.manager    SpawnPoolWorker-55    385 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-55    387 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    685 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-55    387 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_sepaflake8.checker     flake8.options.manager    SpawnPoolWorker-55    387 DEBUG    Registered option "Option(--extenflake8.options.manager    SpawnPoolWorker-55   flake8.checker            SpawnPoolWorker-47    685 DEBUG    Logical line: ""
--- Logging error ---
flake8                    SpawnPoolWorker-62    175 DEBUG    Added a None logging handler to logger root at flake8
 387 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
Traceback (most recent call last):
Traceback (most re 387 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
cent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 126 (should have been between 0 and 79)
Call stack:
flake8.options.manager    SpawnPoolWorker-55    391 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-55    391 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
  File "<string>", line 1, in <module>
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.options.manager    SpawnPoolWorker-55    391 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
honSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.options.manager    SpawnPoolWorker-55    391 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.options.manager    SpawnPoolWorker-55    395 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 547, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('',)
flake8.options.manager    SpawnPoolWorker-55    396 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-47    693 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-55    397 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-55    397 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-47    694 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.options.manager    SpawnPoolWorker-55    397 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-55    397 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-47    694 DEBUG    Logical line: "def test_cloud_file_detection_presence():"
flake8.options.manager    SpawnPoolWorker-55    397 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-55    398 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-47    695 DEBUG    Logical line: "assert CloudFileStatus.LOCAL is not None"
flake8.options.manager    SpawnPoolWorker-56    367 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-55    399 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-56    368 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-55    399 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-56    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-56    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-55    407 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-56    377 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BBC44F09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-55    407 DEBUG    Extending default select list with ['C90']
flake8_normalize at 0x000001BBC44F09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-55    407 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-56    383 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001BBC44F09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-55    414 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-56    383 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001BBC44F09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-56    383 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001BBC44F09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-55    415 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-56    384 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-55    415 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-55    415 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flaflake8.options.manager    SpawnPoolWorker-56    384 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
--- Logging error ---
flake8                    SpawnPoolWorker-63    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-47    717 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-56    384 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when repoflake8.options.manager    SpawnPoolWorker-55    415 DEBUG    Registered option flake8.checker            SpawnPoolWorkflake8                    SpawnPoolWorker-63    181 DEBUG flake8.checker     flake8.options.manager    SpawnPoolWorker-56    384 DEBUG    Registered optioflake8.options.manager    SpawnPoolWorke8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.chflake8                    Spa   Added a None logging handler to logger root at flake8
ecker            SpawnPoolWorker-47    717 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-55    425 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002134CCA09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-47    721 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-55    431 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-55    432 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-55    432 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-47    729 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-47    729 DEBUG    Logical line: "from pathlib import Path"
flake8.options.config     SpawnPoolWorker-55    433 DEBUG    Option "max-line-length" returned value: 242
flake8.options.manager    SpawnPoolWorker-57    367 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.config     SpawnPoolWorker-55    441 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-55    441 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.manager    SpawnPoolWorker-57    371 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.aggregator SpawnPoolWorker-55    441 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-47    738 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.options.aggregator SpawnPoolWorker-55    441 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.manager    SpawnPoolWorker-57    371 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8                    SpawnPoolWorker-64    182 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.aggregator SpawnPoolWorker-55    447 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-57    377 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    744 DEBUG    Logical line: "from unittest.mock import patch"
flake8.checker            SpawnPoolWorker-55    454 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-57    388 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    755 DEBUG    Logical line: "from src.cli.main import main"
flake8.checker            SpawnPoolWorker-55    459 DEBUG    Logical line: "import time"
flake8.options.manager    SpawnPoolWorker-57    388 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    756 DEBUG    Logical line: "from src.lib.config_manager import ConfigManager"
flake8.options.manager    SpawnPoolWorker-57    389 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-55    461 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-47    758 DEBUG    Logical line: "class TestConfigCLI:"
flake8.options.manager    SpawnPoolWorker-57    390 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-47    758 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-55    461 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.options.manager    SpawnPoolWorker-57    390 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-47    758 DEBUG    Logical line: "def setup_method(self):"
flake8.checker            SpawnPoolWorker-55    461 DEBUG    Logical line: "from src.cli.main import main"
flake8.options.manager    SpawnPoolWorker-57    390 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    759 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    759 DEBUG    flake8.options.manager    SpawnPoolWorker-57    390 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-57    396 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-55    467 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-55    467Logical line: """"xxxxxxxxxxxxxflake8.options.manager    SpawnPoolWorker-57    396 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001CCB60309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
--- Logging error ---
flake8.checker           Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxflake8.checkflake8Logical line: """"xxxflake8.options.manager    SpawnPoolWorker-58    386 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flaflake8.options.manager    SpawnPoolWorker-58    386 DEBUG    Registered option "Option(-q, --quiet, flake8.options.manager    SpawnPoolWorker-58    38Logical lifflake8.options.manager   --- Logging error ---
flake8.optioflake8.checker            SpawnPoolWorker-55    475 DEBUG    Logical line: "def test_cross_scan_duplicate_detection(tmp_path):"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    772 DEBUG    Logical line: "self.runner = CliRunner()"
 SpawnPoolWorker-55    475 DEBUG    Logical line: "def test_cross_scan_duplicate_detection(tmp_path):"
--- Logging error ---
flake8.checker            SpawnPoolWorkeflake8--- Logging error ---
flake8.c SpawnPoolWorker-55    475 DEBUG    Logical line: "d SpawnPoolWorker-55    475--- Logging err SpawnPoolWorogical line: "self.runner = CliRunner()"
 Spawnrker-55    475 DEBUG    Logical line: "def test_cross_scan_duplicate_detection(tmp_path):"
5    475 DEBUG    Logical line: "def test_cross_scan_duplicate_detection(tmp_path):"
5    475 DEBUG    Logical line: "def test_c  475 DEBUG    Logical line: "def test_cross_scan_duplicate_detection(tmp_path):"
  475 DEBUG    Logical line: "def test_cr  475 DEBUG    Logic 475 DEBUG    Logical line: "def test_cross_scan_duplicate_detection(tmp_path):"
 475 DEBUG    Logical line: "def test_croflake8.checker            SpawnPoolWorker-47    774 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
   SpawnPoolWorker-47    774 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
 475 DEBUG    Logica   SpawnPoolWorker-47    774 DEBUG    Logical   SpawnPoolWorker-47    774 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
--- Logging error ---
   SpawnPoolWorker-47    774 DEBUG    Logical line: "seldir = tempfile.mkdtemp()"
--- Logging error ---
dir = tempfile.mkdtemp()"dir = tempfiLogging error ---
--
--
flake8.checker            SpawnPoolWorker-47    774 DEBUG    Logical line: "self.config_path = Path(self.temp_dir) / "xxxxxxxxxxx""
-47    774 DEBUG    Logical line: "self.config_path = Path(self.temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-47    778 DEBUG    Logical line: "def test_config_show_default(self):"
flake8.checker            SpawnPoolWorker-47    778 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    778 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
flake8.checker            SpawnPoolWorker-47    779 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxxx"])"
flake8.checker            SpawnPoolWorker-47    779 DEBUG    Logical line: "assert result.exit_code == 0"
flake8                    SpawnPoolWorker-65    191 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-47    790 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxx" in result.output"
flake8.checker            SpawnPoolWorker-47    790 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.checker            SpawnPoolWorker-47    792 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.checker            SpawnPoolWorker-47    792 DEBUG    Logical line: "assert "xxxxxxxxxxxxxx" in result.output"
flake8.checker            SpawnPoolWorker-47    792 DEBUG    Logical line: "def test_config_show_yaml_format(self):"
flake8.checker            SpawnPoolWorker-47    792 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    793 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
flake8.checker            SpawnPoolWorker-47    793 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxxx", "xxxxxxxx", "xxxx"])"
flake8.options.manager    SpawnPoolWorker-59    368 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-47    793 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.options.manager    SpawnPoolWorker-59    368 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-59    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-47    793 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-59    369 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    794 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-59    369 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-59    369 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    794 DEBUG    Logical line: "def test_config_set_valid_values(self):"
flake8.checker            SpawnPoolWorker-47    794 DEBUG    Logical line: "def test_config_set_valid_values(self):"
flake8.options.manager    SpawnPoolWorker-59    369 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-59    369 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-47    794 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-59    369 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quietx""""
-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-59    370 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-47    795 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
flake8.options.manager    SpawnPoolWorker-59    370 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8                    SpawnPoolWorker-66    185 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-59    372 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-59    372 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-47    796 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-59    372 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationsflake8.checker     flake8.options.manager    SpawnPoolWorker-59    372 DEBUG    Registered option "Option(--per-file-flake8.chflake8.options.manager    SpawnPoolWorker-59    372 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
72 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particulecker            SpawnPoolWorker-47    796 DEBUG    Logical line: ""
ecker            SpawnPoolWorker-47    796 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-59    374 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-59    374 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    798 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxxxxx", "xxx"])"
flake8.options.manager    SpawnPoolWorker-59    374 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
tion (Default: %(default)s)', metavar='n')".
ine: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxxxxx", "xxx"])"
flake8.options.manager    SpawnPoolWorker-59    376 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-59    376 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002948A4309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    800 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.options.manager    SpawnPoolWorker-59    378 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-47    802 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-59    378 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-59    378 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-59    380 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-47    804 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-47    804 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-59    380 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-47    804 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxxx"])"
flake8.options.manager    SpawnPoolWorker-59    380 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-59    380 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-47    806 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxx" in result.output"
ert "xxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-59    380 DEBUG    Registered option "Option(ert "xxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-59    384 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-47    808 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-59    384 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-59    384 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
ist with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-47    808 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxx"])"
flake8.checker            SpawnPoolWorker-47    808 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxx"])"
ist with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    809 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.checker            SpawnPoolWorker-47    810 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.checker            SpawnPoolWorker-47    810 DEBUG    Logical line: "def test_config_set_invalid_key(self):"
flake8.checker            SpawnPoolWorker-47    810 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-47    810 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 155 (should have been between 0 and 124)
Call stack:
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.manager    SpawnPoolWorker-60    366 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.options.manager    SpawnPoolWorker-60    367 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-60    367 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python3flake8.options.manager    SpawnPoolWorker-60    369 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
12\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""',)
flake8.options.manager    SpawnPoolWorker-60    370 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    824 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
flake8.checker            SpawnPoolWorker-47    824 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
flake8.options.manager    SpawnPoolWorker-60    371 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-60    371 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    825 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxx", "xxxxx"])"
flake8.options.manager    SpawnPoolWorker-60    371 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000022F612B09Aflake8.checker            SpawnPoolWorker-47    825 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-60    371 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 163 (should have been between 0 and 155)
Call stack:
flake8.options.manager    SpawnPoolWorker-60    374 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-60    374 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet  File "<string>", line 1, in <module>
-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.manager    SpawnPoolWorker-60    374 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8                    SpawnPoolWorker-67    185 DEBUG    Added a None logging handler to logger root at flake8
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCaflake8.options.manager    SpawnPoolWorker-60    378 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
che\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8.options.manager    SpawnPoolWorker-60    380 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxx", "xxxxx"])',)
flake8.options.manager    SpawnPoolWorker-60    380 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-60    381 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-60    381 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-60    381 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    835 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.checker            SpawnPoolWorker-47    835 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager    SpawnPoolWorker-60    382 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-60    382 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    836 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
xxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-60    382 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-60    383 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-60    383 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-47    837 DEBUG    Logical line: "assert "xxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-60    383 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-60    383 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-60    384 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-60    384 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-47    838 DEBUG    Logical line: "def test_config_set_invalid_threshold(self):"
flake8.options.manager    SpawnPoolWorker-60    384 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
 subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-47    838 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-68    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-60    387 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-60    388 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-47    842 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
flake8.options.manager    SpawnPoolWorker-60    390 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-60    390 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-60    390 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-47    844 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-60    390 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-47    844 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxxxxx", "xxx"])"
flake8.options.manager    SpawnPoolWorker-60    391 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-60    391 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-60    391 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-60    391 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-47    845 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-60    391 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flakflake8.checker     flake8.options.manager    SpawnPoolWorker-60    391 DEBUG    Registeflake8.options.manager    SpawnPoolWorker-61    383 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
red option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
       SpawnPoolWorker-47    845 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-61    383 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-60    407 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.checker            SpawnPoolWorker-47    861 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager    SpawnPoolWorker-60    407 DEBUG    Registered option "Option(--dflake8.checker            SpawnPoolWorker-47    861 DEBUoctests, action='store_true', default=False, help='also check syntax of the doctests')".
G    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager    SpawnPoolWorker-60    411 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-61    388 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-60    411 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000022F612B09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
000022F612B09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-61    388 DEBUG    Registered option "Option(--count, actiflake8.options.manager    SpawnPoolWorker-61    38000022F612B09A0>, comma_separated_list=True, normalize_paths=True), dest=flake8.checker            SpawnPoolWorker-47    865 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
000022F612B09A0>, comma_separated_liflake8.checker            SpawnPoolWorker-47    865 DEBUG    Logicflake8.checker            SpawnPo000022F612B09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
--- Logging error ---
000022F612B09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_froflake8.checker  000022F612B09A0>, comma_separated_list=Truflake8.c000022F612B09A0>, comflake8.options.manager    SpawnPoolWorker-61    390 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
hecker            SpawnPoolWorker-47    865 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-61    394 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-47    871 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-61    399 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-61    399 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-47    876 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxxxxx", "xx", "xxxx"])"
flake8.options.manager    SpawnPoolWorker-61    401 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-61    401 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-47    879 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager    SpawnPoolWorker-61    402 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    879 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
flake8                    SpawnPoolWorker-69    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-61    402 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, flake8.checker            SpawnPoolWorker-47    879 DEBUG    Logicflake8                    SpawnPoolWorker-69    181 DEBUG flake8                    Spaflake8.options.manager    SpawnPoolWorker-61    402 DEBUG    Registered option "Option(--ignore, tyflake8.checker            SpawnPope=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
al line: "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
al line: "assert "xxxxxxxxxxxxxxxpe=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated lisal line: "assertpe=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, cpe=functools.partial(<function _flakeal line:wnPoolWorker-69    181 DEBUG    Added a None logging handler to logger root at flake8
 "assert "xxxxxxxxxxxxxxxxxxxxxxxxxxx" in result.output"
8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to8_normalize at 0x0000029858D609A0>, comma_separated_list=True, noflake8.checker            SpawnPoolWorker-47    886 DEBUG    Logical line: ""
rmalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-61    411 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    888 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxxxxx", "xxxxxxx"])"
flake8.options.manager    SpawnPoolWorker-61    411 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-61    413 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-61    413 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-47    890 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager    SpawnPoolWorker-61    413 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-61    415 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    892 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxx" in result.output"
flake8.options.manager    SpawnPoolWorker-61    415 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000029858D609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-47    892 DEBUG    Logical line: "def test_config_set_invalid_boolean(self):"
flake8.checker            SpawnPoolWorker-47    892 DEBUG    Logical line: "def test_config_set_invalid_boolean(self):"
flake8.options.manager    SpawnPoolWorker-61    416 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-47    893 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-61    416 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-61    417 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-47    894 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=self.config_path):"
xxxxx", return_value=self.config_path):"
flake8.options.manager    SpawnPoolWorker-61    417 DEBUG    Registered option "Option(--xxxxx", return_value=self.config_path):"
flake8.options.manager    SpawnPoolWorker-61    419 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-61    419 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-61    419 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-47    896 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
flake8.options.manager    SpawnPoolWorker-61    419 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of suflake8.checker            SpawnPoolWorker-47    896 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
47    896 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-61    419 DEBUG    Registered option "Option(-j, 47    896 DEBUG    Logical line: "result = self.runner.invoke(main, , --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
47    896 DEBUG    Logical line: ", --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
--- Logging error ---
, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ign, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>,47    896 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    900 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager    SpawnPoolWorker-62    390 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-62    390 DEBUG    Registered option "Option(-q, --quiet, 47    896 DEBUG    Logical line: "result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logginflake8.options.manager    SpawnPoolWorker-62    39result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    900 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
flake8.options.manager   result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
flakresult = self.runner.invoke(main, ["xxxxxx", "xxx", "flake8.optioresult = self.runner.invokflake8flaresult = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    900 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
--- Logging error ---
result = self.runner.invoke(main, ["xxxxxx", "xxx", "xxxxxxxxxxxx", "xxxxx"])"
--- Logging error ---
flake8.checker       SpawnPoolWorker-47    900 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-62    397 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
7 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
     SpawnPoolWorker-47    900 DEBUG    Logical line: "as7 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'alway     SpawnPoolWorker-47    900 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    909 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
ion "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
     SpawnPoolWorker-47    900 DEBUG    Logical line: "assert result.exit_code in [1, 2]"
--- Logging error ---
flake8.r ---
flake8.checker            SpawnPoolWorker-47    909 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
ion "Option(--color, default='auto', choices=('auto', 'always', 'never')ion "Option(--color, default='auto',  909 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
  909 DEBUG    Logical line: "assert "xxx--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
--color, default='auto', choices=('auto', 'always', 'never'), helpe: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
e: "assert "xxxxxxxxxxxxxxxxe: "assert "xxe: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-63    377 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-63    377 DEBUG    Registered option "Option(-q, --quiet, flake8.options.manager    SpawnPoolWorker-63    37flake8.options.manager   flake8.optioflake8flafe: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    912 DEBUG    Logical line: "def test_config_set_invalid_output_format(self):"
e: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.output"
--- Logging error ---
flake8.checker          e: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in result.outpflake8.options.manager    SpawnPoolWorker-63    377 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-47    912 DEBUG    Logical line: "def test_config_set_invalid_output_format(self):"
 DEBUG    Logical line: "def test_config_set_invalid_output_format(self):"
 DEBUG    Logical line: "def test_conf DEBUG    Logical line: "def test_config_set_invalid_output_format(self):"
--- Logging error ---
flake8                    SpawnPoolWorker-70    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-64    389 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-64    389 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-64    389 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-64    389 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-64    389 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8                    SpawnPoolWorker-71    178 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-64    391 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-64    398 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-64    398 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-64    398 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-64    398 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-64    398 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-64    399 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-64    399 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-64    399 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-64    399 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-64    399 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-64    406 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-64    406 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-64    406 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-64    406 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-64    406 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-64    408 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-64    408 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000155B6AA09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-64    408 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-64    408 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-64    408 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-64    414 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-64    414 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-64    414 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-64    414 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-64    414 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-64    414 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-66    381 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-66    383 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-66    383 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-66    383 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-66    383 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-66    383 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-66    383 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-66    385 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-66    385 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-66    385 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-65    404 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.bugbear            SpawnPoolWorker-64    443 INFO     Optional warning B903 not present in selected warnings: None. Not firing it at all.
flake8                    SpawnPoolWorker-72    182 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-65    404 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.bugbear            SpawnPoolWorker-64    443 INFO     Optional warning B903 not present in selected warnings: None. Not firing it at all.
flake8.options.manager    SpawnPoolWorker-66    396 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-65    408 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-66    396 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_sepflake8.options.manager    SpawnPoolWorker-65    408 DEBUG    Registered option "Option(--color, default='auto'arated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
, choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-66    398 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-66    398 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-65    410 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-66    398 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-65    410 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000291207209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-66    400 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-65    412 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000291207209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-66    400 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8                    SpawnPoolWorker-73    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-67    367 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-67    367 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-66    402 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-65    415 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000291207209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-67    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-67    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-65    415 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000291207209Aflake8.options.manager    SpawnPoolWorker-66    406 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-66    406 DEBUG    Registered option "Option(--disable-noqa, action='store_truon='store_true', help='Print total number of errorflake8.options.manager    SpawnPoolWorker-65    419 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-65    419 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name usflake8.options.manager    SpawnPoolWorker-66    406 DEBUG   on='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
on='store_true', help='Print total number of errors to standaflake8.options.manager    SpawnPoolWorker-65    419 DEBUG    Registeredflake8.options.manager    Spawflake8.options.on='store_true', help='Print tia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
ia stdin. This is useful for editors piping the fion='store_true'flake8.options.manager    SpawnPoolWorker-66    415 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
ia stdin. This is useful ', help='Show the source generate each error or warning.')".
on='stoon=ia stdin. Th', help='Show the source genera', help='Show toia stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
--- Logging error ---
ia stdin. This is useful for editors piping the file contents ia stdin. This is useful for edhe source generate each error or warning.')".
ia stdin. This flake8.options.manager    SpawnPoolWorker-66    416 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-66    417 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-66    417 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-66    417 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-66    417 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-66    417 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-66    417 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-64    466 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-66    418 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-66    418 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-66    418 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-64    467 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-66    418 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-66    418 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.checker            SpawnPoolWorker-64    467 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-64    467 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-64    468 DEBUG    Logical line: "import tempfile"
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flaflake8.checker            SpawnPoolWorker-64    468 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
ke8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-64    468 DEBUG    Logical line: "import shutil"
flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8flake8.checker            SpawnPoolWorker-64  flake8.checker         flake8.options.manager    SpawnPoolWorker-66    419 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000016AC32209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
   SpawnPoolWorker-64    468 DEBUG    Logical line: "import shutil"
flake8.options.manager    SpawnPoolWorker-66    425 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-66    425 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-66    425 DEBUG    Extending default select list with ['W']
flake8                    SpawnPoolWorker-74    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-64    474 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-64    478 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-64    478 DEBUG    Logical line: "try:"
flake8.options.config     SpawnPoolWorker-66    429 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-64    478 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.options.config     SpawnPoolWorker-66    429 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-66    429 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-66    429 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-64    478 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-64    478 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.options.aggregator SpawnPoolWorker-66    429 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-66    429 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-64    478 DEBUG    Logical line: "from src.models.potential_match_group import PotentialMatchGroup"
flake8.checker            SpawnPoolWorker-64    480 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-64    480 DEBUG    Logical line: "except ImportError:"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-68    378 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-68    380 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name usflake8.options.manager    SpawnPoolWorker-68    381 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-68    391 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-68    391 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-68    393 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-68    393 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-68    395 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-68    396 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-68    396 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-68    396 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-68    397 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-68    398 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-68    398 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-68    398 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-66    453 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-66    453 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-68    402 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-68    402 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-66    456 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-68    402 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-68    402 DEBUG    Registered option "Option(--exiflake8.checker            SpawnPoolWorker-66    458 DEBUG    Logical line: "import os"
t-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-68    404 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-68    404 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-66    458 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-68    404 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-68    406 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-66    460 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-68    406 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-68    406 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-68    406 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-66    460 DEBUG    Logical line: "if os.getenv("xxxxxxxxxxxxxxxxxxxxxx", "x") == "x":"
flake8.options.manager    SpawnPoolWorker-68    412 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-68    412 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-68    412 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-68    412 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-66    466 DEBUG    Logical line: "pytest.skip("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", allow_module_level=True, )"
flake8.options.manager    SpawnPoolWorker-68    413 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-68    414 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-68    414 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002C0571709A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-66    468 DEBUG    Logical line: "import platform"
flake8.options.manager    SpawnPoolWorker-68    417 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-68    417 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-68    417 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-66    471 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-66    471 DEBUG    Logical line: "from unittest.mock import patch"
flake8.options.config     SpawnPoolWorker-68    419 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-66    473 DEBUG    Logical line: "from tempfile import TemporaryDirectory"
flake8.options.config     SpawnPoolWorker-68    419 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.checker            SpawnPoolWorker-66    473 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.options.config     SpawnPoolWorker-68    419 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-68    419 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-66    473 DEBUG    Logical line: "from src.services.onedrive_service import OneDriveService"
flake8.options.aggregator SpawnPoolWorker-68    419 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-68    419 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-66    473 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-66    473 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-66    475 DEBUG    Logical line: "class FakeOneDriveService:"
flake8.checker            SpawnPoolWorker-66    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-66    475 DEBUG    Logical line: "def __init__(self, side_effect=None):"
flake8.checker            SpawnPoolWorker-66    475 DEBUG    Logical line: "self._side_effect = side_effect"
flake8.checker            SpawnPoolWorker-66    475 DEBUG    Logical line: "def detect_cloud_status_safe(self, file_path):"
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: "if self._side_effect is None:"
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: "return CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: "return self._side_effect(file_path)"
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: "class TestMixedDirectoryScanIntegration:"
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: "def setup_method(self):"
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-66    477 DEBUG    Logical line: "self.scanner = FileScanner()"
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: "self.onedrive_service = OneDriveService()"
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: "def test_scanner_initialization_with_onedrive(self):"
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: "assert self.scanner is not None"
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: "assert self.onedrive_service is not None"
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: "assert self.onedrive_service.is_supported() == (platform.system().lower() == "xxxxxxx")"
flake8.options.manager    SpawnPoolWorker-69    389 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-66    479 DEBUG    Logical line: "def test_mixed_directory_structure_creation(self):"
flake8                    SpawnPoolWorker-75    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-69    391 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-66    481 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-69    391 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-66    481 DEBUG    Logical line: "with TemporaryDirectory() as temp_dir:"
flake8.options.manager    SpawnPoolWorker-69    391 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-66    483 DEBUG    Logical line: "temp_path = Path(temp_dir)"
flake8.checker            SpawnPoolWorker-66    483 DEBUG    Logical line: "temp_path = Path(temp_dir)"
flake8.options.manager    SpawnPoolWorker-69    393 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-66    483 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-69    393 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-66    483 DEBUG    Logical line: "local_file = temp_path / "xxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-69    394 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-66    484 DEBUG    Logical line: "cloud_file = temp_path / "xxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-69    394 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-66    484 DEBUG    Logical line: "nested_local = temp_path / "xxxxxxxxx" / "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-66    484 DEBUG    Logical line: "nested_local = temp_path / "xxxxxxxxx" / "xxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-69    395 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-66    485 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-69    395 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-69    395 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, flake8.checker            SpawnPoolWorker-66    485 DEBUG    Logical line: "(temp_path / "xxxxxxxxx").mkdir()"
flake8.checker            SpawnPoolWorker-66    485 DEBUG    Logical line: "(temp_path / "xxxxxxxxx").mkdir()"
flake8.options.manager    SpawnPoolWorker-69    396 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-66    486 DEBUG    Logical line: "local_file.write_bytes(b"xxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-69    396 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-69    396 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-66    486 DEBUG    Logical line: "cloud_file.write_bytes(b"xxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-69    396 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-66    487 DEBUG    Logical line: "nested_local.write_bytes(b"xxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-69    403 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-66    493 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-69    403 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-69    403 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-66    493 DEBUG    Logical line: "assert local_file.exists()"
flake8.checker            SpawnPoolWorker-66    493 DEBUG    Logical line: "assert local_file.exists()"
flake8.options.manager    SpawnPoolWorker-69    404 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-66    494 DEBUG    Logical line: "assert cloud_file.exists()"
flake8.options.manager    SpawnPoolWorker-69    404 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-69    404 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-66    494 DEBUG    Logical line: "assert nested_local.exists()"
flake8.options.manager    SpawnPoolWorker-69    404 DEBUG    Registered option "Option(--
flake8.options.manager    SpawnPoolWorker-69
    404 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-69    407 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-66    497 DEBUG    Logical line: "assert len(list(temp_path.rglob("xxxxx"))) >= 1"
flake8.options.manager    SpawnPoolWorker-69    407 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-69    408 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-66    498 DEBUG    Logical line: "assert len(list(temp_path.rglob("xxxxx"))) >= 1"
flake8.options.manager    SpawnPoolWorker-69    408 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-69    408 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-66    500 DEBUG    Logical line: "assert len(list(temp_path.rglob("xxxxx"))) >= 1"
flake8.options.manager    SpawnPoolWorker-69    410 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-66    500 DEBUG    Logical line: "@pytest.mark.skipif(platform.system().lower() != "xxxxxxx", reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )"
flake8.options.manager    SpawnPoolWorker-69    411 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-69    412 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-69    412 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-66    502 DEBUG    Logical line: "def test_real_directory_scan_with_onedrive_detection(self):"
flake8.options.manager    SpawnPoolWorker-69    417 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-66    506 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-69    417 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-69    417 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-69    417 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-66    506 DEBUG    Logical line: "with TemporaryDirectory() as temp_dir:"
flake8.options.manager    SpawnPoolWorker-69    417 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-70    375 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-69    419 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-70    377 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-69    419 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000022E018209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-70    377 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-66    508 DEBUG    Logical line: "temp_path = Path(temp_dir)"
flake8                    SpawnPoolWorker-76    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-69    421 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-69    421 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-69    421 DEBUG    Extending default select list with ['W']
flake8.options.manager    SpawnPoolWorker-70    379 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D0AE6709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-66    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-66    510 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-70    379 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D0AE6709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-66    510 DEBUG    Logical line: "test_files = []"
flake8.options.manager    SpawnPoolWorker-70    379 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D0AE6709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-66   flake8.options.manager    SpawnPoolWorker-70    379 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D0AE6709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
--- Logging error ---
t_files = []"
flake8.options.config     SpawnPoolWorker-69    421 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-69    421 DEBUG    Option "max-line-length" returned value: 242
t_files = []"
--- Logging error ---
t_files = []"
--- EBUG    Option "max-line-let_files =t_fiEBUG    Option "max-line-length" returned value: 242
--- Logging error ---
EBUG    Option "max-line-length" returt_flake8.checker            SpawnPoolWorker-68    461 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    463 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    463 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-68    463 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "import shutil"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "import time"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "from unittest.mock import patch"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-68    464 DEBUG    Logical line: "from src.services.progress_reporter import ProgressReporter"
flake8.checker            SpawnPoolWorker-68    466 DEBUG    Logical line: "from src.cli.main import main"
flake8.checker            SpawnPoolWorker-68    466 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.checker            SpawnPoolWorker-68    466 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-68    466 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "class DuplicateDetector:"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "def detect_duplicates(self, files):"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "class DuplicateDetector:"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "def find_duplicates(self, files):"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "class ProgressReporter:"
flake8.checker            SpawnPoolWorker-68    467 DEBUG    Logical line: "def start_progress(self, total_items, label):"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "def update_progress(self, current_item, current_file=None):"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "def finish_progress(self):"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "def main():"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    469 DEBUG    Logical line: "class CliRunner:"
flake8.checker            SpawnPoolWorker-68    473 DEBUG    Logical line: "def invoke(self, func, args, input=None):"
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: "from collections import namedtuple"
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: "Result = namedtuple("xxxxxx", ["xxxxxxxxx", "xxxxxx"])"
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: "return Result(1, "xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: "class TestProgressReportingIntegration:"
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: "def setup_method(self):"
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    475 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
flake8.options.manager    SpawnPoolWorker-71    368 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-71    368 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-71    372 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-68    478 DEBUG    Logical line: "self.scanner = FileScanner()"
flake8.options.manager    SpawnPoolWorker-71    372 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-71    372 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-68    478 DEBUG    Logical line: "self.detector = DuplicateDetector()"
flake8.options.manager    SpawnPoolWorker-71    372 DEBUG    Registered option "Option(--count, action='store_tflake8.checker            SpawnPoolWorker-68    478 DEBUG    Logical line: "self.detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-68    479 DEBUG    Logical line: "self.progress_reporter = ProgressReporter()"
flake8.checker            SpawnPoolWorker-68    479 DEBUG    Logical line: "self.cli_runner = CliRunner()"
flake8.checker            SpawnPoolWorker-68    479 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    479 DEBUG    Logical line: "self.create_test_videos()"
flake8.checker            SpawnPoolWorker-68    479 DEBUG    Logical line: "def teardown_method(self):"
flake8.checker            SpawnPoolWorker-68    480 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    480 DEBUG    Logical line: "shutil.rmtree(self.temp_dir, ignore_errors=True)"
flake8.checker            SpawnPoolWorker-68    480 DEBUG    Logical line: "def create_test_videos(self):"
flake8.checker            SpawnPoolWorker-68    480 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    480 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    481 DEBUG    Logical line: "video_files = []"
flake8.checker            SpawnPoolWorker-68    481 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    481 DEBUG    Logical line: "for i in range(10):"
flake8.checker            SpawnPoolWorker-68    481 DEBUG    Logical line: "filename = f"video_{i:03d}.mp4""
flake8.checker            SpawnPoolWorker-68    482 DEBUG    Logical line: "content = f"Video content {i}".encode() * 1000"
flake8.checker            SpawnPoolWorker-68    482 DEBUG    Logical line: "video_files.append((filename, content))"
flake8.checker            SpawnPoolWorker-68    482 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    482 DEBUG    Logical line: "for i in range(5):"
flake8.checker            SpawnPoolWorker-68    482 DEBUG    Logical line: "filename = f"large_video_{i}.mkv""
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "content = f"Large video content {i}".encode() * 10000"
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "video_files.append((filename, content))"
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "subdir = Path(self.temp_dir) / "xxxxxx""
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "subdir.mkdir()"
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "for i in range(5):"
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "filename = f"sub_video_{i}.mov""
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "content = f"Sub video content {i}".encode() * 1000"
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "video_files.append((f"subdir/{filename}", content))"
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    483 DEBUG    Logical line: "for filename, content in video_files:"
flake8.checker            SpawnPoolWorker-68    485 DEBUG    Logical line: "file_path = Path(self.temp_dir) / filename"
flake8.checker            SpawnPoolWorker-68    485 DEBUG    Logical line: "file_path.parent.mkdir(parents=True, exist_ok=True)"
flake8.checker            SpawnPoolWorker-68    485 DEBUG    Logical line: "with open(file_path, "xx") as f:"
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: "f.write(content)"
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: "def test_progress_reporting_during_cli_scan(self):"
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", "xxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    489 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: "output = result.output.lower()"
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: "progress_indicators = ["xxxxxxxx", "xxxxxxxx", "xxxxx", "x", "xxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: "has_progress = any(indicator in output for indicator in progress_indicators)"
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: "assert has_progress, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: "def test_progress_reporting_shows_file_counts(self):"
flake8.checker            SpawnPoolWorker-68    491 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    493 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    493 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    493 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    493 DEBUG    Logical line: "output = result.output"
flake8.checker            SpawnPoolWorker-68    493 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    493 DEBUG    Logical line: "count_patterns = ["xxxxx", "x", "xxxxx", "xxxxx", ]"
flake8.checker            SpawnPoolWorker-68    495 DEBUG    Logical line: "has_counts = any(pattern in output.lower() for pattern in count_patterns)"
flake8.checker            SpawnPoolWorker-68    495 DEBUG    Logical line: "assert has_counts, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-68    495 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    495 DEBUG    Logical line: "def test_progress_reporting_percentage_updates(self):"
flake8.checker            SpawnPoolWorker-68    496 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    496 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    496 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    496 DEBUG    Logical line: "output = result.output"
flake8.checker            SpawnPoolWorker-68    496 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    496 DEBUG    Logical line: "percentage_indicators = ["x", "xxxxxxx", "xxxxxxxx", "xxx", "xxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    497 DEBUG    Logical line: "has_percentage = any(indicator in output.lower() for indicator in percentage_indicators)"
flake8.checker            SpawnPoolWorker-68    497 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    497 DEBUG    Logical line: "progress_indicators = ["xxxxx", "xxxxxxxxx", "xxxxxxxx", "xxxx"]"
flake8.checker            SpawnPoolWorker-68    498 DEBUG    Logical line: "has_progress_indication = any(indicator in output.lower() for indicator in progress_indicators)"
flake8.checker            SpawnPoolWorker-68    498 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    498 DEBUG    Logical line: "assert (has_percentage or has_progress_indication), f"Should show progress information. Got: {repr(output)}""
flake8.checker            SpawnPoolWorker-68    498 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    499 DEBUG    Logical line: "def test_progress_reporting_current_file_display(self):"
flake8.checker            SpawnPoolWorker-68    499 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    499 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", "xxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: "output = result.output"
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: "test_files = ["xxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: "mentions_files = any(filename in output for filename in test_files)"
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: "processing_indicators = ["xxxxxxxxxx", "xxxxxxxx", "xxxxxxxx", "xxxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    500 DEBUG    Logical line: "mentions_processing = any(indicator in output.lower() for indicator in processing_indicators)"
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: "assert (mentions_files or mentions_processing), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: "def test_progress_reporting_no_progress_option(self):"
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: "output = result.output"
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    502 DEBUG    Logical line: "progress_indicators = ["x", "x", "xxxxxxxxx", "xxxxxxxxx", "x"]"
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: "has_progress = any(indicator in output.lower() for indicator in progress_indicators)"
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: "assert (not has_progress or len(output) < 500), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8                    SpawnPoolWorker-77    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: "def test_progress_reporting_tty_detection(self):"
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    504 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxx", return_value=True):"
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: "result = self.cli_runner.invoke(main, [str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: "tty_output = result.output"
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxx", return_value=False):"
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: "result = self.cli_runner.invoke(main, [str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: "non_tty_output = result.output"
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    506 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: "def test_progress_reporting_during_hash_computation(self):"
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: "duplicate_content = b"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" * 5000"
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: "duplicate_files = ["xxxxxxxxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    508 DEBUG    Logical line: "for filename in duplicate_files:"
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: "file_path = Path(self.temp_dir) / filename"
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: "with open(file_path, "xx") as f:"
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: "f.write(duplicate_content)"
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", "xxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: "output = result.output.lower()"
flake8.checker            SpawnPoolWorker-68    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    512 DEBUG    Logical line: "hash_indicators = ["xxxx", "xxxxxxxxx", "xxxxxxxx", "xxxxxxxxx", "xxxxxxxxx", "xxxxxxxxx", "xxxxx", "xxxx", "xxxxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    512 DEBUG    Logical line: "has_hash_progress = any(indicator in output for indicator in hash_indicators)"
flake8.checker            SpawnPoolWorker-68    512 DEBUG    Logical line: "assert (has_hash_progress), f"Should show progress during processing. Got: {repr(output)}""
flake8.checker            SpawnPoolWorker-68    513 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    513 DEBUG    Logical line: "def test_progress_reporting_recursive_scan_indication(self):"
flake8.checker            SpawnPoolWorker-68    513 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    513 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    513 DEBUG    Logical line: "recursive_result = self.cli_runner.invoke(main, ["xxxxxxxxxxx", "xxxxxxxxxx", str(self.temp_dir)])"
flake8                    SpawnPoolWorker-78    177 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-68    514 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    514 DEBUG    Logical line: "non_recursive_result = self.cli_runner.invoke(main, ["xxxxxxxxxxxxxx", "xxxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    514 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    514 DEBUG    Logical line: "assert recursive_result.exit_code == 0"
flake8.checker            SpawnPoolWorker-68    515 DEBUG    Logical line: "assert non_recursive_result.exit_code == 0"
flake8.checker            SpawnPoolWorker-68    515 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    515 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    515 DEBUG    Logical line: "recursive_output = recursive_result.output"
flake8.checker            SpawnPoolWorker-68    515 DEBUG    Logical line: "non_recursive_output = non_recursive_result.output"
flake8.checker            SpawnPoolWorker-68    515 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    516 DEBUG    Logical line: "assert recursive_output != non_recursive_output"
flake8.checker            SpawnPoolWorker-68    516 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    516 DEBUG    Logical line: "def test_progress_reporting_estimated_time_remaining(self):"
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: "output = result.output.lower()"
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: "time_indicators = ["xxx", "xxxxxxxxx", "xxxxxxx", "xxxx", "xxxxxxx", "xxxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: "has_time_info = any(indicator in output for indicator in time_indicators)"
flake8.checker            SpawnPoolWorker-68    517 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "def test_progress_reporting_handles_errors_gracefully(self):"
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "protected_file = Path(self.temp_dir) / "xxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "protected_file.touch()"
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-68    519 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "if os.name == "xx":"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "import subprocess"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "subprocess.run(["xxxxxx", "xx", str(protected_file)], check=False)"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "protected_file.chmod(0o000)"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    521 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", "xxxxxxxxx", str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: "assert result.exit_code in [0, 2]"
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: "output = result.output.lower()"
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: "error_indicators = ["xxxxx", "xxxxxxx", "xxxxxxxxxx", "xxxxxxxxx", "xxxxxx", ]"
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: "has_error_handling = any(indicator in output for indicator in error_indicators)"
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    523 DEBUG    Logical line: "progress_indicators = ["xxxxxxxx", "xxxxxxxx", "xxxxxxxx"]"
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: "has_progress = any(indicator in output for indicator in progress_indicators)"
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: "test_passes = (has_error_handling and has_progress) or (has_progress and result.exit_code == 0)"
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-68    525 DEBUG    Logical line: "if not test_passes:"
flake8.checker            SpawnPoolWorker-68    527 DEBUG    Logical line: "print(f"Output: {repr(result.output)}")"
flake8.checker            SpawnPoolWorker-68    527 DEBUG    Logical line: "print(f"Has error handling: {has_error_handling}")"
flake8.checker            SpawnPoolWorker-68    528 DEBUG    Logical line: "print(f"Has progress: {has_progress}")"
flake8.checker            SpawnPoolWorker-68    528 DEBUG    Logical line: "print(f"Exit code: {result.exit_code}")"
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-68    528 DEBUG    Logical line: "assert (test_passes), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-68    528 DEBUG    Logical line: "finally:"
flake8.options.manager    SpawnPoolWorker-73    361 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-72    370 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-68    529 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-68    529 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-68    529 DEBUG    Logical line: "if os.name == "xx":"
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-68    529 DEBUG    Logical line: "subprocess.run(["xxxxxx", "xx", str(protected_file)], check=False)"
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-68    529 DEBUG    Logical line: "else:"
flake8.options.manager    SpawnPoolWorker-72    371 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-73    362 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-72    372 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-68    530 DEBUG    Logical line: "protected_file.chmod(0o644)"
flake8.options.manager    SpawnPoolWorker-72    372 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-73    363 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-68    530 DEBUG    Logical line: "except Exception:"
flake8.options.manager    SpawnPoolWorker-73    363 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001D4638509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
rated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-72    372 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
rated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of sflake8.options.manager    SpawnPoolWorker-72    372 DEBUG    Registered option "Option(--shrated_list=True, normalize_paths=False), help='Comma-flake8.options.manager    SpawnPoolWorker-72    372 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-72    372 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-68    530 DEBUG    Logical line: "pass"
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: "@pytest.mark.integration"
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: "def test_progress_reporting_completion_summary(self):"
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", str(self.temp_dir)])"
flake8.options.manager    SpawnPoolWorker-72    373 DEBUG    Extending default ignore list wiflake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: "flake8.options.manager    SpawnPoolWorker-72  flake8.checker            SpawnPoolWorflake8.checker            SpawnPoolWorker-68    532 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxxxx", str(self.temp_dir)])"
flake8.options.manager    SpawnPoolWorker-72    379 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-72    379 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-68    538 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.options.manager    SpawnPoolWorker-72    379 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flflake8.checker            SpawnPoolWorker-68    538 DEBUG    Logical line: "assert result.exit_code == 0"
--- Logging error ---
flake8.checker            SpawnPoolWorker-68    538 DEBUG    Logismethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPsmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_sype=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
ype=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, norype=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
--- Logging error ---
ype=functools.partial(<function _flake8_normalize at 0x000001619AEC09A0>, comma_separated_list=True, normalize_pathsype=functools.partial(<function _flake8_normalize at 0x000ype=functools.partial(<functiype=functools.flake8                    SpawnPoolWorker-79    180 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-74    369 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-74    369 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-74    369 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-74    371 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-74    373 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B0F29209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-74    374 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-74    374 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-74    375 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-74    375 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-74    375 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-74    375 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-74    375 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-80    176 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-74    387 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    389 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    390 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-74    390 DEBUG    Logical line: "import platform"
flake8.checker            SpawnPoolWorker-74    390 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-74    390 DEBUG    Logical line: "from unittest.mock import patch"
flake8.checker            SpawnPoolWorker-74    391 DEBUG    Logical line: "from src.lib.windows_onedrive_api import (detect_cloud_status, detect_cloud_status_safe, is_windows_platform, is_onedrive_supported, get_platform_info, WindowsOneDriveAPIError, )"
flake8.checker            SpawnPoolWorker-74    391 DEBUG    Logical line: "from src.models.cloud_file_status import CloudFileStatus"
flake8.checker            SpawnPoolWorker-74    391 DEBUG    Logical line: "class TestWindowsAPIDetectionIntegration:"
flake8.checker            SpawnPoolWorker-74    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    392 DEBUG    Logical line: "def test_platform_detection(self):"
flake8.checker            SpawnPoolWorker-74    392 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    392 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    392 DEBUG    Logical line: "assert is_windows_platform() == (platform.system().lower() == "xxxxxxx")"
flake8.checker            SpawnPoolWorker-74    392 DEBUG    Logical line: "assert is_onedrive_supported() == is_windows_platform()"
flake8.checker            SpawnPoolWorker-74    393 DEBUG    Logical line: "def test_platform_info_structure(self):"
flake8.checker            SpawnPoolWorker-74    393 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    393 DEBUG    Logical line: "info = get_platform_info()"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert isinstance(info, dict)"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert "xxxxxxxx" in info"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert "xxxxxxx" in info"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxx" in info"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert "xxxxxxxxxxxxx" in info"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert info["xxxxxxxxxxxxxxxxxx"] == is_onedrive_supported()"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "assert info["xxxxxxxxxxxxx"] == is_windows_platform()"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "@pytest.mark.skipif(not is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    394 DEBUG    Logical line: "def test_windows_api_with_real_file(self, tmp_path):"
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: "test_file = tmp_path / "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: "test_file.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: "status = detect_cloud_status(test_file)"
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: "assert isinstance(status, CloudFileStatus)"
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: "assert status in [CloudFileStatus.LOCAL, CloudFileStatus.CLOUD_ONLY]"
flake8.checker            SpawnPoolWorker-74    396 DEBUG    Logical line: "@pytest.mark.skipif(not is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: "def test_windows_api_safe_detection(self, tmp_path):"
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: "test_file = tmp_path / "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: "test_file.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: "status = detect_cloud_status_safe(test_file)"
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: "assert status is None or isinstance(status, CloudFileStatus)"
flake8.checker            SpawnPoolWorker-74    398 DEBUG    Logical line: "@pytest.mark.skipif(not is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "def test_windows_api_nonexistent_file_error(self):"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "nonexistent = Path("xxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "with pytest.raises(OSError):"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "detect_cloud_status(nonexistent)"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "status = detect_cloud_status_safe(nonexistent)"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "assert status is None"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "@pytest.mark.skipif(is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", )"
flake8.checker            SpawnPoolWorker-74    400 DEBUG    Logical line: "def test_non_windows_platform_raises_error(self, tmp_path):"
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "test_file = tmp_path / "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "test_file.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "with pytest.raises(RuntimeError, match="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "detect_cloud_status(test_file)"
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "status = detect_cloud_status_safe(test_file)"
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "assert status is None"
flake8.checker            SpawnPoolWorker-74    402 DEBUG    Logical line: "@pytest.mark.skipif(not is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "def test_windows_api_error_handling(self, tmp_path):"
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "test_file = tmp_path / "xxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "test_file.write_bytes(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") as mock_get_attrs:"
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "mock_get_attrs.return_value = 0xFFFFFFFF"
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") as mock_get_error:"
flake8.checker            SpawnPoolWorker-74    404 DEBUG    Logical line: "mock_get_error.return_value = 2"
flake8.checker            SpawnPoolWorker-74    406 DEBUG    Logical line: "with pytest.raises(WindowsOneDriveAPIError):"
flake8.checker            SpawnPoolWorker-74    406 DEBUG    Logical line: "detect_cloud_status(test_file)"
flake8.checker            SpawnPoolWorker-74    406 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    406 DEBUG    Logical line: "status = detect_cloud_status_safe(test_file)"
flake8.checker            SpawnPoolWorker-74    406 DEBUG    Logical line: "assert status is None"
flake8.checker            SpawnPoolWorker-74    406 DEBUG    Logical line: "@pytest.mark.skipif(not is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    407 DEBUG    Logical line: "def test_cloud_only_file_detection(self):"
flake8.checker            SpawnPoolWorker-74    407 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    407 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    407 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    407 DEBUG    Logical line: "test_file = Path("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    407 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") as mock_get_attrs:"
flake8.checker            SpawnPoolWorker-74    408 DEBUG    Logical line: "with patch.object(Path, "xxxxxx", return_value=True):"
flake8.checker            SpawnPoolWorker-74    408 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    408 DEBUG    Logical line: "mock_get_attrs.return_value = (0x00400000)"
flake8.checker            SpawnPoolWorker-74    408 DEBUG    Logical line: "status = detect_cloud_status(test_file)"
flake8.checker            SpawnPoolWorker-74    409 DEBUG    Logical line: "assert status == CloudFileStatus.CLOUD_ONLY"
flake8.checker            SpawnPoolWorker-74    409 DEBUG    Logical line: "@pytest.mark.skipif(not is_windows_platform(), reason="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    409 DEBUG    Logical line: "def test_local_file_detection(self):"
flake8.checker            SpawnPoolWorker-74    409 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "test_file = Path("xxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "with patch("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") as mock_get_attrs:"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "with patch.object(Path, "xxxxxx", return_value=True):"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "mock_get_attrs.return_value = 0x00000020"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "status = detect_cloud_status(test_file)"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "assert status == CloudFileStatus.LOCAL"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "def test_integration_with_onedrive_service(self):"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "from src.services.onedrive_service import OneDriveService"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "service = OneDriveService()"
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    410 DEBUG    Logical line: "assert service.is_supported() == is_onedrive_supported()"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "info = service.get_service_info()"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "assert info["xxxxxxxxx"] == is_onedrive_supported()"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "if is_windows_platform():"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "assert "xxxxxxxx" in info"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "assert info["xxxxxxxx"]["xxxxxxxxxxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "def test_error_propagation_through_service(self):"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "from src.services.onedrive_service import OneDriveService"
flake8.checker            SpawnPoolWorker-74    412 DEBUG    Logical line: "service = OneDriveService()"
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: "nonexistent = Path("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: "if is_windows_platform():"
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: "with pytest.raises((OSError, RuntimeError)):"
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: "service.detect_cloud_status(nonexistent)"
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: "status = service.detect_cloud_status_safe(nonexistent)"
flake8.checker            SpawnPoolWorker-74    414 DEBUG    Logical line: "assert status in [None, CloudFileStatus.LOCAL]"
flake8                    SpawnPoolWorker-81    180 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-74    416 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-74    416 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    416 DEBUG    Logical line: "with pytest.raises(RuntimeError):"
flake8.checker            SpawnPoolWorker-74    416 DEBUG    Logical line: "service.detect_cloud_status(nonexistent)"
flake8.checker            SpawnPoolWorker-74    416 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    417 DEBUG    Logical line: "status = service.detect_cloud_status_safe(nonexistent)"
flake8.checker            SpawnPoolWorker-74    417 DEBUG    Logical line: "assert status == CloudFileStatus.LOCAL"
flake8.options.manager    SpawnPoolWorker-75    366 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-75    366 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-75    366 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-75    366 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-75    366 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-75    367 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000014E4B0A09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-75    369 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-75    369 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-75    369 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-75    369 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-75    369 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-75    369 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-75    369 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-75    371 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-82    178 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-75    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    396 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    396 DEBUG    Logical line: "import os"
flake8.checker            SpawnPoolWorker-75    396 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-75    397 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-75    397 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-75    397 DEBUG    Logical line: "from unittest.mock import patch"
flake8.checker            SpawnPoolWorker-75    397 DEBUG    Logical line: "from src.lib.config_manager import ConfigManager"
flake8.checker            SpawnPoolWorker-75    397 DEBUG    Logical line: "class TestConfigManager:"
flake8.checker            SpawnPoolWorker-75    398 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    398 DEBUG    Logical line: "def test_default_config_structure(self):"
flake8.checker            SpawnPoolWorker-75    398 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    398 DEBUG    Logical line: "expected_keys = {"xxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxx", "xxxxxxxxxxxx", "xxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxx", }"
flake8.checker            SpawnPoolWorker-75    399 DEBUG    Logical line: "assert set(ConfigManager.DEFAULT_CONFIG.keys()) == expected_keys"
flake8.checker            SpawnPoolWorker-75    399 DEBUG    Logical line: "assert ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxxx"] == 0.8"
flake8.checker            SpawnPoolWorker-75    399 DEBUG    Logical line: "assert ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxxxxxxxx"] == 104857600"
flake8.checker            SpawnPoolWorker-75    400 DEBUG    Logical line: "assert ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxxxxxxxxx"] == "xxxx""
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-76    371 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-75    403 DEBUG    Logical line: "assert ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxx"] is True"
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-76    373 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001BCBC0E09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-76    374 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-75    404 DEBUG    Logical line: "assert ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxxxxxxx"] == []"
flake8.options.config     SpawnPoolWorker-76    375 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-76    375 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-76    375 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-76    375 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-76    375 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-76    375 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-75    405 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    406 DEBUG    Logical line: "def test_config_path_windows(self, mock_system):"
flake8.checker            SpawnPoolWorker-75    406 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    407 DEBUG    Logical line: "mock_system.return_value = "xxxxxxx""
flake8.checker            SpawnPoolWorker-75    407 DEBUG    Logical line: "with patch.dict(os.environ, {"xxxxxxx": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}):"
flake8.checker            SpawnPoolWorker-75    407 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-75    407 DEBUG    Logical line: "config_path = config_manager.get_config_path()"
flake8.checker            SpawnPoolWorker-75    408 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    408 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in str(config_path)"
flake8.checker            SpawnPoolWorker-75    409 DEBUG    Logical line: "assert "xxxxxxxxxxx" in str(config_path)"
flake8.checker            SpawnPoolWorker-75    409 DEBUG    Logical line: "assert "xxxxxxx" in str(config_path) or "xxxxxxx" in str(config_path)"
flake8.checker            SpawnPoolWorker-75    409 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    409 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    409 DEBUG    Logical line: "def test_config_path_macos(self, mock_home, mock_system):"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "mock_system.return_value = "xxxxxx""
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "mock_home.return_value = Path("xxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "expected_path = Path("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "assert config_manager.get_config_path() == expected_path"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    410 DEBUG    Logical line: "def test_config_path_linux(self, mock_home, mock_system):"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "mock_system.return_value = "xxxxx""
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "mock_home.return_value = Path("xxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "with patch.dict(os.environ, {}, clear=True):"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "config_path = config_manager.get_config_path()"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxxxxx" in str(config_path)"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "assert "xxxxxxxxxxx" in str(config_path)"
flake8.checker            SpawnPoolWorker-75    412 DEBUG    Logical line: "assert "xxxxxxx" in str(config_path)"
flake8.checker            SpawnPoolWorker-75    414 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    414 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    414 DEBUG    Logical line: "def test_config_path_linux_with_xdg_config_home(self, mock_home, mock_system):"
flake8.checker            SpawnPoolWorker-75    414 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    414 DEBUG    Logical line: "mock_system.return_value = "xxxxx""
flake8.checker            SpawnPoolWorker-75    415 DEBUG    Logical line: "mock_home.return_value = Path("xxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    415 DEBUG    Logical line: "with patch.dict(os.environ, {"xxxxxxxxxxxxxxx": "xxxxxxxxxxxxxxxxxxxxxxxxx"}):"
flake8.checker            SpawnPoolWorker-75    415 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-75    415 DEBUG    Logical line: "expected_path = Path("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-75    415 DEBUG    Logical line: "assert config_manager.get_config_path() == expected_path"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "def test_load_config_creates_default_when_missing(self):"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "from dependency_injector import providers"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "from src.lib.container import Container"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "from src.services.progress_reporter import ProgressReporter"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "config = config_manager.load_config()"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "class FakeReporter(ProgressReporter):"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "assert config == ConfigManager.DEFAULT_CONFIG"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "assert config_path.exists()"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: "def test_load_config_merges_with_defaults(self):"
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "self.started = False"
flake8.checker            SpawnPoolWorker-75    417 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-76    387 DEBUG    Logical line: "self.updates = []"
flake8.checker            SpawnPoolWorker-75    419 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "self.finished = False"
flake8.checker            SpawnPoolWorker-75    419 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "def start_progress(self, total, label):"
flake8.checker            SpawnPoolWorker-75    419 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "self.started = True"
flake8.checker            SpawnPoolWorker-75    419 DEBUG    Logical line: "partial_config = {"xxxxxxxxxxxxxxx": 0.7, "xxxxxxxxxxxx": True}"
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "def update_progress(self, idx, name):"
flake8.checker            SpawnPoolWorker-75    419 DEBUG    Logical line: "with open(config_path, "x") as f:"
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "self.updates.append((idx, name))"
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "def finish_progress(self):"
flake8.checker            SpawnPoolWorker-75    419 DEBUG    Logical line: "yaml.safe_dump(partial_config, f)"
flake8.checker            SpawnPoolWorker-76    389 DEBUG    Logical line: "self.finished = True"
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "def test_hasher_override_and_permission_skip(tmp_path):"
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "a = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "b = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "bad = tmp_path / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "a.write_bytes(b"xxxxx")"
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "b.write_bytes(b"xxxxx")"
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "bad.write_bytes(b"xxxxxx")"
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "c = Container()"
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    391 DEBUG    Logical line: "orig_hasher = c.hasher()"
flake8                    SpawnPoolWorker-83    172 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "def custom_hasher(path, chunk_size=1024 * 1024):"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "if path.name == "xxxxxxxxxxxx":"
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "raise PermissionError("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "return orig_hasher(path, chunk_size=chunk_size)"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "c.hasher.override(providers.Object(custom_hasher))"
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: "import yaml"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "db = c.database()"
flake8.checker            SpawnPoolWorker-75    423 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: "import shutil"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-76    393 DEBUG    Logical line: "scanner = FileScanner(db=db, hasher=c.hasher())"
flake8.checker            SpawnPoolWorker-75    423 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-74    483 DEBUG    Logical line: "from datetime import datetime"
flake8.checker            SpawnPoolWorker-75    425 DEBUG    Logical line: "config = config_manager.load_config()"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: "scanner.SUPPORTED_EXTENSIONS = None"
flake8.checker            SpawnPoolWorker-75    425 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: "results = scanner.scan([tmp_path])"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-75    425 DEBUG    Logical line: "assert config["xxxxxxxxxxxxxxx"] == 0.7"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    425 DEBUG    Logical line: "assert config["xxxxxxxxxxxx"] is True"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from src.services.result_exporter import ResultExporter"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: "paths = {r["xxxx"].split("x")[-1] if "x" in r["xxxx"] else r["xxxx"].split("xx")[-1] for r in results}"
flake8.checker            SpawnPoolWorker-75    425 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from src.models.scan_result import ScanResult"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-75    425 DEBUG    Logical line: "assert (config["xxxxxxxxxxxxxxxxxxxx"] == ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxxxxxxxx"])"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: "assert "xxxxx" in paths"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from src.cli.main import main"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "from click.testing import CliRunner"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: "assert "xxxxx" in paths"
flake8.checker            SpawnPoolWorker-76    395 DEBUG    Logical line: "assert "xxxxxxxxxxxx" not in paths"
flake8.checker            SpawnPoolWorker-74    485 DEBUG    Logical line: "except ImportError:"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "def test_progress_reporter_injection(tmp_path):"
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxx""
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: "class DuplicateDetector:"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "f2 = tmp_path / "xxxxxxx""
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: "def find_duplicates(self, files):"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "f1.write_bytes(b"xxxx")"
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "f2.write_bytes(b"xxxx")"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "c = Container()"
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: "def find_potential_matches(self, files, threshold=0.8):"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: "fake = FakeReporter()"
flake8.checker            SpawnPoolWorker-74    487 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-76    397 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    399 DEBUG    Logical line: "c.progress_reporter.override(providers.Object(fake))"
flake8.checker            SpawnPoolWorker-74    489 DEBUG    Logical line: "class ResultExporter:"
flake8.checker            SpawnPoolWorker-76    399 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    399 DEBUG    Logical line: "db = c.database()"
flake8.checker            SpawnPoolWorker-74    489 DEBUG    Logical line: "def export_yaml(self, result, output_path):"
flake8.checker            SpawnPoolWorker-76    399 DEBUG    Logical line: "scanner = FileScanner(db=db)"
flake8.checker            SpawnPoolWorker-74    489 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-76    399 DEBUG    Logical line: "scanner.SUPPORTED_EXTENSIONS = None"
flake8.checker            SpawnPoolWorker-76    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    490 DEBUG    Logical line: "class ScanResult:"
flake8.checker            SpawnPoolWorker-76    400 DEBUG    Logical line: "files = list(scanner.scan_directory(tmp_path, recursive=False, progress_reporter=None))"
flake8.checker            SpawnPoolWorker-74    490 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-74    490 DEBUG    Logical line: "self.metadata = ScanMetadata()"
flake8.checker            SpawnPoolWorker-76    400 DEBUG    Logical line: "detector = DuplicateDetector(progress_reporter=fake)"
flake8.checker            SpawnPoolWorker-74    490 DEBUG    Logical line: "self.duplicate_groups = []"
flake8.checker            SpawnPoolWorker-76    400 DEBUG    Logical line: "duplicates = detector.find_duplicates(files)"
flake8.checker            SpawnPoolWorker-74    490 DEBUG    Logical line: "self.potential_matches = []"
flake8.checker            SpawnPoolWorker-76    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    401 DEBUG    Logical line: "assert isinstance(fake, FakeReporter)"
flake8.checker            SpawnPoolWorker-74    491 DEBUG    Logical line: "self.statistics = {}"
flake8.checker            SpawnPoolWorker-74    491 DEBUG    Logical line: "class ScanMetadata:"
flake8.checker            SpawnPoolWorker-76    401 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    401 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    491 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-76    401 DEBUG    Logical line: "assert any(len(getattr(group, "xxxxx", [])) >= 2 for group in duplicates)"
flake8.checker            SpawnPoolWorker-74    491 DEBUG    Logical line: "self.scan_date = datetime.now().isoformat() + "x""
flake8.checker            SpawnPoolWorker-74    491 DEBUG    Logical line: "self.scanned_directory = "xxxxx""
flake8.checker            SpawnPoolWorker-74    492 DEBUG    Logical line: "self.duration_seconds = 1.0"
flake8.checker            SpawnPoolWorker-74    492 DEBUG    Logical line: "self.total_files_found = 0"
flake8.checker            SpawnPoolWorker-74    492 DEBUG    Logical line: "self.total_files_processed = 0"
flake8.checker            SpawnPoolWorker-74    492 DEBUG    Logical line: "self.recursive = True"
flake8.checker            SpawnPoolWorker-74    492 DEBUG    Logical line: "self.errors = []"
flake8.options.manager    SpawnPoolWorker-77    354 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-74    493 DEBUG    Logical line: "def main():"
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-74    493 DEBUG    Logical line: "raise NotImplementedError("xxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-74    493 DEBUG    Logical line: "class CliRunner:"
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-74    493 DEBUG    Logical line: "def invoke(self, func, args):"
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-77    355 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-74    493 DEBUG    Logical line: "from collections import namedtuple"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "Result = namedtuple("xxxxxx", ["xxxxxxxxx", "xxxxxx"])"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: "assert (config["xxxxxxxxxxxxxx"] == ConfigManager.DEFAULT_CONFIG["xxxxxxxxxxxxxx"])"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "return Result(1, "xxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "class TestYAMLExportIntegration:"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: "def test_load_config_handles_corrupted_file(self):"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "def setup_method(self):"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "self.temp_dir = tempfile.mkdtemp()"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "self.scanner = FileScanner()"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "self.detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-75    434 DEBUG    Logical line: "with open(config_path, "x") as f:"
flake8.checker            SpawnPoolWorker-74    494 DEBUG    Logical line: "self.exporter = ResultExporter()"
flake8.options.manager    SpawnPoolWorker-77    356 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-75    436 DEBUG    Logical line: "f.write("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: "self.cli_runner = CliRunner()"
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-75    436 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: "self.create_test_videos()"
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: "def teardown_method(self):"
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B821A209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-77    358 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    436 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: "shutil.rmtree(self.temp_dir, ignore_errors=True)"
flake8.checker            SpawnPoolWorker-75    436 DEBUG    Logical line: "config = config_manager.load_config()"
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: "def create_test_videos(self):"
flake8.options.config     SpawnPoolWorker-77    358 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-77    358 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-77    358 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.checker            SpawnPoolWorker-76    406 DEBUG    Logical line: "from dependency_injector import providers"
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    436 DEBUG    Logical line: ""
flake8.options.aggregator SpawnPoolWorker-77    358 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-77    358 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-77    358 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-74    496 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    437 DEBUG    Logical line: "assert config == ConfigManager.DEFAULT_CONFIG"
flake8.checker            SpawnPoolWorker-74    497 DEBUG    Logical line: "duplicate_content = b"xxxxxxxxxxxxxxxxxxxxxxx" * 5000"
flake8.checker            SpawnPoolWorker-76    408 DEBUG    Logical line: "from src.lib.container import Container"
flake8.checker            SpawnPoolWorker-75    437 DEBUG    Logical line: "def test_get_setting(self):"
flake8.checker            SpawnPoolWorker-74    497 DEBUG    Logical line: "self.duplicate1 = Path(self.temp_dir) / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    408 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.checker            SpawnPoolWorker-74    497 DEBUG    Logical line: "self.duplicate2 = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    408 DEBUG    Logical line: "class DummyConfigManager:"
flake8.checker            SpawnPoolWorker-75    437 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    437 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-76    408 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-74    497 DEBUG    Logical line: "for file in [self.duplicate1, self.duplicate2]:"
flake8.checker            SpawnPoolWorker-76    408 DEBUG    Logical line: "self._store = {}"
flake8.checker            SpawnPoolWorker-75    437 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    498 DEBUG    Logical line: "with open(file, "xx") as f:"
flake8.checker            SpawnPoolWorker-76    409 DEBUG    Logical line: "def get(self, key, default=None):"
flake8.checker            SpawnPoolWorker-74    498 DEBUG    Logical line: "f.write(duplicate_content)"
flake8.checker            SpawnPoolWorker-76    409 DEBUG    Logical line: "return self._store.get(key, default)"
flake8.checker            SpawnPoolWorker-75    438 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-74    498 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    498 DEBUG    Logical line: "unique_content = b"xxxxxxxxxxxxxxxxxxxx" * 5000"
flake8.checker            SpawnPoolWorker-76    409 DEBUG    Logical line: "def set(self, key, value):"
flake8.checker            SpawnPoolWorker-75    438 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-74    498 DEBUG    Logical line: "self.unique1 = Path(self.temp_dir) / "xxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    409 DEBUG    Logical line: "self._store[key] = value"
flake8.checker            SpawnPoolWorker-76    410 DEBUG    Logical line: "def test_config_manager_override():"
flake8.checker            SpawnPoolWorker-74    499 DEBUG    Logical line: "with open(self.unique1, "xx") as f:"
flake8.checker            SpawnPoolWorker-76    410 DEBUG    Logical line: "c = Container()"
flake8.checker            SpawnPoolWorker-74    499 DEBUG    Logical line: "f.write(unique_content)"
flake8.checker            SpawnPoolWorker-76    410 DEBUG    Logical line: "dummy = DummyConfigManager()"
flake8.checker            SpawnPoolWorker-74    499 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-76    410 DEBUG    Logical line: "c.config_manager.override(providers.Object(dummy))"
flake8.checker            SpawnPoolWorker-75    439 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    499 DEBUG    Logical line: "def test_yaml_export_as_default_format(self):"
flake8.checker            SpawnPoolWorker-75    439 DEBUG    Logical line: "assert config_manager.get_setting("xxxxxxxxxxxxxxx") == 0.8"
flake8.checker            SpawnPoolWorker-76    410 DEBUG    Logical line: "cm = c.config_manager()"
flake8.checker            SpawnPoolWorker-74    500 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-76    411 DEBUG    Logical line: "cm.set("xxxxxx", 42)"
flake8.checker            SpawnPoolWorker-75    440 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    500 DEBUG    Logical line: "export_file = Path(self.temp_dir) / "xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    411 DEBUG    Logical line: "assert cm.get("xxxxxx") == 42"
flake8.checker            SpawnPoolWorker-75    440 DEBUG    Logical line: "assert (config_manager.get_setting("xxxxxxxxxxxx", "xxxxxxxxxxxxx") == "xxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    500 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    411 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    411 DEBUG    Logical line: "assert c.config_manager() is dummy"
flake8.checker            SpawnPoolWorker-74    500 DEBUG    Logical line: "result = self.cli_runner.invoke(main, ["xxxxxxxx", str(export_file), str(self.temp_dir)])"
flake8.checker            SpawnPoolWorker-75    440 DEBUG    Logical line: "def test_set_setting(self):"
flake8.checker            SpawnPoolWorker-76    411 DEBUG    Logical line: "def test_database_override(tmp_path):"
flake8.checker            SpawnPoolWorker-74    500 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    441 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    501 DEBUG    Logical line: "assert result.exit_code == 0"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "f = tmp_path / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-75    441 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-74    501 DEBUG    Logical line: "assert export_file.exists()"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "f.write_bytes(b"xxxxxxx")"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "c = Container()"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "class StubDB:"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: "with open(export_file, "x") as f:"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "self.calls = 0"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "def get_cached_hash(self, path, size, mtime):"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: "data = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "self.calls += 1"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: "assert isinstance(data, dict)"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "return "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: "self.validate_yaml_export_schema(data)"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "def set_cached_hash(self, path, size, mtime, hashv):"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: "config_manager.set_setting("xxxxxxxxxxxxxxx", 0.9)"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "self.calls += 1"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: "assert config_manager.get_setting("xxxxxxxxxxxxxxx") == 0.9"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: "def test_yaml_human_readable_format(self):"
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "stub = StubDB()"
flake8.checker            SpawnPoolWorker-74    502 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-76    412 DEBUG    Logical line: "c.database.override(providers.Object(stub))"
flake8.checker            SpawnPoolWorker-75    442 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "with open(config_path, "x") as f:"
flake8.checker            SpawnPoolWorker-76    414 DEBUG    Logical line: "db = c.database()"
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: "export_file = Path(self.temp_dir) / "xxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    414 DEBUG    Logical line: "scanner = FileScanner(db=db)"
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "saved_config = yaml.safe_load(f)"
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    414 DEBUG    Logical line: "scanner.SUPPORTED_EXTENSIONS = None"
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "assert saved_config["xxxxxxxxxxxxxxx"] == 0.9"
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: "scanned_files = list(self.scanner.scan_directory(Path(self.temp_dir)))"
flake8.checker            SpawnPoolWorker-76    414 DEBUG    Logical line: "results = scanner.scan([tmp_path])"
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "def test_add_scan_history(self):"
flake8.checker            SpawnPoolWorker-76    414 DEBUG    Logical line: "assert any(r.get("xxxx") == "xxxxxxxxx" for r in results)"
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: "duplicate_groups = self.detector.find_duplicates(scanned_files)"
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-76    414 DEBUG    Logical line: "assert stub.calls >= 1"
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)], recursive=True)"
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-78    356 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "scan_path = Path("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: "scan_result = ScanResult(metadata)"
flake8.options.manager    SpawnPoolWorker-78    356 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-78    356 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-75    444 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-74    504 DEBUG    Logical line: "scan_result.duplicate_groups = duplicate_groups"
flake8.options.manager    SpawnPoolWorker-78    356 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-78    358 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-74    506 DEBUG    Logical line: "scan_result.metadata.scanned_directory = str(self.temp_dir)"
flake8.options.manager    SpawnPoolWorker-78    358 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-75    446 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-75    446 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    506 DEBUG    Logical line: "scan_result.metadata.total_files_found = len(scanned_files)"
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-74    506 DEBUG    Logical line: "self.exporter.export_yaml(scan_result, export_file)"
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-78    359 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-75    446 DEBUG    Logical line: "config_manager.add_scan_history(scan_path, 10, 2)"
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-74    507 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-74    507 DEBUG    Logical line: "with open(export_file, "x") as f:"
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-75    447 DEBUG    Logical line: "history = config_manager.get_scan_history()"
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-74    507 DEBUG    Logical line: "content = f.read()"
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-74    507 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-74    507 DEBUG    Logical line: "assert "xxxxxxxx" in content"
flake8.checker            SpawnPoolWorker-75    447 DEBUG    Logical line: "assert len(history) == 1"
flake8.options.manager    SpawnPoolWorker-78    360 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-75    448 DEBUG    Logical line: "assert history[0]["xxxx"] == str(scan_path.resolve())"
flake8.checker            SpawnPoolWorker-74    508 DEBUG    Logical line: "assert "xxxxxxxxx" in content"
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.checker            SpawnPoolWorker-75    448 DEBUG    Logical line: "assert history[0]["xxxxxxxxxx"] == 10"
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-74    508 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxx" in content"
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002A8758209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-78    361 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-78    362 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-75    449 DEBUG    Logical line: "assert history[0]["xxxxxxxxxxxxxxxx"] == 2"
flake8.checker            SpawnPoolWorker-74    509 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxx" in content"
flake8.checker            SpawnPoolWorker-75    449 DEBUG    Logical line: "assert "xxxxxxxxxxxx" in history[0]"
flake8.checker            SpawnPoolWorker-74    509 DEBUG    Logical line: ""
flake8.options.config     SpawnPoolWorker-78    362 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-75    449 DEBUG    Logical line: ""
flake8.options.config     SpawnPoolWorker-78    362 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.checker            SpawnPoolWorker-74    509 DEBUG    Logical line: "assert "xx" in content"
flake8.options.config     SpawnPoolWorker-78    362 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-78    362 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.checker            SpawnPoolWorker-75    449 DEBUG    Logical line: "config = config_manager.get_all_settings()"
flake8.options.aggregator SpawnPoolWorker-78    362 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-78    362 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-74    509 DEBUG    Logical line: "assert "xx" in content or content.count("x") > 0"
flake8.checker            SpawnPoolWorker-75    449 DEBUG    Logical line: "assert config["xxxxxxxxxxx"] == 1"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "assert config["xxxxxxxxxxxxxxxxxxxxx"] == 10"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "assert content.count("x") == 0"
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "assert config["xxxxxxxxxxxxxxxxxxxxxx"] == 2"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "assert content.count("x") <= 2"
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "def test_add_scan_history_updates_existing_path(self):"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "@pytest.mark.integration"
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "def test_yaml_export_file_size_human_readable(self):"
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "scan_path = Path("xxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "sizes_and_names = [(1024, "xxxxxxxxx"), (1048576, "xxxxxxxxxx"), (1073741824, "xxxxxxxxx"), ]"
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "for size, name in sizes_and_names:"
flake8.checker            SpawnPoolWorker-75    450 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-74    510 DEBUG    Logical line: "file_path = Path(self.temp_dir) / name"
flake8.checker            SpawnPoolWorker-75    453 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    513 DEBUG    Logical line: "content = b"x" * size"
flake8.checker            SpawnPoolWorker-75    453 DEBUG    Logical line: "config_manager.add_scan_history(scan_path, 10, 2)"
flake8.checker            SpawnPoolWorker-74    513 DEBUG    Logical line: "with open(file_path, "xx") as f:"
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-75    453 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    513 DEBUG    Logical line: "f.write(content)"
flake8.checker            SpawnPoolWorker-75    453 DEBUG    Logical line: "config_manager.add_scan_history(scan_path, 15, 3)"
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: "def test_mixed_size_group_not_marked_as_series(tmp_path):"
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    513 DEBUG    Logical line: "export_file = Path(self.temp_dir) / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-75    453 DEBUG    Logical line: "history = config_manager.get_scan_history()"
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    423 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    425 DEBUG    Logical line: "b = b"xxx""
flake8.checker            SpawnPoolWorker-76    425 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    515 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    516 DEBUG    Logical line: "scanned_files = list(self.scanner.scan_directory(Path(self.temp_dir)))"
flake8.checker            SpawnPoolWorker-76    427 DEBUG    Logical line: "f2 = tmp_path / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-76    427 DEBUG    Logical line: "f3 = tmp_path / "xxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-74    516 DEBUG    Logical line: "duplicate_groups = self.detector.find_duplicates(scanned_files)"
flake8.checker            SpawnPoolWorker-76    427 DEBUG    Logical line: "f1.write_bytes(b)"
flake8.checker            SpawnPoolWorker-74    516 DEBUG    Logical line: "metadata = ScanMetadata([Path(self.temp_dir)], recursive=True)"
flake8.checker            SpawnPoolWorker-76    428 DEBUG    Logical line: "f2.write_bytes(b)"
flake8.checker            SpawnPoolWorker-76    428 DEBUG    Logical line: "f3.write_bytes(b)"
flake8.checker            SpawnPoolWorker-74    517 DEBUG    Logical line: "scan_result = ScanResult(metadata)"
flake8.checker            SpawnPoolWorker-76    428 DEBUG    Logical line: "files = [UserFile(f1), UserFile(f2), UserFile(f3)]"
flake8.checker            SpawnPoolWorker-75    456 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    460 DEBUG    Logical line: "assert len(history) == 1"
flake8.checker            SpawnPoolWorker-74    520 DEBUG    Logical line: "scan_result.duplicate_groups = duplicate_groups"
flake8.checker            SpawnPoolWorker-76    430 DEBUG    Logical line: "class Meta:"
flake8.checker            SpawnPoolWorker-76    430 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-74    520 DEBUG    Logical line: "scan_result.metadata.total_files_found = len(scanned_files)"
flake8.checker            SpawnPoolWorker-75    460 DEBUG    Logical line: "assert history[0]["xxxxxxxxxx"] == 15"
flake8.checker            SpawnPoolWorker-76    430 DEBUG    Logical line: "self.series_groups = []"
flake8.checker            SpawnPoolWorker-74    520 DEBUG    Logical line: "self.exporter.export_yaml(scan_result, export_file)"
flake8.checker            SpawnPoolWorker-75    460 DEBUG    Logical line: "assert history[0]["xxxxxxxxxxxxxxxx"] == 3"
flake8.checker            SpawnPoolWorker-75    460 DEBUG   flake8.checker            SpawnPoolWorker-74    520 DEBUG    Logi Logical line: "assert history[0]["xxxxxxxxxxxxxxxx"] == 3"
cal line: "self.exporter.export_yaml(scan_result, export_file)"
flake8.checker            SpawnPoolWorker-76    431 DEBUG    Logical line: "self.series_groups_found = 0"
flake8.checker            SpawnPoolWorker-75    462 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-74    522 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    462 DEBUG    Logical line: "config = config_manager.get_all_settings()"
flake8.checker            SpawnPoolWorker-76    432 DEBUG    Logical line: "detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-76    432 DEflake8.checker            SpawnPoolWorker-74    522 DEBUG    Logical line: "with open(export_file, "x") as f:"
flake8.checker            Sflake8.checker            SpawnPoolWorker-74    522 DEBUG    Logical line: "with open(export_file, "x") as f:"
--- Logging error ---
flake8.checker            SpawnPoolWorker-74    522 DEBUG    Logicaflake8.checkeflake8.checker            SpawnPoolWorker-75    462 DEBUG    Logical line: "assert config["xxxxxxxxxxx"] == 2"
r            SpawnPoolWorker-76    432 DEBUG    Logical line: "detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-76    432 DEBUG    Logical line: "metadata = Meta()"
flake8.checker            SpawnPoolWorker-75    462 DEBUG    Logical line: "assert config["xxxxxxxxxxxxxxxxxxxxx"] == 25"
flake8.checker            SpawnPoolWorker-75    462 DEBUG    Logical line: "assert config["xxxxxxxxxxxxxxxxxxxxxx"] == 5"
flake8.checker            SpawnPoolWorker-76    432 DEBUG    Logical line: "duplicates = detector.find_duplicates(files, progress_reporter=None, verbose=False, metadata=metadata)"
flake8.checker            SpawnPoolWorker-78    374 DEBUG    Logical line: "import types"
flake8.checker            SpawnPoolWorker-75    462 DEBUG    Logical line: "def test_add_scan_history_limits_entries(self):"
flake8.checker            SpawnPoolWorker-75    464 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    377 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-76    436 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    465 DEBUG    Logical line: "with tempfile.TemporaryDirectory() as temp_dir:"
flake8.checker            SpawnPoolWorker-78    378 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-76    436 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-76    436 DEBUG    Logical line: "assert metadata.series_groups_found == 0 or len(metadata.series_groups) == 0"
flake8.checker            SpawnPoolWorker-75    465 DEBUG    Logical line: "config_path = Path(temp_dir) / "xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    378 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.checker            SpawnPoolWorker-78    379 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.checker            SpawnPoolWorker-76    437 DEBUG    Logical line: "def test_four_sequential_files_marked_as_series(tmp_path):"
flake8.checker            SpawnPoolWorker-75    466 DEBUG    Logical line: "with patch.object(ConfigManager, "xxxxxxxxxxxxxxxx", return_value=config_path):"
flake8.checker            SpawnPoolWorker-78    379 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-78    379 DEBUG    Logical line: "class DummyMetadata:"
flake8.checker            SpawnPoolWorker-76    437 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    379 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-75    466 DEBUG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-78    3flake8.checker            SpawnPoolWorker-75    466 DEB79 DEBUG    Logical line: "def __init__(self):"
UG    Logical line: "config_manager = ConfigManager()"
flake8.checker            SpawnPoolWorker-78    380 DEBUG    Logical line: "self.series_groups = []"
flake8.checker            SpawnPoolWorker-75    467 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-75    467 DEBUG    Logical line: "for i in range(25):"
flake8.checker            SpawnPoolWorker-78    380 DEBUG    Logical line: "self.series_groups_found = 0"
flake8.checker            SpawnPoolWorker-78    380 DEBUG    Logical line: "def test_series_group_recorded_and_hashing_preserved(tmp_path):"
flake8.checker            SpawnPoolWorker-75    467 DEBUG    Logical line: "scan_path = Path(f"/test/directory{i}")"
flake8.checker            SpawnPoolWorker-76    437 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.checker            SpawnPoolWorker-75    467 DEBUG  recorded_and_hashing_preserved(tmp_path):"
flake8.checker     recorded_and_hashing_pi}")"
flake8.checker            SpawnPoolWorker-77    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
i}"flake8.ch)"
ecker            SpawnPoolWorker-76    437 DEBUG    Logical line: ""
recorded_and_hashing_preserved(tmp_path):"
--- Logging error ---
flake8.checker            SpawnPoolWorker-76    439 DEBUG    Logical line: "b = b"xxx""
flake8.checker            SpawnPoolWorker-75    469 DEBUG    Logical line: "config_manager.add_scan_history(scan_path, 1, 0)"
flake8.checker            SpawnPoolWorker-77    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.checker            SpawnPoolWorker-76    439 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxxxxx""
Traceback (most recent call last):
Traceback (most reflake8.checker            SpawnPoolWorker-76    439 D 1, 0)"
flake8.checker            SpawnPoolWorker-77    391 DEBTraceback 1, = tmp_path / "xxxxxxxxxx""
flake8.checker            S 1Trac= tmp_path / "xxxxxxxxxx""
--- Logging error ---
flake8.checke= tmp_path / "xxxxxxxxxx"Tr 1, 0)"
--- Logging error ---
flake8T= tmp_path / 1, 0)"
--- Logfla 1, 0)"= tmp_f 1, = tflake8.checker            SpawnPoolWorker-77    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
--- Logging error ---
 1flake8.checker            SpawnPoolWorker-77    391 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-78    384 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-84    186 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-77    391 DEBUG     flake8.checker            SpawTraceback (most recent call last):
flake8.checker            SpawnPoolWorker-78    384 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxflake8.checker Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-7Traceback (most recent call last):
flaTraceback (most recTracebackTracTrflake8                    SpawnPoolWorker-84    186 DEBUG aceback (most recent call last):
flake8.checker            SpawnPoolWorker-78    384 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    386 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    386 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    387 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    387 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    387 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    388 DEBUG    Logical line: "f2 = tmp_path / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    388 DEBUG    Logical line: "f3 = tmp_path / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    388 DEBUG    Logical line: "f1.write_bytes(b"xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    388 DEBUG    Logical line: "f2.write_bytes(b"xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    388 DEBUG    Logical line: "f3.write_bytes(b"xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    388 DEBUG    Logical line: "files = [UserFile(f1), UserFile(f2), UserFile(f3), ]"
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "metadata = DummyMetadata()"
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "duplicates = detector.find_duplicates(files, progress_reporter=None, verbose=False, metadata=metadata)"
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "expected_h = hashlib.blake2b(b"xxxxxxxxxxxxxxxxx").hexdigest()"
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "found_hashes = [g.hash_value for g in duplicates]"
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "assert expected_h in found_hashes, f"Expected duplicate group for hash {expected_h}""
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    389 DEBUG    Logical line: "assert isinstance(metadata.series_groups, list)"
flake8.checker            SpawnPoolWorker-78    391 DEBUG    Logical line: "assert len(metadata.series_groups) >= 1"
flake8.checker            SpawnPoolWorker-78    391 DEBUG    Logical line: "group = metadata.series_groups[0]"
flake8.checker            SpawnPoolWorker-78    391 DEBUG    Logical line: "assert isinstance(group, dict)"
flake8.checker            SpawnPoolWorker-78    391 DEBUG    Logical line: "assert group.get("xxxxxxxxxx") == 3"
flake8.checker            SpawnPoolWorker-78    392 DEBUG    Logical line: "assert group.get("xxxxxx") == "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    392 DEBUG    Logical line: "assert metadata.series_groups_found >= 1"
flake8.checker            SpawnPoolWorker-78    392 DEBUG    Logical line: "def test_non_series_duplicates_unchanged(tmp_path):"
flake8.checker            SpawnPoolWorker-78    392 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    392 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    393 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    393 DEBUG    Logical line: "f2 = tmp_path / "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    393 DEBUG    Logical line: "f1.write_bytes(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    393 DEBUG    Logical line: "f2.write_bytes(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    393 DEBUG    Logical line: "files = [UserFile(f1), UserFile(f2)]"
flake8.checker            SpawnPoolWorker-78    394 DEBUG    Logical line: "detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-78    394 DEBUG    Logical line: "metadata = DummyMetadata()"
flake8.checker            SpawnPoolWorker-78    394 DEBUG    Logical line: "duplicates = detector.find_duplicates(files, progress_reporter=None, verbose=False, metadata=metadata)"
flake8.checker            SpawnPoolWorker-78    395 DEBUG    Logical line: "assert len(duplicates) == 1"
flake8.checker            SpawnPoolWorker-78    395 DEBUG    Logical line: "expected_x = hashlib.blake2b(b"xxxxxxxxxxxx").hexdigest()"
flake8.checker            SpawnPoolWorker-78    395 DEBUG    Logical line: "assert duplicates[0].hash_value == expected_x"
flake8.checker            SpawnPoolWorker-78    395 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    395 DEBUG    Logical line: "assert metadata.series_groups_found == 0 or len(metadata.series_groups) == 0"
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "def test_permission_error_handling(tmp_path):"
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "f_ok1 = tmp_path / "xxxxxxx""
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "f_ok2 = tmp_path / "xxxxxxx""
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "f_err = tmp_path / "xxxxxxx""
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "f_ok1.write_bytes(b"xxxxxx")"
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "f_ok2.write_bytes(b"xxxxxx")"
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "f_err.write_bytes(b"xxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: "files = [UserFile(f_ok1), UserFile(f_ok2), UserFile(f_err)]"
flake8.checker            SpawnPoolWorker-78    396 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "def raise_perm():"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "raise PermissionError("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "files[2].compute_hash = raise_perm"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "class MetaWithErrors:"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "def __init__(self):"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "self.series_groups = []"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "self.series_groups_found = 0"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "self.total_files_error = 0"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "metadata = MetaWithErrors()"
flake8.checker            SpawnPoolWorker-78    398 DEBUG    Logical line: "detector = DuplicateDetector()"
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: "duplicates = detector.find_duplicates(files, progress_reporter=None, verbose=False, metadata=metadata)"
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: "expected = hashlib.blake2b(b"xxxxxx").hexdigest()"
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: "assert any(g.hash_value == expected for g in duplicates)"
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: "err_path_str = str(f_err)"
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: "for g in duplicates:"
flake8.checker            SpawnPoolWorker-78    400 DEBUG    Logical line: "assert all(str(p) != err_path_str for p in g.paths)"
flake8                    SpawnPoolWorker-85    180 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-80    367 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-78    421 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-78    421 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-80    369 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78    423 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-80    371 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-80    371 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-78    424 DEBUG    Logical line: "import tempfile"
flake8.options.manager    SpawnPoolWorker-80    371 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-78    424 DEBUG    Logical line: "import hashlib"
flake8.options.manager    SpawnPoolWorker-80    371 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-80    371 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-80    372 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-80    372 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.checker            SpawnPoolWorker-78    425 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-78    425 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.options.manager    SpawnPoolWorker-80    373 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-80    373 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-80    373 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-78    426 DEBUG    Logical line: "from src.models.duplicate_group import DuplicateGroup"
flake8.options.manager    SpawnPoolWorker-80    373 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-78    426 DEBUG    Logical line: "class TestDuplicateGroup:"
flake8.options.manager    SpawnPoolWorker-80    373 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flakflake8.checker            SpawnPoolWorker-78    426 DEBUG    Logical line: "class TestDuplicateGroup:"
--- Logging error ---
e8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-80    374 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-80    374 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 120 (should have been between 0 and 104)
Call stack:
flake8.options.manager    SpawnPoolWorker-80    374 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001FC36AD09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-80    374 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-80    375 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-80    375 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-80    375 DEBUG    Option "max-line-length" returned value: 242
flake8.options.manager    SpawnPoolWorker-79    390 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.options.manager    SpawnPoolWorker-79    390 DEBUG    Registered option "Option(-q, --quiet,   File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfraflake8.options.config     SpawnPoolWorker-80    376 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-80    376 DEBUG    Option "ex  File "C:\Program Files\WindowsApps\PythonSoftwarflake8.options.manager    SpawnPoolWorker-79    392 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
eFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
ult='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
ult='auto', choices=('auto', 'always', 'never'), help='Whethclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
er to use color in output.  Defaults to `%(default)s`.')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8.options.config     SpawnPoolWorker-80    383 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.manager    SpawnPoolWorker-79    398 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('class TestDuplicateGroup:',)
flake8.options.aggregator SpawnPoolWorker-80    383 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.manager    SpawnPoolWorker-79    398 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    436 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.aggregator SpawnPoolWorker-80    384 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-80    384 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.aggregator SpawnPoolWorker-80    384 DEBUG    Overriding default value of (None) for "extend_ignoreflake8.options.manager    SpawnPoolWorker-79    399 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-79    399 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.options.aggregator SpawnPoolWorker-80    384 DEBUGflake8.checker            SpawnPoolWorker-78    436 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-78   flake8.options.manager    SpawnPoolWorker-79    399 DEBUG    Registered option "Option(-flake8.options.manager    SpawnPoolWorker-79 436 DEBUG    Logical line: "@pytest.fixture"
 436 DEBUG    Logical lflake8.options.manager    SpawnPoolWorker-79    400 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
B4DD5609A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
 436 DEBUG    Logical line: "@pytest.fixture"
--- Logging error ---
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-79    401 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 94 (should have been between 0 and 47)
Call stack:
flake8.options.manager    SpawnPoolWorker-79    402 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-79    402 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
  File "<string>", line 1, in <module>
flake8.options.manager    SpawnPoolWorker-79    402 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8                    SpawnPoolWorker-86    179 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-79    402 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
flake8                    SpawnPoolWorker-86    179 DEBUG flake8.options.manager    SpawnPoolWorker-79    404 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8flake8                    Spaflake8.options.manager    SpawnPoolWorker-79    404 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
--- Logging error ---
  File "C:\Program Files\WindowsApps\PythonSoftwareflake8.options.manager    SpawnPoolWorker-79    404 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B4DD5609A0>, comma_separated_list=flake8.options.manager    SpawnPoolWorker-79    404 DEBUG    Registered option "Option(--extend-ignop0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.checker            SpawnPoolWorker-80    392 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
flake8.checker            SpawnPoolWorker-80    393 DEBUG    Logical line: "from src.services.file_database import InMemoryFileDatabase"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('@pytest.fixture',)
flake8.checker            SpawnPoolWorker-78    452 DEBUG    Logical line: "def sample_content_and_hash(self):"
flake8.checker            SpawnPoolWorker-80    400 DEBUG    Logical line: "def test_file_scanner_hashes_and_caches(tmp_path, monkeypatch):"
flake8.checker            SpawnPoolWorker-78    452 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-80    400 DEBUG    Logical line: ""
flake8                    SpawnPoolWorker-87    168 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-80    400 DEBUG    Logical line: "a = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-78    452 DEBUG    Logical line: "content = b"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-80    400 DEBUG    Logical line: "b = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-78    452 DEBUG    Logical line: "hash_obj = hashlib.blake2b()"
flake8.checker            SpawnPoolWorker-80    400 DEBUG    Logical line: "a.write_bytes(b"xxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    452 DEBUG    Logical line: "hash_obj.update(content)"
flake8.checker            SpawnPoolWorker-78    452 DEBUG    Logical line: "hash_value = hash_obj.hexdigest()"
flake8.checker            SpawnPoolWorker-80    400 DEBUG    Logical line: "b.write_bytes(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    454 DEBUG    Logical line: "return content, hash_value"
flake8.checker            SpawnPoolWorker-80    402 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    454 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-80    402 DEBUG    Logical line: "monkeypatch.setattr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", lambda db_path=None: InMemoryFileDatabase(), )"
flake8.checker            SpawnPoolWorker-78    454 DEBUG    Logical line: "def sample_user_files(self, sample_content_and_hash):"
flake8.checker            SpawnPoolWorker-78    454 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-80    402 DEBUG    Logical line: "scanner = FileScanner(db_path=None, patterns=["xxxxx"], recursive=False)"
flake8.checker            SpawnPoolWorker-78    454 DEBUG    Logical line: "content, hash_value = sample_content_and_hash"
flake8.checker            SpawnPoolWorker-80    402 DEBUG    Logical line: "results = scanner.scan([tmp_path])"
flake8.checker            SpawnPoolWorker-80    405 DEBUG    Logical line: "paths = {r["xxxx"]: r for r in results}"
flake8.checker            SpawnPoolWorker-78    458 DEBUG    Logical line: "files = []"
flake8.checker            SpawnPoolWorker-80    405 DEBUG    Logical line: "assert str(a) in paths"
flake8.checker            SpawnPoolWorker-78    458 DEBUG    Logical line: "user_files = []"
flake8.checker            SpawnPoolWorker-80    405 DEBUG    Logical line: "assert str(b) in paths"
flake8.checker            SpawnPoolWorker-78    458 DEBUG    Logical line: "for i in range(3):"
flake8.checker            SpawnPoolWorker-80    406 DEBUG    Logical line: "assert paths[str(a)]["xxxx"] is not None"
flake8.checker            SpawnPoolWorker-78    458 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.checker            SpawnPoolWorker-80    406 DEBUG    Logical line: "assert paths[str(b)]["xxxx"] is not None"
flake8.checker            SpawnPoolWorker-80    407 DEBUG    Logical line: "from types import SimpleNamespace"
flake8.checker            SpawnPoolWorker-78    460 DEBUG    Logical line: "f.write(content)"
flake8.checker            SpawnPoolWorker-78    460 DEBUG    Logical line: "files.append(Path(f.name))"
flake8.checker            SpawnPoolWorker-78    460 DEBUG    Logical line: "for file_path in files:"
flake8.checker            SpawnPoolWorker-78    460 DEBUG    Logical line: "user_files.append(UserFile(file_path))"
flake8.checker            SpawnPoolWorker-78    461 DEBUG    Logical line: "yield user_files, hash_value"
flake8.checker            SpawnPoolWorker-78    461 DEBUG    Logical line: "for file_path in files:"
flake8.checker            SpawnPoolWorker-80    408 DEBUG    Logical line: "def test_validate_file_nonexistent(tmp_path):"
flake8.checker            SpawnPoolWorker-78    461 DEBUG    Logical line: "if file_path.exists():"
flake8.checker            SpawnPoolWorker-78    461 DEBUG    Logical line: "file_path.unlink()"
flake8.checker            SpawnPoolWorker-80    409 DEBUG    Logical line: "scanner = FileScanner()"
flake8.checker            SpawnPoolWorker-78    462 DEBUG    Logical line: "def test_duplicate_group_creation(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-80    409 DEBUG    Logical line: "missing = tmp_path / "xxxxxxxx""
flake8.checker            SpawnPoolWorker-78    462 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-80    409 DEBUG    Logical line: "assert not scanner.validate_file(missing)"
flake8.checker            SpawnPoolWorker-78    462 DEBUG    Logical line: "user_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    462 DEBUG    Logical line: "group = DuplicateGroup(hash_value, user_files[:2])"
flake8.checker            SpawnPoolWorker-80    409 DEBUG    Logical line: "def test_validate_file_zero_size(tmp_path):"
flake8.options.manager    SpawnPoolWorker-81    374 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-81    374 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.checker            SpawnPoolWorker-80    409 DEBUG    Logical line: "def test_validate_file_zero_size(tmp_path):"
flake8.options.manager    SpawnPoolWorker-81    377 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-78    465 DEBUG    Logical line: "assert group.hash_value == hash_value"
flake8.options.manager    SpawnPoolWorker-81    377 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-80    413 DEBUG    Logical line: "scanner = FileScanner()"
flake8.checker            SpawnPoolWorker-80    413 DEBUG    Logical line: "scanner = FileScanner()"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-81    377 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-80    413 DEBUG    Lflake8.checker            SpawnPoolWorker-78    465 DEBUG    Logical line: "assert len(group.files) == 2"
flake8.checker            SpawnPoolWorker-78    465 DEBUG    Logical line: "def test_duplicate_group_empty_hash_error(self):"
flake8.checker            SpawnPoolWorker-78    467 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    468 DEBUG    Logical line: "with pytest.raises(ValueError, match="xxxxxxxxxxxxxxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-78    468 DEBUG    Logical line: "DuplicateGroup("")"
flake8.checker            SpawnPoolWorker-78    468 DEBUG    Logical line: "def test_duplicate_group_creation_no_files(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    469 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    469 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    469 DEBUG    Logical line: "group = DuplicateGroup(hash_value)"
flake8.checker            SpawnPoolWorker-78    469 DEBUG    Logical line: "assert group.hash_value == hash_value"
flake8.checker            SpawnPoolWorker-78    470 DEBUG    Logical line: "assert len(group.files) == 0"
flake8.checker            SpawnPoolWorker-78    470 DEBUG    Logical line: "def test_add_file_to_group(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    470 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    470 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    470 DEBUG    Logical line: "group = DuplicateGroup(hash_value)"
flake8.checker            SpawnPoolWorker-78    470 DEBUG    Logical line: "for video_file in video_files:"
flake8.checker            SpawnPoolWorker-78    471 DEBUG    Logical line: "group.add_file(video_file)"
flake8.checker            SpawnPoolWorker-78    471 DEBUG    Logical line: "assert len(group.files) == len(video_files)"
flake8.checker            SpawnPoolWorker-78    472 DEBUG    Logical line: "for video_file in video_files:"
flake8.checker            SpawnPoolWorker-78    472 DEBUG    Logical line: "assert video_file in group.files"
flake8.checker            SpawnPoolWorker-78    472 DEBUG    Logical line: "def test_remove_file_from_group(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    472 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    472 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    472 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files)"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "file_to_remove = video_files[0]"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "group.remove_file(file_to_remove)"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "assert file_to_remove not in group.files"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "assert len(group.files) == len(video_files) - 1"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "def test_remove_file_not_in_group_error(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files[:1])"
flake8.checker            SpawnPoolWorker-78    473 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "result = group.remove_file(video_files[1])"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "assert result is False"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "def test_total_size_property(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files)"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "expected_size = sum(f.size for f in video_files)"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "assert group.total_size == expected_size"
flake8.checker            SpawnPoolWorker-78    475 DEBUG    Logical line: "def test_total_size_empty_group(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    477 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    477 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    477 DEBUG    Logical line: "group = DuplicateGroup(hash_value)"
flake8.options.manager    SpawnPoolWorker-82    362 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-82    362 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-78    478 DEBUG    Logical line: "assert group.total_size == 0"
flake8.options.manager    SpawnPoolWorker-82    362 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-82    362 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    478 DEBUG    Logical line: "def test_wasted_space_property(self, sample_user_files):"
flake8.options.manager    SpawnPoolWorker-82    362 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    479 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-82    363 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    479 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.options.manager    SpawnPoolWorker-82    364 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78    480 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files)"
flake8.options.manager    SpawnPoolWorker-82    364 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-78    480 DEBUG    Logical line: "if len(video_files) > 1:"
flake8.checker            SpawnPoolWorker-78    480 DEBUG    Logical line: "if len(video_files) > 1:"
flake8.options.manager    SpawnPoolWorker-82    367 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-78    482 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-82    367 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-82    367 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    482 DEBUG    Logical line: "file_sizes = [f.size for f in video_files]"
in video_files]"
flake8.options.manager    SpawnPoolWorker-82    367 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-82    369 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-78    484 DEBUG    Logical line: "expected_wasted = sum(file_sizes) - max(file_sizes)"
flake8.options.manager    SpawnPoolWorker-82    369 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78    484 DEBUG    Logical line: "assert group.wasted_space == expected_wasted"
flake8.options.manager    SpawnPoolWorker-82    369 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-82    369 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78    484 DEBUG    Logical line: "else:"
flake8.checker            SpawnPoolWorker-78    484 DEBUG    Logical line: "else:"
flake8.options.manager    SpawnPoolWorker-82    371 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    486 DEBUG    Logical line: "assert group.wasted_space == 0"
flake8.options.manager    SpawnPoolWorker-82    371 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    486 DEBUG    Logical line: "def test_file_count_property(self, sample_user_files):"
_file_count_property(self, sample_user_files):"
flake8.options.manager    SpawnPoolWorker-82    371 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_sepaflake8                    SpawnPoolWorker-88    170 DEBUG    Added a None logging handler to logger root at flake8
rated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-82    371 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-82    371 DEBUG    Registered option "Option(--disable-noqa, action='store_truflake8.checker            SpawnPoolWorker-78    486 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    486 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-82    373 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-78    488 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.options.manager    SpawnPoolWorker-82    373 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-82    373 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-78    488 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files)"
flake8.options.manager    SpawnPoolWorker-82    373 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-82    373 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78    488 DEBUG    Logical line: "assert group.file_count == len(video_files)"
flake8.options.manager    SpawnPoolWorker-82    373 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-82    375 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-78    490 DEBUG    Logical line: "def test_group_id_uniqueness(self, sample_user_files):"
flake8.options.manager    SpawnPoolWorker-82    375 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-78    490 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-82    375 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-82    375 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-78    490 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: "group1 = DuplicateGroup(hash_value, video_files[:1])"
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: "group2 = DuplicateGroup(hash_value, video_files[1:2])"
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B577E209A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Extending default select list with ['E']
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-82    377 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: "assert group1 != group2"
flake8.options.config     SpawnPoolWorker-82    377 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-82    377 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: "def test_group_id_format(self, sample_user_files):"
flake8.options.config     SpawnPoolWorker-82    377 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-82    377 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-82    377 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.aggregator SpawnPoolWorker-82    377 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-78    492 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    494 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files[:2])"
flake8.checker            SpawnPoolWorker-78    494 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    494 DEBUG    Logical line: "assert isinstance(group.hash_value, str)"
flake8.checker            SpawnPoolWorker-78    494 DEBUG    Logical line: "assert len(group.hash_value) > 0"
flake8.checker            SpawnPoolWorker-78    494 DEBUG    Logical line: "assert group.hash_value == hash_value"
flake8.checker            SpawnPoolWorker-78    494 DEBUG    Logical line: "def test_str_representation(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    496 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-82    383 DEBUG    Logical line: "from src.services.file_hasher import stream_hash, hash_stream_from_bytes_iter"
flake8.checker            SpawnPoolWorker-78    498 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-82    383 DEBUG    Logical line: "def test_hash_stream_small_file(tmp_path):"
flake8.checker            SpawnPoolWorker-78    498 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files[:2])"
flake8.checker            SpawnPoolWorker-82    383 DEBUG    Logical line: "p = tmp_path / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    498 DEBUG    Logical line: "str_repr = str(group)"
flake8.checker            SpawnPoolWorker-82    383 DEBUG    Logical line: "data = b"xxxxxxxxxxx" * 100"
flake8.checker            SpawnPoolWorker-78    498 DEBUG    Logical line: "assert "xxxxxxxxxxxxxx" in str_repr"
flake8.checker            SpawnPoolWorker-82    385 DEBUG    Logical line: "p.write_bytes(data)"
flake8.checker            SpawnPoolWorker-78    500 DEBUG    Logical line: "assert "xxxxxxx" in str_repr"
flake8.checker            SpawnPoolWorker-78    500 DEBUG    Logical line: "assert "xxxxxxx" in str_repr"
flake8.checker            SpawnPoolWorker-82    385 DEBUG    Logical line: "h = stream_hash(p, chunk_size=16)"
flake8.checker            SpawnPoolWorker-78    500 DEBUG    Logical line: "def test_equality_comparison(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-82    385 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    500 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-82    385 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-78    500 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-82    385 DEBUG    Logical line: "expect = hashlib.blake2b(data).hexdigest()"
flake8.checker            SpawnPoolWorker-78    500 DEBUG    Logical line: "group1 = DuplicateGroup(hash_value, video_files[:2])"
lue, video_files[:2])"
flake8.checker            SpawnPoolWorker-82    385 DEBUG   lue, video_files[:2])"
flake8.checker            SpawnPoolWorker-82    387 DEBUG    Logical line: "assert h == expect"
flake8.checker            SpawnPoolWorker-78    502 DEBUG    Logical line: "group2 = DuplicateGroup(hash_value, video_files[:2])"
flake8.checker            SpawnPoolWorker-82    387 DEBUG    Logical line: "def test_hash_stream_equivalence_iter():"
flake8.checker            SpawnPoolWorker-78    502 DEBUG    Logical line: "different_hash = "xxxxxxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-82    387 DEBUG    Logical line: "chunks = [b"x" * 1000, b"x" * 2048, b"x" * 512]"
flake8.checker            SpawnPoolWorker-78    502 DEBUG    Logical line: "group3 = DuplicateGroup(different_hash)"
flake8.checker            SpawnPoolWorker-82    387 DEBUG    Logical line: "h1 = hash_stream_from_bytes_iter(chunks)"
flake8.checker            SpawnPoolWorker-78    502 DEBUG    Logical line: ""
  SpawnPoolWorker-78    502 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-82    387 DEBUG   Logical line: "h1 = hash_stream_from_bytes_iter(chunks)"
  SpawnPoolWorker-78    502  SpawnPoolWorker-78    502 DEBUG    Logical line: ""
 Logical line: "h1 = hash_stream_from_bytes_iter(chunks)"
--- Logging error ---
flake8.checker            SpawnPoolWorker-78    504 DEBUG    Logical line: "assert group1 == group2"
flake8.checker            SpawnPoolWorker-78    504 DEBUG    Logical line: "assert group1 != group3"
flake8.checker            SpawnPoolWorker-78    504 DEBUG    Logical line: "def test_to_dict(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    504 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    504 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    504 DEBUG    Logical line: "group = DuplicateGroup(hash_value, video_files[:2])"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "data = group.to_dict()"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert "xxxx" in data"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert "xxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert "xxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert "xxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert "xxxxx" in data"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert data["xxxx"] == hash_value"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert data["xxxxxxxxxx"] == 2"
flake8.checker            SpawnPoolWorker-78    506 DEBUG    Logical line: "assert len(data["xxxxx"]) == 2"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "def test_add_file_wrong_hash_error(self, sample_user_files):"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "video_files, hash_value = sample_user_files"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "group = DuplicateGroup(hash_value)"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "different_file_path = Path(f.name)"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-78    508 DEBUG    Logical line: "different_file = UserFile(different_file_path)"
flake8.checker            SpawnPoolWorker-78    510 DEBUG    Logical line: "with pytest.raises(ValueError, match="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"):"
flake8.checker            SpawnPoolWorker-78    510 DEBUG    Logical line: "group.add_file(different_file)"
flake8.checker            SpawnPoolWorker-78    511 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-78    511 DEBUG    Logical line: "if different_file_path.exists():"
flake8.checker            SpawnPoolWorker-78    512 DEBUG    Logical line: "different_file_path.unlink()"
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-83    355 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78    517 DEBUG    Logical line: "import sys"
flake8.options.manager    SpawnPoolWorker-83    357 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-83    357 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-78    519 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-83    357 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    519 DEBUG    Logical line: "import time"
flake8.options.manager    SpawnPoolWorker-83    357 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-83    357 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-78    519 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-83    357 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78    519 DEBUG    Logical line: "sys.path.append(str(Path(__file__).resolve().parents[1]))"
flake8.checker            SpawnPoolWorker-78    519 DEBUG    Logical line: "sys.path.append(str(Path(__file__).resolve().parents[1]))"
flake8.options.manager    SpawnPoolWorker-83    359 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-83    359 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78    521 DEBUG    Logical line: "from src.lib.container import Container"
flake8.options.manager    SpawnPoolWorker-83    359 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    521 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
flake8.options.manager    SpawnPoolWorker-83    359 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_sflake8.checker            SpawnPoolWorker-78    521 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
--- Logging error ---
flake8.checker            SpawnPoolWorker-78    521 DEBUG    Logical line: "from src.services.file_scanner import FileScanner"
--- Logging error ---
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-83    360 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 136 (should have been between 0 and 128)
Call stack:
flake8.options.manager    SpawnPoolWorker-83    361 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.options.manager    SpawnPoolWorker-83    361 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-83    361 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-paflake8.options.manager    SpawnPoolWorker-83    361 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-83    361 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('from src.services.file_scanner import FileScanner',)
flake8.options.manager    SpawnPoolWorker-83    362 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-83    362 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-83    362 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78    524 DEBUG    Logical line: "from src.services.duplicate_detector import DuplicateDetector"
flake8.options.manager    SpawnPoolWorker-83    362 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-83    362 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-78    524 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.options.manager    SpawnPoolWorker-83    363 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-78    525 DEBUG    Logical line: "class FakeReporter:"
flake8.options.manager    SpawnPoolWorker-83    363 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-83    363 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-78    525 DEBUG    Logical line: "def __init__(self):"
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-78    527 DEBUG    Logical line: "self.updates = []"
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-78    527 DEBUG    Logical line: "self.started = False"
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.checker            SpawnPoolWorker-78    527 DEBUG    Logical line: "def start_progress(self, total, label):"
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.checker            SpawnPoolWorker-78    527 DEBUG    Logical line: "self.started = True"
flake8.checker            SpawnPoolWorker-78    527 DEBUG    Logical line: "self.started = True"
flake8.options.manager    SpawnPoolWorker-83    365 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001D1D7C809A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-83    367 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-83    367 DEBUG    Extending default select list with ['E']
flake8.checker            SpawnPoolWorker-78    529 DEBUG    Logical line: "def update_progress(self, current, file_name=None):"
flake8.options.manager    SpawnPoolWorker-83    367 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-78    529 DEBUG    Logical line: "self.updates.append((current, file_name))"
urrent, file_name))"
flake8.options.config     SpawnPoolWorker-83    368 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-83    370 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-83    370 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.checker            SpawnPoolWorker-78    532 DEBUG    Logical line: "def finish_progress(self):"
flake8.options.aggregator SpawnPoolWorker-83    370 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-83    370 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-83    370 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-78    532 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-78    532 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-78    532 DEBUG    Logical line: "def test_injected_reporter_and_hasher(tmp_path):"
flake8.checker            SpawnPoolWorker-78    532 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: "f2 = tmp_path / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: "content = b"xxxxxxxxxxx" * 100"
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: "f1.write_bytes(content)"
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: "f2.write_bytes(content)"
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: "c = Container()"
flake8.checker            SpawnPoolWorker-78    534 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    535 DEBUG    Logical line: "db = c.database()"
flake8.checker            SpawnPoolWorker-78    535 DEBUG    Logical line: "hasher = c.hasher()"
flake8.checker            SpawnPoolWorker-78    535 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    535 DEBUG    Logical line: "scanner = FileScanner(db=db, hasher=hasher, patterns=["xxxxx"], recursive=False)"
flake8.checker            SpawnPoolWorker-78    535 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    536 DEBUG    Logical line: "scanner.SUPPORTED_EXTENSIONS = None"
flake8.checker            SpawnPoolWorker-78    536 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    536 DEBUG    Logical line: "reporter = FakeReporter()"
flake8.checker            SpawnPoolWorker-83    377 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-83    378 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-78    540 DEBUG    Logical line: "detector = DuplicateDetector(progress_reporter=reporter)"
flake8.checker            SpawnPoolWorker-83    378 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.checker            SpawnPoolWorker-78    540 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    378 DEBUG    Logical line: "from src.models.duplicate_group import DuplicateGroup"
flake8.checker            SpawnPoolWorker-78    540 DEBUG    Logical line: "files = list(scanner.scan_directory(tmp_path, recursive=False, progress_reporter=reporter))"
flake8.checker            SpawnPoolWorker-83    378 DEBUG    Logical line: "def test_userfile_size_and_hash(tmp_path):"
flake8.checker            SpawnPoolWorker-78    541 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    379 DEBUG    Logical line: "data = b"xxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    541 DEBUG    Logical line: "assert len(files) == 2"
flake8.checker            SpawnPoolWorker-83    380 DEBUG    Logical line: "f = tmp_path / "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-78    541 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    380 DEBUG    Logical line: "f.write_bytes(data)"
flake8.checker            SpawnPoolWorker-83    380 DEBUG    Logical line: "uf = UserFile(f)"
flake8.checker            SpawnPoolWorker-78    541 DEBUG    Logical line: "dup_groups = detector.find_duplicates(files, progress_reporter=None, verbose=False, metadata=None)"
flake8.checker            SpawnPoolWorker-83    380 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    541 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    380 DEBUG    Logical line: "assert uf.size == len(data)"
flake8.checker            SpawnPoolWorker-78    543 DEBUG    Logical line: "assert reporter.started is True"
flake8.checker            SpawnPoolWorker-78    544 DEBUG    Logical line: "assert len(reporter.updates) > 0"
flake8.checker            SpawnPoolWorker-83    382 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    382 DEBUG    Logical line: "expected = hashlib.blake2b(data).hexdigest()"
flake8.checker            SpawnPoolWorker-78    544 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    545 DEBUG    Logical line: "assert any(len(g.files) >= 2 for g in dup_groups)"
flake8.checker            SpawnPoolWorker-83    383 DEBUG    Logical line: "assert uf.compute_hash() == expected"
flake8.checker            SpawnPoolWorker-78    545 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    383 DEBUG    Logical line: "d = uf.to_dict()"
flake8.checker            SpawnPoolWorker-78    545 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    383 DEBUG    Logical line: "assert d["xxxx"] == str(f)"
flake8.checker            SpawnPoolWorker-78    550 DEBUG    Logical line: "st = f1.stat()"
flake8.checker            SpawnPoolWorker-83    389 DEBUG    Logical line: "assert d["xxxx"] == len(data)"
flake8.checker            SpawnPoolWorker-78    550 DEBUG    Logical line: "cached = db.get_cached_hash(f1, st.st_size, st.st_mtime)"
flake8.checker            SpawnPoolWorker-83    389 DEBUG    Logical line: "assert d["xxxx"] == expected"
flake8.checker            SpawnPoolWorker-78    550 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    389 DEBUG    Logical line: "def test_duplicate_group_basic(tmp_path):"
flake8.checker            SpawnPoolWorker-78    550 DEBUG    Logical line: "assert cached is None or isinstance(cached, str)"
flake8.checker            SpawnPoolWorker-83    389 DEBUG    Logical line: "content = b"xxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-83    389 DEBUG    Logical line: "f1 = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: "f2 = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: "f1.write_bytes(content)"
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: "f2.write_bytes(content)"
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: "uf1 = UserFile(f1)"
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: "uf2 = UserFile(f2)"
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: "h = uf1.compute_hash()"
flake8.checker            SpawnPoolWorker-83    393 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    395 DEBUG    Logical line: "group = DuplicateGroup(h, [uf1, uf2])"
flake8.checker            SpawnPoolWorker-83    395 DEBUG    Logical line: "assert group.is_duplicate_group"
flake8.checker            SpawnPoolWorker-83    395 DEBUG    Logical line: "assert group.file_count == 2"
flake8                    SpawnPoolWorker-89    205 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-83    397 DEBUG    Logical line: "assert set(str(p) for p in group.paths) == {str(f1), str(f2)}"
flake8.checker            SpawnPoolWorker-83    397 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    397 DEBUG    Logical line: "f3 = tmp_path / "xxxxx""
flake8.checker            SpawnPoolWorker-83    397 DEBUG    Logical line: "f3.write_bytes(b"xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-83    397 DEBUG    Logical line: "uf3 = UserFile(f3)"
flake8.checker            SpawnPoolWorker-83    398 DEBUG    Logical line: "with pytest.raises(ValueError):"
flake8.checker            SpawnPoolWorker-83    398 DEBUG    Logical line: "group.add_file(uf3)"
flake8.checker            SpawnPoolWorker-83    398 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-83    398 DEBUG    Logical line: "other = DuplicateGroup(h, [uf1])"
flake8.checker            SpawnPoolWorker-83    398 DEBUG    Logical line: "group.merge_group(other)"
flake8.checker            SpawnPoolWorker-83    399 DEBUG    Logical line: "assert group.file_count >= 2"
flake8.options.manager    SpawnPoolWorker-84    362 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-84    362 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-84    362 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-84    362 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001547E0609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-84    363 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001547E0609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-84    363 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001547E0609A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-84    363 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8                    SpawnPoolWorker-90    172 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-83    404 DEBUG    Logical line: "import time"
flake8.options.manager    SpawnPoolWorker-84    367 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-83    404 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-84    367 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-83    404 DEBUG    Logical line: "from src.models.scan_metadata import ScanMetadata"
flake8.checker            SpawnPoolWorker-78    567 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-84    373 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001547E0609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-83    410 DEBUG    Logical line: "def test_to_dict_and_timing():"
flake8.checker            SpawnPoolWorker-78    571 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-84    373 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001547E0609A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-84    373 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001547E0609A0>, comma_sepflake8.checker            SpawnPoolWorker-78  arated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
  571 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-84    375 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-78    574 DEBUG    Logical line: "from pathlib import Path"
flake8.checker            SpawnPoolWorker-83    412 DEBUG    Logical line: "md = ScanMetadata([Path("xxxx"), Path("xx")], recursive=False)"
ort Path"
flake8.options.manager    SpawnPoolWorker-84    375 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationsflake8.checker            SpawnPoolWorker-83    412 DEBUG    Logical lort Pflake8.checker            SpawnPool`` options.')".
orflake8.checker   t Path"
         SpawnPoolWorker-83    412 DEBUG    Logical line: "md = ScanMetadata([Path("xxxx"), Path("xx")], recursive=False)"
         SpawnPoolWorker-83    412 DEBUG    Logical line: "md `` options.')".
--- Logging error ---
`` options.')".
---`` options`` op         SpawnPoolWorker-83    412 DEBUG    Logical line: "md = ScanMetadata([Path("xxxx"), Path("xx")], recursive=False)"
--- Logging error ---
``         SpawnPoolWorker-83    412 DEBUG    Logical line: "md = ScanMetadflake8.checker            SpawnPoolWorker-78    577 DEBUG    Logical line: "import tempfile"
         SpawnPoolWorker-83    412 Dflake8.checker            SpawnPoolWorker-78    577 DEBUG    Logical line: "import tempfile"
`flake8.checker            SpawnPoolWorker-78    578 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-78    579 DEBUG    Logical line: "from src.models.potential_match_group import PotentialMatchGroup"
flake8.checker            SpawnPoolWorker-78    579 DEBUG    Logical line: "class TestPotentialMatchGroup:"
flake8.checker            SpawnPoolWorker-78    579 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "def sample_user_files(self):"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "files = []"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "user_files = []"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "file_names = ["xxxxxxxxx", "xxxxxxxxxx", "xxxxxxxxxx"]"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "for name in file_names:"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.checker            SpawnPoolWorker-78    584 DEBUG    Logical lineflake8.checker            SpawnPoolWflake8.checker            SpawnPoolWorker-78    591 DEBUG    Logical line: "f.write(name.encode())"
flake8.checker            SpawnPoolWorker-78    591 DEBUG    Logical line: "temp_path = Path(f.name)"
flake8.checker            SpawnPoolWorker-78    592 DEBUG    Logical line: "final_path = temp_path.parent / name"
flake8.checker            SpawnPoolWorker-78    592 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    592 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-78    592 DEBUG    Logical line: "if final_path.exists():"
flake8.checker            SpawnPoolWorker-78    592 DEBUG    Logical line: "final_path.unlink()"
flake8.checker            SpawnPoolWorker-78    593 DEBUG    Logical line: "except Exception:"
flake8.checker            SpawnPoolWorker-78    593 DEBUG    Logical line: "pass"
flake8.checker            SpawnPoolWorker-78    594 DEBUG    Logical line: "temp_path.rename(final_path)"
flake8.checker            SpawnPoolWorker-78    594 DEBUG    Logical line: "files.append(final_path)"
flake8.checker            SpawnPoolWorker-78    595 DEBUG    Logical line: "for file_path in files:"
flake8.checker            SpawnPoolWorker-78    595 DEBUG    Logical line: "user_files.append(UserFile(file_path))"
flake8.options.manager    SpawnPoolWorker-85    368 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-85    368 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-78    595 DEBUG    Logical line: "yield user_files"
flake8.options.manager    SpawnPoolWorker-85    368 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-78    595 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorkflake8.options.manager    SpawnPoolWorker-85    368 DEBUG    Registered option "Option(--count, actiflake8.options.manager    SpawnPoolWorker-85    36flake8.checker     flake8.checker            SpawnPoolWorker-78    595 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-85    371 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    598 DEBUG    Logical line: "for user_file in user_files:"
flake8.options.manager    SpawnPoolWorker-85    371 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-85    371 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8.checker            SpawnPoolWorker-78    598 DEBUG    Logical line: "if user_file.path.exists():"
er-78    598 DEBUG    Logical line: "if user_file.path.exists():"
flake8.options.manager    SpawnPoolWorker-85    371 DEBUG    Registered option "Option(-   Logical line: "if user_file.path.exists():"
1 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8                    SpawnPoolWorker-91    183 DEBUG    Added a None logging handler to logger root at flake8
l(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    607 DEBUG    Logical line: "user_file.path.unlink()"
flake8                    SpawnPoolWorker-91    183 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-85    380 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    607 DEBUG    Logical line: "def test_potential_match_group_creation(self, sample_user_files):"
flake8.options.manager    SpawnPoolWorker-85    380 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-85    380 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-85    381 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-78    609 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-85    382 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-78    610 DEBUG    Logical line: "base_name = "xxxxx""
flake8.options.manager    SpawnPoolWorker-85    382 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-85    382 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    610 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-78    610 DEBUG    Logical line: "threshold = 0.8"
flake8.options.manager    SpawnPoolWorker-85    383 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-78    611 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_user_files[:2])"
flake8.options.manager    SpawnPoolWorker-85    383 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-85    385 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-85    385 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78    613 DEBUG    Logical line: "assert group.base_name == base_name"
flake8.options.manager    SpawnPoolWorker-85    386 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    613 DEBUG    Logical line: "assert group.similarity_threshold == threshold"
flake8.options.manager    SpawnPoolWorker-85    390 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    619 DEBUG    Logical line: "assert len(group.files) == 2"
flake8.options.manager    SpawnPoolWorker-85    392 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-85    392 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-78    619 DEBUG    Logical line: "def test_potential_match_group_empty_base_name_error(self):"
flake8.options.manager    SpawnPoolWorker-85    396 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.checker            SpawnPoolWorker-78    623 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-85    396 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-85    396 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-85    396 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78    623 DEBUG    Logical line: "with pytest.raises(ValueError, match="xxxxxxxxxxxxxxxxxxxxxxxxx"):"
flake8.options.manager    SpawnPoolWorker-86    364 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-85    400 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-86    366 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-85    400 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-78    627 DEBUG    Logical line: "PotentialMatchGroup("", 0.8)"
flake8                    SpawnPoolWorker-92    170 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-85    401 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-86    367 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-78    628 DEBUG    Logical line: "def test_potential_match_group_invalid_threshold_error(self):"
flake8.options.manager    SpawnPoolWorker-85    401 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-86    367 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    628 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-86    367 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.checker            SpawnPoolWorker-78    628 DEBUG    Loflake8.options.manager    SpawnPoolWorker-85    401 DEBUG    Extending default ignore list wiflake8.options.manager    SpawnPoolWorker-85  flake8.checker            Spawnflake8.options.manager    SpawnPoolWorker-86    367 DEBUG    Registered option "Option(--exclude, delake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
lake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalize_paths=True), help='Commgical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-85    410 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
  410 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
a-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    641 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-78    6a-separated list of files or directories to exclud41 DEBUG    Logical line: "base_name = "xxxxx""
e. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-85    415 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-85    415 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-86    381 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    642 DEBUG    Logical line: "with pytest.raises(ValueError, match="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", ):"
flake8.options.manager    SpawnPoolWorker-85    415 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-85    415 DEBUG    Registered option "Option(--max-comde, default='', type=functools.partial(<function _flake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78    642 DEBUG    Logical line: "with pytede, default='', type=functools.partial(<function _flake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalizeflake8.options.manager    SpawnPoolWorker-85    plexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
de, default='', type=functools.partial(<function _flake8_normalize at 0x0000014A7DB809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-78    643 DEBUG    Logical line: "PotentialMatchGroup(base_name, -0.1)"
MatchGroup(base_name, -0.1)"
flake8.options.manager    SpawnPoolWorker-85    416 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-85    416 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.checker            SpawnPoolWorker-78    644 DEBUG    Logical line: "with pytest.raises(ValueError, match="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", ):"
flake8.checker            SpawnPoolWorker-78    644 DEBUG    Logical line: "with pytest.raises(ValueError, match="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", ):"
flake8.options.manager    SpawnPoolWorker-85    417 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-85    417 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-85    417 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-78    645 DEBUG    Logical line: "PotentialMatchGroup(base_name, 1.1)"
flake8.options.manager    SpawnPoolWorker-85    417 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8flake8.checker            SpawnPoolWorker-78    645 DEBUG    Logical line: "PotentialMatchGroup(base_name, 1.1)"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-87    361 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
_normalize at 0x0000025BBBEC09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-85    421 DEBUG    Extending default select list with ['F']
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-87    365 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8                    SpawnPoolWorker-93    168 DEBUG    Added a None logging handler to logger root at flake8
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-85    430 DEBUG    Extending default select list with ['E']
OSError: raw write() returned invalid length 170 (should have been between 0 and 114)
Call stack:
flake8.options.manager    SpawnPoolWorker-85    430 DEBUG    Extending default select list with ['W']
flake8.options.manager    SpawnPoolWorker-87    373 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
  File "<string>", line 1, in <module>
flake8.options.config     SpawnPoolWorker-85    430 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-85    430 Dflake8.options.manager    SpawnPoolWorker-87    373 DEBUG    Registered option "Option(--count, acti  File "<string>", lon='store_true', help='Print total number of errors to standard output after all other output.')".
EBUG    Option "max-line-length" returned value: 242
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.config     SpawnPoolWorker-85    432 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64flake8.options.config     SpawnPoolWorker-85    432 DEBUG    Option "exflake8.options.manager    SpawnPoolWorker-87    376 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-87    376 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fflake8.options.config     SpawnPool  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfraflake8.options.manager    SpawnPoolWorker-87    376 DEBUG    Registered option "Option(--exclude, deflake8.options.config     SpawnPoolWorker-85    434 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.config     SpawnPoolWorker-85    434 DEBUG    Option "extend-ignore" returnflake8.options.manager    SpawnPoolWorker-87    37__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
tend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108flake8.options.manager    SpawnPoolWorker-87    377 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-88    355 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
7 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
F811, E712, B011'
7 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000020EC20E09A0>, comma_sepaflake8.options.manager    SpawnPoolWorker-88    355 DEBUG    Registered option "Option(-q, --quiet,   File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
tion.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
tion.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\poF811, E712, B011'
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-88    359 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-87    390 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
ke8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
ke8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for ol.py", line 125, in worker
    result = (True, func(*args, **kwds))
flake8.options.manager    SpawnPoolWorker-88    359 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-88    359 DEBUG    Registered option "Option(--count, actifilenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
on='store_true', help='Print total number of errors to standard output after all other output.')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCaon='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-87    391 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
che\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.options.manager    SpawnPoolWorker-87    392 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.options.manager    SpawnPoolWorker-87    392 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-87    392 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
Message: 'Logical line: "%s"'
Arguments: ('PotentialMatchGroup(base_name, 1.1)',)
flake8.options.manager    SpawnPoolWorker-87    392 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000020EC20E09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-78    677 DEBUG    Logical line: "def test_potential_match_group_creation_no_files(self):"
flake8.checker            SpawnPoolWorker-78    677 DEBUG    Logical line: "def test_potential_match_group_creation_no_files(self):"
False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-78    678 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    678 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-78    678 DEBUG    Logical line: "threshold = 0.8"
Traceback (most recent call last):
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
NameError: name '_mp_plugins' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-78    682 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold)"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 109 (should have been between 0 and 19)
Call stack:
flake8.checker            SpawnPoolWorker-78    682 DEBUG    Logical line: "assert group.base_name == base_name"
flake8.checker            SpawnPoolWorker-78    682 DEBUGflake8.checker            Spflake8                    SpawnPoolWorker-94    166 DEBUG    Added a None logging handler to logger root at flake8
awnPoolWorker-78    682 DEBUG    Logical line: "assert group.base_name == base_name"
flake8.checker            SpawnPoolWorker-78    694 DEBUG    Logical line: "assert group.similarity_threshold == threshold"
flake8.checker            SpawnPoolWorker-78    694 DEBUG    Logical line: "assert len(group.files) == 0"
flake8.checker            SpawnPoolWorker-78    695 DEBUG    Logical line: "def test_add_file_to_group(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78    695 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    695 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-78    696 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-78    696 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold)"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "for video_file in sample_video_files:"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "group.add_file(video_file)"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "assert len(group.files) == len(sample_video_files)"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "for video_file in sample_video_files:"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "assert video_file in group.files"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "def test_remove_file_from_group(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    721 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-78    7flake8.checker            File "<string>", line 1, in <module>
flake8                    SpawnPoolWorker-95    210 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-78    771 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-78    771 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_video_files)"
flake8.checker            SpawnPoolWorker-78    771 DEBUG    Logical line: "file_to_remove = sample_video_files[0]"
flake8.checker            SpawnPoolWorker-78    773 DEBUG    Logical line: "group.remove_file(file_to_remove)"
flake8.checker            SpawnPoolWorker-78    773 DEBUG    Logical line: "assert file_to_remove not in group.files"
flake8.checker            SpawnPoolWorker-78    773 DEBUG    Logical line: "assert len(group.files) == len(sample_video_files) - 1"
flake8.checker            SpawnPoolWorker-78    773 DEBUG    Logical line: "def test_remove_file_not_in_group_error(self, sample_video_files):"
73 DEBUG    Logical line: "def test_remove_file_not_in_group_error(self, sample_video_files):"
: "def test_remove_file_not_in_group_error(self, sample_video_files):"
: "def test_remove_file_not_in_group: "def test_remove  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
flake8                    SpawnPoolWorker-97    183 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-96    222 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-90    444 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
_file_not_in_group_error(self, sample_video_files):"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
flake8.options.manager    SpawnPoolWorker-90    446 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-78    837 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8                    SpawnPoolWorker-99    185 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-78    837 DEBUG    Logicalflake8.options.manager    SpawnPoolWorker-90    446 DEBUG    Registered option "Option(--color, default='auto'  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfrflake8                    SpawnPoolWorker-99    185 DEBUG flake8                    SpawnPoolWorker-98    214 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-98    214 DEBUG flake8.checker            SpawnPooflake8.options.manager    SpawnPoolWorker-90    446 DEBflake8                    Spa  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64flake8.checker   flake8        flake8                    Spaflake8.options.manager    SpawnPoolWorker-90    472 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
true', help='Print total number of errors to standard output after all other output.')".
 line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
   Added a None logging handler to logger root at flake8
   Added a None logging handltrue', help='Print total number of errors to  line: """"xxxxxxxxxxxxxxxxxxxxxxxa8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8        wnPoolWorker-98    214 DEBUG    Added a None logging handler to logger root at flake8
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
er to logger root at flake8
xxxxxxxxxxxxxxxxxxxxxxxxxwnPoolWorker-98    214 DEBUG    Added a Nona8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.aggregator SpawnPoolWorker-85    644 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.manager    SpawnPoolWorker-90    479 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000259001109A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
wnPoolWorker-98    21xxxxxxxxxxxxer to logger rflake8.options.manager    SpawnPoolWorker-90    479 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fa8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
flake8.options.aggregatoa8p0\Lib\multiprocessing\process.py", line 314, in xxxxxxflake8.options.manager    SpawnPoolWorker-90    479 DEBUG    Registered option "Option(--exclude, deer to lwnPoolWorkxxxer wnPooxxxxxxxxxxxxxxxxxxxx""""
e logging handler to logger root at flake8
   479 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000259001109A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
a8p0\Lib\multiprocessing\flake8                    SpawnPoolWorker-100    190 DEBUG    Added a None logging handler to logger root at flake8
logger root at flake8
xxxxxxxxxxxxxflake8                    SpawnPoolWorker-100    190 DEBUGxxxxxxxx""""
logger rootflake8                    Spaloggexxxxxxxflake8        flake8.options.aggregator SpawnPoolWorker-85    650 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
xxxloflake8  DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
lxfla DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', xx""""
logger root at flake8
--- Logging error ---
fxx""logger root at flake8
 DEBUG    Overriding default value of (['.svn', 'CVS',flake8                    SpawnPoolWorker-100    190 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---
t at flake8
--- Logging error ---
 DEBUG    Overriding defaulxxflake8                    SpawnPoolWorker-100    190 DEBUG    Added a  DEBUG    Ove"""
t at flake8
--- Lflake8                    SpawnPoolflake8
--- Logging error ---
 DEBUG""flake8           ult value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
"""
--- Logging error ---
flake8  ult value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*."""
--- Loggiflaklake8                    SpawnPoolWorker-100    190 DEBUG    Added a None logging handler to logger root at flake8
--- Logging error ---

--- Logging error ---
__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-85    658 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-91    464 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-89    532 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 26 (should have been between 0 and 5)
Call stack:
flake8.options.manager    SpawnPoolWorker-91    466 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-89    534 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
  File "<string>", line 1, in <module>
flake8.options.manager    SpawnPoolWorker-92    432 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-91    469 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-89    537 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
Traceback (most reflake8.options.manager    SpawnPoolWorker-91    469 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000136C1B809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8flake8.options.manager    SpawnPoolWorker-89    537 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-92    434 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
cent call last):
p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
flake8.options.manager    SpawnPoolWorker-92    434 DEBUG    Registered option "Option(--color, default='auto'flake8.options.manager    SpawnPoolWorker-89    537 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fcent callflake8.options.manager    SpawnPoolWorker-91    470 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000136C1B809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
lake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
, choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
, choices=('auto', 'always', 'never'), help='Whether to last):
flake8.options.manager    SpawnPoolWorker-91    470 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000lake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=True), help='Comm  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
0136C1B809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
a-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
 use color in output.  Defaults to `%(default)s`.')".
 use color in output.  Defa0136C1B809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated lia-separated list of files or directories to exclud  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 72, in _mp_init
    _mp_plugins, _mp_options  # for `fork` this'll already be set
    ^^^^^^^^^^^
st of files or directories to add to the list of excluded ones.', metavar='patterns')".
e. (Default: %(default)s)', metavar='patterns')".
e. (Default: %(default)s)ults to `%(default)s`.')".
NameError: name '_mp_plugins' is not defined
e. (Default:ults to `%(def  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
flake8.options.manager    SpawnPoolWorker-91    471 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000136C1B809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
 %(default)s)', metavar='patterns')".
ault)s`.')".

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-91    472 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-92    437 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-89    540 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-89    540 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
BlockingIOError: [Errno 11] write could not complete without blocking
flake8.options.manager    SpawnPoolWorker-89    540 DEBUG    Registered option "Option(-  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCaflake8.options.manager    SpawnPoolWorker-92    437 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000196260609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-91    472 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
-extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
che\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
flake8.options.manager    SpawnPoolWorker-91    472 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quietflake8.options.manager    SpawnPoolWorker-92    437 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _fche\local-packages\Python312\site-packages\flake8\ch-extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, noCall stack:
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
Call sflake8.options.manager    SpawnPoolWorker-91    473 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-92    438 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000196260609A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-89    541 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
arated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
")".
tial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
tack:
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
")"arated_list=True, normalize_paths=True), help='Comma-separated list of files   File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-pa"tacarated_list=True, normalize_paths=Truetial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=False), help='Only tarated_list=True, ntial(<function _flake8_normalize at 0x000001A3DB7209A0>, co  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwa")".
--- Logging error ---
")".
--- Logg  File "C:\Users\burt_\AppDattial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
  File "C:\Usearated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
--- Logging error ---
  File tial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for fitial(<function _flake8_normalize at 0x000001A3DB7209A0>, comma_se  Farated_list=True, normalize_paths=True), help='Comma-separated list of files or directora\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
arated_list=True, normalize_paths=True), heltial(<function _flake8_normalizea\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python31arated_list=True, normarated_lista\Local\Packages\PythonSoftwareFoundation.Python.3.tial(<function _12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\ch12_qbz5n2kfra8p0\LocalCache\local-pack12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
Message: 'Logical line: "%s"'
Arguments: ('"""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"""',)
flake8.checker            SpawnPoolWorker-78    905 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-78    910 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-78    910 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_video_files[:1])"
flake8.checker            SpawnPoolWorker-78    910 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78    910 DEBUG    Logical line: "result = group.remove_file(sample_video_files[1])"
flake8.checker            SpawnPoolWorker-78    911 DEBUG    Logical line: "assert result is False"
flake8.checker            SpawnPoolWorker-78    911 DEBUG    Logical line: "assert len(group.files) == 1"
flake8.checker            SpawnPoolWorker-78    912 DEBUG    Logical line: "def test_file_count_property(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78    912 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    912 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-78    913 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-78    913 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_video_files)"
flake8.checker            SpawnPoolWorker-78    913 DEBUG    Logical line: "assert group.file_count == len(sample_video_files)"
flake8.checker            SpawnPoolWorker-78    913 DEBUG    Logical line: "def test_group_id_uniqueness(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78    914 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78    914 DEBUG    Logical line: "base_name1 = "xxxxx""
flake8.checker            SpawnPoolWorker-78    914 DEBUG    Logical line: "base_name2 = "xxxxxx""
flake8.checker            SpawnPoolWorker-78    914 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-78    914 DEBUG    Logical line: "group1 = PotentialMatchGroup(base_name1, threshold, sample_video_files[:1])"
flake8.checker            SpawnPoolWorker-85    687 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-93    439 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-94    406 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-93    439 DEBUG    Registered option "Option(-q, --quiet, flake8.options.manager    SpawnPoolWorker-94    406 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-93    445 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-85    706 DEBUG    Logical line: "import pytest"
flake8.checker            SpawnPoolWorker-78    933 DEBUG    Logical line: "group2 = PotentialMatchGroup(base_name2, threshold, sample_video_files[2:3])"
action='count', default=0, help='Report only file flake8.checker            SpawnPoolWorker-85  flake8.checker         %(default)s`.')".
flake8.checker            SpawnPoolWorker-78    933 DEBUG    Logical line: "gflake8                    SpawnPoolWorker-102    185 DEBUG    Added a None logging handler to logger root at flake8
names, or nothing. This option is repeatable.')".
   SpawnPoolWorker-85    706 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-94    441 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.checker            SpawnPoolWorker-85    736 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-93    475 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-94    441 DEBUG    Registered option "Option(--color, default='auto'flake8.checker            SpawnPoolWorker-85    736flake8.options.manager    SpawnPoolWorker-93    475 DEBUG    Registered option "Option(--count, actiflake8.options.manager    SpawnPoolWorker-94    441 DEBflake8.checker           flake8.options.manager    SpawnPoolWorker-93    47flake8.options.manager   flake8.options.manager    Sflake8.checkroup2 = PotentialMatchGroup(base_name2, threshold, sample_video_files[2:3])"
flake8                    SpawnPoolWorker-103    183 DEBUG    Added a None logging handler to logger root at flake8
flake8.optioflake8flake8                    SpawnPoolWorker-103    183 DEBUGroup2 = PotentialMatchGroup(base_name2,flake8.options.manager    SpawnPoolWorker-94    450 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-94    450 DEBUG    Registered option "Option(--count, actiflake8roup2 = PotentialMaflake8                    Spaflake8.options.manager    SpawnPoolWorker-94    45flake8.checker            SpawnPoolWorker-85    745 DEBUG    Logical line: "import tempfile"
flake8                    SpawnPoolWorker-101    219 DEBUG    Added a None logging handler to logger root at flake8
flake8         SpawnPoolWorker-85    745 DEBUG    Logical line: "import tempfile"
UG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
roup2 = Pflake8 flake8.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E747A709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8                    SpawnPoolWorker-101    219 DEBUGPoolWorker-85    745 DEBUG    Logical line: "import tempfile"
    Added a None logging handler to logger root at flake8
.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E747A709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flak.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default    Added a None logging handPoolWorker-85    745 DEBUG    Ltore_true', help='Print total number of errors to standard output after all other output.')".
    Added a Notore_true', help='Print total number of errors PoolWorker-85  .options.manager    SpawnPoolWorker-93    484 DEBflake8.checker            SpawnPoolWorker-78    974 DEBUG    Logical line: "assert group1.base_name != group2.base_name"
flake8.checker            SpawnPoolWorker-78    974 DEBUG    PoolWor.options.manager    Spawtore_true', help='Print    Add.options.mantore_true',   Pooflake8.checker            Spawflake8.checker  P.optiotore_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
tore_true', help='Print total number of errors to standard .opecker            SpawnPoolWorker-78    974 DEBUG    Logical line: "assert group1.base_name != group2.base_name"
PoolWorker-85    745 DEBUG    Logical line: "import tempfile"
--- Logging error ---
    Added a None logging handler to logger root at flake8
--- Logging error ---
--- Logging error ---
--- Logging error ---
ecker            SpawnPoolWorker-78    974 DEBUG    Logitore_true', help='Print total.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E747A709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
--- Loggingecker            SpawnPoolWotore_true', he.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normaliz--- Logging.options.manager    SpawnPoolWorker-93    484 DEBUG    Registered option "Option(--exclude, default='.svror ---
.options.manager    SpawnPoolWorker-93    484 DEBUG .options.manager    SpawnPror   SpawnPoolWorker-78    974 DEBUG    Logical line: "assert group1.base_name != group2.base_name"
-- Logging error ---
.options.manaDEBUG    Logical line: "assert group1.base_name != group2.base_name"
.optioDEBUG    Logical line: "assert grou-- Logging error ---
flake8.checker            SpawnPoolWorker-85    764 DEBUG    Logical line: "import hashlib"
-- Logging error ---
flake8.checker            SpawnPoolDEBUG    Logical .opDEBUG   error ---
flake8.checker            SpawnPoolWorker-85    764 DEBUG    Logical line: "import hashlib"
 Logical line: "assert group1.base_name != group2.base_name"
flake8.checker            SpawnPoolWorker-85    766 DEBUG    Logical line: "from src.models.user_file import UserFile"
    SpawnPoolWorker-85    766 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-78    993 DEBUG    Logical line: "def test_group_id_format(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78    993 DEBUG    Logical line: "def test_group_id_format(self, sample_video_files):"
    SpawnPoolWorker-85    766 DEBUG    Logical line: "from src.models.user_file import UserFile"
--- Logging error ---
Traceback (most recent call last):
flake8.checker            SpawnPoolWorker-78    993 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 120 (should have been between 0 and 98)
Call stack:
flake8.checker            SpawnPoolWorker-78    993 DEBUG    Logical line: "base_name = "xxxxx""
  File "<string>", line 1, in <module>
  File "<string>", lflake8.checker            SpawnPoolWorker-78    9  File "<sflake8.checker            SpawnPoolWorker-78    993 DEBUG    Logical line: "base_name = "xxxxx""
--- Logging error ---
  Fil--- Logging error ---
e "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
Traceback (most recent call last):
Traceback (most rehonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
n.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
TracebackTracn.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\proces.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
TrT.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py"raceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCa  File "C:\Users\burt_\AppData\Local\Packages\Python  File "C:\Program Files\WindowsApps\PythonSoftwflake8.options.manager    SpawnPoolWorker-95    469 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
2_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
SoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.options.manager    SpawnPoolWorker-95    469 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-95    469 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-95    471 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-95    471 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
--- Logging error ---
2_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.checker            SpawnPoolWorker-78   1018 DEBUG    Logical line: "threshold = 0.8"
SoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
flake8.checker            SpawnPoolWorker-85    790 DEBUG    Logical line: "class TestUserFile:"
flake8.checker            SpawnPoolWorker-78   1022 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_video_files[:2])"
flake8.checker            SpawnPoolWorker-85    794 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    794 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    795 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-78   1025 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1025 DEBUG    Logical line: "assert isinstance(group.base_name, str)"
flake8.checker            SpawnPoolWorker-85    797 DEBUG    Logical line: "def temp_user_file(self):"
flake8.checker            SpawnPoolWorker-85    797 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1025 DEBUG    Logical line: "assert group.base_name == base_name"
flake8.checker            SpawnPoolWorker-85    797 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.checker            SpawnPoolWorker-78   1025 DEBUG    Logical line: "def test_str_representation(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78   1026 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    798 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1026 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-85    798 DEBUG    Logical line: "temp_path = Path(f.name)"
flake8.checker            SpawnPoolWorker-78   1026 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-85    798 DEBUG    Logical line: "yield temp_path"
flake8.checker            SpawnPoolWorker-78   1026 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_video_files[:2])"
flake8.checker            SpawnPoolWorker-85    798 DEBUG    Logical line: "if temp_path.exists():"
flake8.checker            SpawnPoolWorker-78   1026 DEBUG    Logical line: "str_repr = str(group)"
flake8.checker            SpawnPoolWorker-85    798 DEBUG    Logical line: "temp_path.unlink()"
flake8.checker            SpawnPoolWorker-78   1027 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxx" in str_repr"
flake8.checker            SpawnPoolWorker-85    799 DEBUG    Logical line: "def test_user_file_creation(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1027 DEBUG    Logical line: "assert str(group.base_name) in str_repr"
flake8.checker            SpawnPoolWorker-85    800 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1028 DEBUG    Logical line: "assert str(len(group.files)) in str_repr"
flake8.checker            SpawnPoolWorker-85    800 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1028 DEBUG    Logical line: "def test_equality_comparison(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-85    800 DEBUG    Logical line: "assert user_file._path == temp_user_file.resolve()"
flake8.checker            SpawnPoolWorker-85    800 DEBUG    Logical line: "assert user_file.extension == "xxxx""
flake8.checker            SpawnPoolWorker-78   1028 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1029 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-85    801 DEBUG    Logical line: "assert user_file.size > 0"
flake8.checker            SpawnPoolWorker-78   1029 DEBUG    Logical line: "threshold = 0.8"
flake8.checker            SpawnPoolWorker-85    801 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    801 DEBUG    Logical line: "def test_ordering(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1029 DEBUG    Logical line: "group1 = PotentialMatchGroup(base_name, threshold, sample_video_files[:2])"
flake8.checker            SpawnPoolWorker-85    801 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    801 DEBUG    Logical line: "user1 = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1030 DEBUG    Logical line: "group2 = PotentialMatchGroup(base_name, threshold, sample_video_files[:2])"
flake8.checker            SpawnPoolWorker-85    802 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.checker            SpawnPoolWorker-85    802 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1030 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    803 DEBUG    Logical line: "temp_path2 = Path(f.name)"
flake8.checker            SpawnPoolWorker-78   1030 DEBUG    Logical line: "compatible_base = "xxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    803 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-78   1030 DEBUG    Logical line: "group3 = PotentialMatchGroup(compatible_base, 0.6, sample_video_files[2:3])"
flake8.checker            SpawnPoolWorker-85    803 DEBUG    Logical line: "user2 = UserFile(temp_path2)"
flake8.checker            SpawnPoolWorker-85    803 DEBUG    Logical line: "user2 = UserFile(temp_path2)"
flake8.checker            SpawnPoolWorker-85    806 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1033 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    806 DEBUG    Logical line: "users = sorted([user2, user1])"
flake8.checker            SpawnPoolWorker-78   1033 DEBUG    Logical line: "assert group1.base_name == group2.base_name"
flake8.checker            SpawnPoolWorker-85    806 DEBUG    Logical line: "assert len(users) == 2"
flake8.checker            SpawnPoolWorker-78   1033 DEBUG    Logical line: "assert group1.base_name != group3.base_name"
flake8.checker            SpawnPoolWorker-85    806 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-78   1034 DEBUG    Logical line: "def test_to_dict(self, sample_video_files):"
flake8.checker            SpawnPoolWorker-78   1034 DEBUG    flake8.checker            SpawnPoolWorker-85    806 DEBUG    Logical line: "finally:"
--- Logging error ---
Logical line: "def test_to_dict(self, sample_video_files):"
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
OSError: raw write() returned invalid length 107 (should have been between 0 and 87)
Call stack:
flake8.checker            SpawnPoolWorker-78   1034 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1036 DEBUG    Logical line: "base_name = "xxxxx""
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
flake8.checker            SpawnPoolWorker-78   1036 DEBUG    Logical line: "threshold = 0.8"
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
flake8.checker            SpawnPoolWorker-78   1038 DEBUG    Logical line: "group = PotentialMatchGroup(base_name, threshold, sample_video_files[:2])"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.checker            SpawnPoolWorker-78   1042 DEBUG    Logical line: "data = group.to_dict()"
Message: 'Logical line: "%s"'
Arguments: ('finally:',)
flake8.checker            SpawnPoolWorker-78   1042 DEBUG    Logical line: "assert "xxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-85    815 DEBUG    Logical line: "temp_path2.unlink()"
flake8.checker            SpawnPoolWorker-78   1042 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-85    815 DEBUG    Logical line: "import tempfile"
flake8.checker            SpawnPoolWorker-78   1042 DEBUG    Logical line: "assert "xxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-85    815 DEBUG    Logical line: "import hashlib"
flake8.checker            SpawnPoolWorker-78   1042 DEBUG    Logical line: "assert "xxxxxxxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-85    816 DEBUG    Logical line: "from src.models.user_file import UserFile"
flake8.checker            SpawnPoolWorker-78   1045 DEBUG    Logical line: "assert "xxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-85    818 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1045 DEBUG    Logical line: "assert "xxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-85    818 DEBUG    Logical line: "class TestUserFile:"
flake8.checker            SpawnPoolWorker-78   1045 DEBUG    Logical line: "assert "xxxxx" in data"
flake8.checker            SpawnPoolWorker-85    818 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1045 DEBUG    Logical line: "assert data["xxxxxxxxx"] == base_name"
flake8.checker            SpawnPoolWorker-85    818 DEBUG    Logical line: "@pytest.fixture"
flake8.checker            SpawnPoolWorker-85   flake8.checker            SpawnPoolWorker-78   1045 DEBUG flake8.checker            Spaflake8.checker         flake8.options.manager    SpawnPoolWorker-96    463 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
wnPoolWorker-78   1045 DEBUG    Logical line: "assert data["xxxxxxxxx"] == base_name"
   SpawnPoolWorker-85    818 DEBUG    Logical line: "@pytest.fixture"
flake8.options.manager    SpawnPoolWorker-96    465 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-96    465 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-85    822 DEBUG    Logical line: "def temp_user_file(self):"
flake8.checker            SpawnPoolWorker-78   1049 DEBUG    Logical line: "assert data["xxxxxxxxxxxxxxxxxxxx"] == threshold"
flake8.options.manager    SpawnPoolWorker-96    465 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-85    822 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-96    465 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-78   1049 DEBUG    Logical line: "assert data["xxxxxxxxxx"] == 2"
flake8.checker            SpawnPoolWorker-85    822 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.options.manager    SpawnPoolWorker-96    465 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-96    465 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical line: "assert len(data["xxxxx"]) == 2"
flake8.checker            SpawnPoolWorker-85    824 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical line: "def test_different_thresholds(self, sample_video_files):"
flake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--hang-closing, actiflake8.checker            SpawnPoolWorker-85    824 DEBUG    Logical line: "temp_path = Path(f.name)"
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logicaflake8.checker            SpawnPoolWorker-85    824on='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
l line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
 DEBUG    Logical line: "temp_path = Path(f.name)"
flake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-85    824 DEBUG    Logical line: "yield temp_path"
flake8.checker            SpawnPoolWorker-85    824 DEBUG    Logical line: "yield temp_path"
flake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical line: "group1 = PotentialMatchGroup(base_name, 0.8, sample_video_files[:2])"
flake8.checker            SpawnPoolWorker-85    824 DEBUG    Logical line: "if temp_path.exists():"
flake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-85    824 DEBUG    Logical line: "temp_path.unlink()"
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical line: "group2 = PotentialMatchGroup(base_name, 0.9, sample_video_files[:2])"
"
flake8.checker            SpawnPoolWorker-78   1051 DEBUG    Logical lineflake8.options.manager    SpawnPoolWorker-96    467 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
: "group2 = PotentialMatchGroup(base_name, 0.9, sample_video_files[:2])"
 to ignore in a particular file. The filenames can be specified in a manner similar to the ``--excflake8.checker            SpawnPoolWorker-85    827 DEBUG    Logical line: "def test_user_file_creation(self, temp_user_file):"
flake8.options.manager    SpawnPoolWorker-97    441 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
lude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-97    441 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-96    470 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-85    827 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-97    441 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.checker            SpawnPoolWorker-78   1055 DEBUG    Logical line: "assert group1.similarity_threshold == 0.8"
flake8.options.manager    SpawnPoolWorker-96    470 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-85    827 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.options.manager    SpawnPoolWorker-96    470 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78   1055 DEBUG    Logical line: "assert group2.similarity_threshold == 0.9"
flake8.options.manager    SpawnPoolWorker-97    441 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.checker            SpawnPoolWorker-85    830 DEBUG    Logical line: "assert user_file._path == temp_user_file.resolve()"
flake8.options.manager    SpawnPoolWorker-97    444 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-96    473 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    830 DEBUG    Logical line: "assert user_file.extension == "xxxx""
flake8.checker            SpawnPoolWorker-78   1057 DEBUG    Logical line: "assert group1.base_name == group2.base_name"
flake8.checker            SpawnPoolWorker-78   1057 DEBUG    flake8.options.manager    SpawnPoolWorker-96    473 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001FB241509A0>, comma_sLogical line: "assert group1.base_name == group2.base_name"
eparated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    830 DEBUGflake8.options.manager    SpawnPoolWorker-97    444 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-97    444 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002C5207A09Aeparated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
--- Logging error ---
flake8.checker            SpawnPoolWorker-78   1057 DEBUG    Logical line: "def test_boundary_thresholds(self):"
flake8.checker            SpawnPoolWorker-85    832 DEBUG    Logical line: "assert user_file.size > 0"
    Logical line: "assert user_file.size > 0"
flake8.checker            SpawnPoolWorker-78   1057 DEBUG    Logical line: "asse0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.checker            Sprt user_file.size > 0"
awnPoolWorker-78   1057 DEBUG    Logical line: "def test_boundary_thresholds(self):"
flake8.options.manager    SpawnPoolWorker-97    446 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-85    833 DEBUG    Logical line: "def test_user_file_creation_nonexistent_file(self):"
flake8.checker            SpawnPoolWorker-78   1060 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-97    446 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-85    833 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    833 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-97    448 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-78   1062 DEBUG    Logical line: "base_name = "xxxxx""
flake8.checker            SpawnPoolWorker-85    835 DEBUG    Logical line: "path = Path("xxxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1062 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-97    449 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    835 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-97    449 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    835 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1062 DEBUG    Logical line: "group_min = PotentialMatchGroup(base_name, 0.0)"
flake8.options.manager    SpawnPoolWorker-97    452 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-85    838 DEBUG    Logical line: "user = UserFile(path)"
flake8.checker            SpawnPoolWorker-78   1066 DEBUG    Logical line: "assert group_min.similarity_threshold == 0.0"
flake8.options.manager    SpawnPoolWorker-97    452 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-85    838 DEBUG    Logical line: "with pytest.raises(FileNotFoundError):"
flake8.checker            SpawnPoolWorker-78   1066 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1066 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-97    452 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78   1066 DEBUG    Logical line: "group_max = PotentialMatchGroup(base_name, 1.0)"
flake8.options.manager    SpawnPoolWorker-97    452 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-85    838 DEBUG    Logical line: "_ = user.size"
flake8.checker            SpawnPoolWorker-85  flake8.options.manager    SpawnPoolWorker-97    452 DEBUG    Registered option "Option(--indent-size, defaultflake8.checker            SpawnPoolWorker-78   1066 DEBUG    Logical line: "assert group_max.similarity_threshold == 1.0"
=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
  838 DEBUG    Logical line: "_ = user.size"
flake8.options.manager    SpawnPoolWorker-97    456 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-97    456 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    842 DEBUG    Logical line: "def test_user_file_creation_unsupported_extension(self):"
flake8
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-98    427 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-98    430 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-97    459 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-85    846 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-98    430 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-98    430 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-97    459 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-98    430 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.checker            SpawnPoolWorker-85    846 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxxxxxxxxxx", delete=False) as f:"
flake8.options.manager    SpawnPoolWorker-97    459 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-97    461 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-98    432 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-97    462 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-85    849 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-97    462 DEBUG    Registered option "Option(--exiflake8.checker            SpawnPoolWorker-85    849flake8.options.manager    SpawnPoolWorker-98    432 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F330A209Aflake8.options.manager    SpawnPoolWorker-97  flake8.options.manager    SpawnPoolWorker-98    432 DEBUG    Registered option "Option(--fileflake8.checker            DEBUG    Logical line: "f.write(b"xxxxxxxxxxxx")"
name, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
  462 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
name, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths  462 DEBUG    Registered option "Option(--exit-zero, action='store_tname, default='*.py', type=functools.partial(<function _flake8_normalflake8.checker            SpawnPoolWorker-85    849 DEBUG    Logical line: "temp_path = Path(f.name)"
rue', help='Exit with status code "0" even if there are errors.')".
ize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-97    463 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-85    850 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-98    434 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-85    850 DEBUG    Logical line: ""
flake8.options.manager    SpawnPoolWorker-97    464 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-98    435 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-97    464 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-85    850 DEBUG    Logical line: "user = UserFile(temp_path)"
flake8.options.manager    SpawnPoolWorker-97    464 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-98    435 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.checker            SpawnPoolWorker-85    850 DEBUG    Logical line: "assert user.extension == "xxxxxxxxxxxx""
flake8.options.manager    SpawnPoolWorker-97    464 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-99    424 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
tack:
flake8.options.manager    SpawnPoolWorker-100    392 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-97    465 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-100    392 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-99    425 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-98    436 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    852 DEBUG    Logical line: "finally:"
flake8.options.manager    SpawnPoolWorker-98    436 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, flake8.checker            SpawnPoolWorker-8flake8.checker       flake8.options.manager    SpawnPoolWorker-97    465 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-99    425 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-100    392 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-98    436 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001F330A209A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    852 DEBUG    Logical line: "temp_path.unlink()"
=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
     SpawnPoolWorker-85    852 DEBUG    Logical line: "temp_path.unlink()"
=True, normalize_paths=False), help='Comma-separated list of error codes to add to the li=True, normalize_paths=False), help='Comma-s     SpawnPoolWorker-85    852 DEBUG  flake8.options.manager    SpawnPoolWorker-97    465 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-99    425 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001D10CEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-100    392 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-100    392 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _eparated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-99    425 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _f  Logical line: "temp_path.unlink()"
flake8.options.manager    SpawnPoolWorker-99    425 DEBUG    Registered option "Option(--exclude, deeparated list of error codes to add to the list of ignored ones. Foflake8.options.manager    SpawnPoolWorker-100    392 DEBUG    Registered option "Option(--exclude, dflake8.options.manager    SpawnPoolWorker-97    466 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-97    466 DEBUG    Registered option "Option(--max-comeparated list of error codes to a  Logical line: "teflake8.options.manager    SpawnPoolWorker-99    426 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001D10CEC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
  Logicalflake8.options.manager    SpawnPoolWorker-97    flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), help='Commflake8.options.manager    SpawnPoolWorker-99    426 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    Loflake8.optioflake8_normalize at 0x000arated_list=True, normalize_paths=True), help='Comma-separated list of files o the list of excluded ones.', metavar='patterns')".
ma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8flake8.options.manager    SpawnPoolWorker-98    437 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
ma-separated list of files or directories to excludo the list of excluded onesflake8.options.manager    SpawnPoolWorker-98    437 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violationso the list ofma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-97    466 DEBUG    Extending default select list with ['C90']
flake8.checker            SpawnPoolWorker-85    853 DEBUG    Logical line: "def test_user_file_equality(self, temp_user_file):"
olWorker-98    437 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-97    466 ecker            SpawnPoolWorker-85    853 DEBUG    Logical line: "def test_user_file_equality(self, temp_user_file):"
de. (Default: %(default)s)', metavar='patterns')".
--- Logging error ---
o the list of excluded ones.', metavar='patterns')".
--- Logging error ---
flake8.options.manager    o the list of excluded ones.', metavar
--- Logging error ---

--- Logging
--- Lr            SpawnPoolWorker-85    853 DEBUG    Logical line: "def test_user_file_equality(self, temp_user_file):"
The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
o the list of excluflake8.optiono the lisr            SpawnPoolWorker-85    853 DEBUG    Logical liThe filenames can be specified in a manner similar to the ``--exclude`` option andThe filenames can be specified in a manneo thr            SpawnPoolWorker-85    853 DEBUG    Logical line: "def test_user_file_equality(self, temp_user_file):"
--- Logging error ---
o r            SpawnPoolWorker-85    853 DEBUG    Logical line: "def teThe filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
--- Logging error ---
The filenames can be specified in a manner similar to the ``--exclude`` option and the violatThe filenames can be specified in a manner simLogging error ---
Logging eThe filenames can be spflake8.options.manager    SpawnPoolWorker-97    469 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".

--- Logging error ---
flake8.options.manager    SpawnPoolWorker-100    396 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
ogging error ---
flake8.options.manager    SpawnPoolWorker-100    396 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
ogging error ---
flake8.options.manager    SpawnPoolWorker-100    396 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize --- Logging error ---
s.manager    SpawnPoolWorker-97    469 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
ogging error ---
flake8.options.manager    SpawnPoolWorker-100    396 DEBUG    Registered op--- Logging--- Logging error ---
flake8.options.manager    Sps.manager    SpawnPoolWorker-97    469 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normLogging error ---
flake8.checker            SpawnPoolWorker-85    856 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
ogging error ---
flakes.manager    SpawnPoolWorker-97    469 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002C5207A09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
--- Logging error ---
Logging error ---
flake8.checker            SpawnPoolWorker-85    85s.manager    SpawnPoolWorker-97    469 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0xLogging error ---
flake8.checker flake8.options.manager    SpawnPoolWorker-100    398 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
Logging error ---0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matchinLogging g the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
LoggLoDefault: %(default)s)', metavar='patterns')".
LDefault: %(default)s)',Default: %(flake8.checker            SpawnPoolWorker-85    858 DEBUG    Logical line: "user1 = UserFile(temp_user_file)"
lWorker-85    858 DEBUG    Logical line: "user1 = UserFile(temp_user_file)"
Default: %(default)s)', metavar='patterns')".
--- Logging error ---
Default: %(default)s)', metavar='palWorker-85    858 DEBUG    Logical linWorker-85    858 DEBUG    Logical line: "user1 = UserFile(temp_user_file)"
Default: %(default)s)', metavar='patterns')".
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-85    860 DEBUG    Logical line: "user2 = UserFile(temp_user_file)"
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.checker            SpawnPoolWorker-85    860 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    860 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxxxxxxx")"
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    860 DEBUG    Logical line: "temp_path2 = Path(f.name)"
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.checker            SpawnPoolWorker-85    860 DEBUG    Logical line: "try:"
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-78   1087 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    860 DEBUG    Logical line: "user3 = UserFile(temp_path2)"
flake8.options.manager    SpawnPoolWorker-100    400 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "assert user1 == user2"
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "assert user1 != user3"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "import pytest"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "temp_path2.unlink()"
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "from pathlib import Path"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "def test_user_file_hash(self, temp_user_file):"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "from unittest.mock import patch, Mock, MagicMock"
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "user1 = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "from src.services.file_scanner import FileScanner, DirectoryNotFoundError"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "user2 = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "from src.models.file import UserFile"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "assert hash(user1) == hash(user2)"
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "class TestFileScanner:"
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "assert hash(user1) == hash(user2)"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.checker            SpawnPoolWorker-85    862 DEBUG    Logical line: "def test_user_file_str(self, temp_user_file):"
flake8.options.manager    SpawnPoolWorker-100    402 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.checker            SpawnPoolWorker-78   1089 DEBUG    Logical line: "@pytest.fixture"
flake8.options.manager    SpawnPoolWorker-100    405 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.checker            SpawnPoolWorker-78   1092 DEBUG    Logical line: "def scanner(self):"
flake8.checker            SpawnPoolWorker-85    864 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-100    405 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.checker            SpawnPoolWorker-78   1092 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    865 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1092 DEBUG    Loflake8.checker            SpawnPoolWorker-85    865 DEBUGgical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
    Logical line: "user_file = UserFile(temp_user_file)"
flake8.options.manager    SpawnPoolWorker-100    405 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-100    405 DEBUG    Extending default select list with ['B']
flake8.checker            SpawnPoolWorker-78   1092 DEBUG    Logical line: "return FileScanner()"
flake8.checker            SpawnPoolWorker-85    865 DEBUG    Logical line: "assert str(user_file) == str(temp_user_file.resolve())"
file.resolve())"
flake8.checker            SpawnPoolWorker-78   1092 DEBUG    Logical line: "return FileScanner()"
--- Logging error ---
flake8.options.manager    SpawnPoolWorker-100    405 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-100    405 DEBUG    Extending default select list with ['C90']
Traceback (most recent call last):
flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\logging\__init__.py", line 1163, in emit
    stream.write(msg + self.terminator)
flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
OSError: raw write() returned invalid length 127 (should have been between 0 and 99)
Call stack:
flake8.checker            SpawnPoolWorker-85    866 DEBUG    Logical line: "def test_user_file_repr(self, temp_user_file):"
flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001E01A8909A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.checker            SpawnPoolWorker-85    866 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Extending default select list with ['F']
  File "<string>", line 1, in <module>
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 122, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\spawn.py", line 135, in _main
    return self._bootstrap(parent_sentinel)
flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Extending default select list with ['E']
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64flake8.options.manager    SpawnPoolWorker-100    406 DEBUG    Extending default select list with ['W']
flake8.checker            SpawnPoolWorker-85    866 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 314, in _bootstrap
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\multiprocessing\pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 81, in _mp_run
    ).run_checks()
flake8.checker            SpawnPoolWorker-85    867 DEBUG    Logical line: "repr_str = repr(user_file)"
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 525, in run_checks
    self.process_tokens()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 510, in process_tokens
    self.handle_newline(token_type)
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 540, in handle_newline
    self.run_logical_checks()
  File "C:\Users\burt_\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\flake8\checker.py", line 442, in run_logical_checks
    LOG.debug('Logical line: "%s"', logical_line.rstrip())
flake8.options.config     SpawnPoolWorker-100    407 DEBUG    Option "max-line-length" returned value: 242
flake8.checker            SpawnPoolWorker-85    867 DEBUG    Logical line: "assert "xxxxxxxx" in repr_str"
Message: 'Logical line: "%s"'
Arguments: ('return FileScanner()',)
flake8.options.config     SpawnPoolWorker-100    407 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-100    407 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.checker            SpawnPoolWorker-85    867 DEBUG    Logical line: ""
flake8.options.aggregator SpawnPoolWorker-100    407 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-100    407 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.checker            SpawnPoolWorker-85    867 DEBUG    Logical line: "expected_path = str(temp_user_file.resolve()).replace("xx", "x")"
flake8.checker            SpawnPoolWorker-78   1094 DEBUG    Logical line: "def test_scanner_creation(self, scanner):"
flake8.options.aggregator SpawnPoolWorker-100    407 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.checker            SpawnPoolWorker-78   1094 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    867 DEBUG    Logical line: "assert expected_path in repr_str or str(temp_user_file.resolve()) in repr_str"
flake8.checker            SpawnPoolWorker-78   1094 DEBUG    Logical line: "assert isinstance(scanner, FileScanner)"
flake8.checker            SpawnPoolWorker-85    867 DEBUG    Logical line: "assert "xxxx" in repr_str"
flake8.checker            SpawnPoolWorker-78   1094 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1097 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    870 DEBUG    Logical line: "def test_compute_hash_blake2b(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1097 DEBUG    Logical line: "def test_scan_directory_not_found(self, mock_is_dir, mock_exists, scanner):"
flake8.checker            SpawnPoolWorker-85    870 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1097 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    870 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1097 DEBUG    Logical line: "mock_exists.return_value = False"
flake8.checker            SpawnPoolWorker-85    870 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    870 DEBUG    Logical line: "with open(temp_user_file, "xx") as f:"
flake8.checker            SpawnPoolWorker-78   1097 DEBUG    Logical line: "mock_is_dir.return_value = False"
flake8.checker            SpawnPoolWorker-85    870 DEBUG    Logical line: "expected_hash = hashlib.blake2b(f.read()).hexdigest()"
flake8.checker            SpawnPoolWorker-78   1097 DEBUG    Logical line: "directory = Path("xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "computed_hash = user_file.compute_hash()"
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "with pytest.raises(DirectoryNotFoundError):"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "assert computed_hash == expected_hash"
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "list(scanner.scan_directory(directory))"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "assert user_file._hash == expected_hash"
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "def test_compute_hash_cached(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "def test_scan_file_instead_of_directory(self, mock_is_dir, mock_exists, scanner):"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "mock_exists.return_value = True"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "hash1 = user_file.compute_hash()"
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "mock_is_dir.return_value = False"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1099 DEBUG    Logical line: "directory = Path("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    872 DEBUG    Logical line: "hash2 = user_file.compute_hash()"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "with pytest.raises(DirectoryNotFoundError):"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "assert hash1 == hash2"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "assert user_file.hash == hash1"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "list(scanner.scan_directory(directory))"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "def test_size_property(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "@patch("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "expected_size = temp_user_file.stat().st_size"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "assert user_file.size == expected_size"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "def test_extension_property(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: "def test_scan_empty_directory(self, mock_stat, mock_iterdir, mock_is_dir, mock_exists, mock_access, scanner, ):"
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1101 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    874 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "mock_exists.return_value = True"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "assert user_file.extension == "xxxx""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "mock_is_dir.return_value = True"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "def test_last_modified_property(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "mock_access.return_value = True"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "mock_iterdir.return_value = []"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "directory = Path("xxxxxx")"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "last_modified = user_file.last_modified"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "result = list(scanner.scan_directory(directory))"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "assert last_modified is not None"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "assert result == []"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "def test_is_accessible(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "def test_scan_directory_with_user_files(self, tmp_path, scanner):"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "assert user_file.is_accessible() is True"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "f1 = tmp_path / "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "def test_get_filename_without_extension(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "f1.write_bytes(b"xx" * 1024)"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "f2 = tmp_path / "xxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "f2.write_bytes(b"xx" * 2048)"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "expected_stem = temp_user_file.stem"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "non_video = tmp_path / "xxxxxxxx""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "assert user_file.get_filename_without_extension() == expected_stem"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "non_video.write_text("xxxxx")"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "def test_refresh_metadata(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "result = list(scanner.scan(tmp_path))"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "assert len(result) == 2"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "assert all(isinstance(f, UserFile) for f in result)"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "original_size = user_file.size"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "sizes = sorted([f.size for f in result])"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "assert sizes == [1024, 2048]"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "user_file.refresh_metadata()"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: "def test_scan_directory_recursive(self, tmp_path, scanner):"
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "assert user_file.size == original_size"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: "def test_to_dict(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1103 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    876 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "subdir = tmp_path / "xxxxxx""
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "subdir.mkdir()"
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "data = user_file.to_dict()"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "deeper = tmp_path / "xxxxxx""
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "assert "xxxx" in data"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "deeper.mkdir()"
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "assert "xxxx" in data"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "v1 = subdir / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "assert "xxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "v1.write_bytes(b"xx" * 1024)"
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "assert "xxxxxxxxxxxxx" in data"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "v2 = deeper / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "assert "xxxx" in data"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "v2.write_bytes(b"xx" * 3072)"
flake8.checker            SpawnPoolWorker-85    881 DEBUG    Logical line: "assert data["xxxx"] == str(temp_user_file.resolve())"
flake8.checker            SpawnPoolWorker-78   1108 DEBUG    Logical line: "result = list(scanner.scan_recursive(tmp_path))"
flake8.checker            SpawnPoolWorker-85    882 DEBUG    Logical line: "assert data["xxxxxxxxx"] == "xxxx""
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "assert len(result) == 2"
flake8.checker            SpawnPoolWorker-85    882 DEBUG    Logical line: "assert data["xxxx"] is None"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "sizes = sorted([f.size for f in result])"
flake8.checker            SpawnPoolWorker-85    882 DEBUG    Logical line: "def test_to_dict_with_hash(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "assert sizes == [1024, 3072]"
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "def test_scan_directory_non_recursive(self, tmp_path, scanner):"
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: "computed_hash = user_file.compute_hash()"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "v1 = tmp_path / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "v1.write_bytes(b"xx" * 1024)"
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: "data = user_file.to_dict()"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "v2 = tmp_path / "xxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: "assert data["xxxx"] == computed_hash"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "v2.write_text("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: "def test_hash_property_lazy_computation(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1110 DEBUG    Logical line: "result = list(scanner.scan(tmp_path))"
flake8.checker            SpawnPoolWorker-85    883 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1112 DEBUG    Logical line: "assert len(result) == 1"
flake8.checker            SpawnPoolWorker-85    885 DEBUG    Logical line: "user_file = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-85    885 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1112 DEBUG    Logical line: "assert result[0].size == 1024"
flake8.checker            SpawnPoolWorker-85    885 DEBUG    Logical line: "assert user_file._hash is None"
flake8.checker            SpawnPoolWorker-78   1112 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    885 DEBUG    Logical line: "assert user_file.hash is None"
flake8.checker            SpawnPoolWorker-78   1112 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    885 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1112 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    886 DEBUG    Logical line: "computed_hash = user_file.compute_hash()"
flake8.checker            SpawnPoolWorker-78   1113 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    886 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1113 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    886 DEBUG    Logical line: "assert user_file.hash == computed_hash"
flake8.checker            SpawnPoolWorker-78   1113 DEBUG    Logical line: "def test_scan_directory_permission_error(self, mock_is_file, mock_stat, mock_iterdir, mock_is_dir, mock_exists, scanner, ):"
flake8.checker            SpawnPoolWorker-85    886 DEBUG    Logical line: "assert user_file._hash == computed_hash"
flake8.checker            SpawnPoolWorker-85    886 DEBUG    Logical line: "@pytest.mark.parametrize("xxxxxxxxx", ["xxxx", "xxxx", "xxxx"])"
flake8.checker            SpawnPoolWorker-78   1113 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1114 DEBUG    Logical line: "mock_exists.return_value = True"
flake8.checker            SpawnPoolWorker-85    887 DEBUG    Logical line: "def test_supported_extensions(self, extension):"
flake8.checker            SpawnPoolWorker-78   1114 DEBUG    Logical line: "mock_is_dir.return_value = True"
flake8.checker            SpawnPoolWorker-85    887 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1114 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    887 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix=extension, delete=False) as f:"
flake8.checker            SpawnPoolWorker-78   1114 DEBUG    Logical line: "mock_iterdir.side_effect = PermissionError("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    887 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1114 DEBUG    Logical line: "directory = Path("xxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    887 DEBUG    Logical line: "temp_path = Path(f.name)"
flake8.checker            SpawnPoolWorker-78   1115 DEBUG    Logical line: "with pytest.raises(PermissionError):"
flake8.checker            SpawnPoolWorker-85    888 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-85    888 DEBUG    Logical line: "user_file = UserFile(temp_path)"
flake8.checker            SpawnPoolWorker-78   1115 DEBUG    Logical line: "list(scanner.scan_directory(directory))"
flake8.checker            SpawnPoolWorker-85    888 DEBUG    Logical line: "assert user_file.extension == extension.lower()"
flake8.checker            SpawnPoolWorker-85    888 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-78   1115 DEBUG    Logical line: "@patch("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    888 DEBUG    Logical line: "temp_path.unlink()"
flake8.checker            SpawnPoolWorker-78   1115 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    888 DEBUG    Logical line: "@pytest.mark.parametrize("xxxxxxxxx", ["xxxx", "xxxx", "xxxx", "xxxx", "xxxx"])"
flake8.checker            SpawnPoolWorker-78   1115 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1116 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    889 DEBUG    Logical line: "def test_unsupported_extensions(self, extension):"
flake8.checker            SpawnPoolWorker-78   1116 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    889 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1116 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    889 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix=extension, delete=False) as f:"
flake8.checker            SpawnPoolWorker-78   1116 DEBUG    Logical line: "def test_scan_directory_stat_error(self, mock_is_file, mock_stat, mock_iterdir, mock_is_dir, mock_exists, mock_access, scanner, ):"
flake8.checker            SpawnPoolWorker-85    889 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    890 DEBUG    Logical line: "temp_path = Path(f.name)"
flake8.checker            SpawnPoolWorker-78   1117 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    890 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-78   1117 DEBUG    Logical line: "mock_exists.return_value = True"
flake8.checker            SpawnPoolWorker-85    890 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1117 DEBUG    Logical line: "mock_is_dir.return_value = True"
flake8.checker            SpawnPoolWorker-85    890 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    890 DEBUG    Logical line: "user = UserFile(temp_path)"
flake8.checker            SpawnPoolWorker-78   1117 DEBUG    Logical line: "mock_access.return_value = True"
flake8.checker            SpawnPoolWorker-78   1117 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    890 DEBUG    Logical line: "assert user.extension == extension.lower()"
flake8.checker            SpawnPoolWorker-78   1118 DEBUG    Logical line: "video1 = MagicMock(spec=Path)"
flake8.checker            SpawnPoolWorker-85    891 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-78   1118 DEBUG    Logical line: "video1.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-85    891 DEBUG    Logical line: "temp_path.unlink()"
flake8.checker            SpawnPoolWorker-78   1118 DEBUG    Logical line: "video1.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-85    891 DEBUG    Logical line: "def test_ordering(self, temp_user_file):"
flake8.checker            SpawnPoolWorker-78   1118 DEBUG    Logical line: "video1.__str__.return_value = "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    891 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-85    891 DEBUG    Logical line: "user1 = UserFile(temp_user_file)"
flake8.checker            SpawnPoolWorker-78   1118 DEBUG    Logical line: "video1.__fspath__.return_value = "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78   1119 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    892 DEBUG    Logical line: "with tempfile.NamedTemporaryFile(suffix="xxxx", delete=False) as f:"
flake8.checker            SpawnPoolWorker-78   1119 DEBUG    Logical line: "video1.stat.return_value.st_size = 1024"
flake8.checker            SpawnPoolWorker-85    892 DEBUG    Logical line: "f.write(b"xxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1119 DEBUG    Logical line: "video2 = MagicMock(spec=Path)"
flake8.checker            SpawnPoolWorker-85    892 DEBUG    Logical line: "temp_path2 = Path(f.name)"
flake8.checker            SpawnPoolWorker-78   1119 DEBUG    Logical line: "video2.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-85    892 DEBUG    Logical line: "try:"
flake8.checker            SpawnPoolWorker-78   1119 DEBUG    Logical line: "video2.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-85    892 DEBUG    Logical line: "user2 = UserFile(temp_path2)"
flake8.checker            SpawnPoolWorker-78   1119 DEBUG    Logical line: "video2.__str__.return_value = "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-85    893 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    893 DEBUG    Logical line: "users = sorted([user2, user1])"
flake8.checker            SpawnPoolWorker-78   1120 DEBUG    Logical line: "video2.__fspath__.return_value = "xxxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78   1120 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-85    893 DEBUG    Logical line: "assert len(users) == 2"
flake8.checker            SpawnPoolWorker-78   1120 DEBUG    Logical line: "video2.stat.side_effect = OSError("xxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-85    893 DEBUG    Logical line: "finally:"
flake8.checker            SpawnPoolWorker-85    893 DEBUG    Logical line: "temp_path2.unlink()"
flake8.checker            SpawnPoolWorker-78   1120 DEBUG    Logical line: "mock_iterdir.return_value = [video1, video2]"
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: "directory = Path("xxxxx")"
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: "result = list(scanner.scan(directory))"
flake8                    SpawnPoolWorker-104    181 DEBUG    Added a None logging handler to logger root at flake8
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1121 DEBUG    Logical line: "assert len(result) <= 1"
flake8.checker            SpawnPoolWorker-78   1122 DEBUG    Logical line: "if len(result) == 1:"
flake8.checker            SpawnPoolWorker-78   1122 DEBUG    Logical line: "assert result[0].size == 1024"
flake8.checker            SpawnPoolWorker-78   1122 DEBUG    Logical line: "@patch("xxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1122 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1123 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1123 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1123 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1123 DEBUG    Logical line: "@patch("xxxxxxxxxxxxxxxxxxxx")"
flake8.checker            SpawnPoolWorker-78   1124 DEBUG    Logical line: "def test_scan_directory_zero_size_files(self, mock_is_file, mock_stat, mock_iterdir, mock_is_dir, mock_exists, mock_access, scanner, ):"
flake8.checker            SpawnPoolWorker-78   1124 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1124 DEBUG    Logical line: "mock_exists.return_value = True"
flake8.checker            SpawnPoolWorker-78   1124 DEBUG    Logical line: "mock_is_dir.return_value = True"
flake8.checker            SpawnPoolWorker-78   1124 DEBUG    Logical line: "mock_access.return_value = True"
flake8.checker            SpawnPoolWorker-78   1125 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1125 DEBUG    Logical line: "video = Mock(spec=Path)"
flake8.checker            SpawnPoolWorker-78   1125 DEBUG    Logical line: "video.suffix = "xxxx""
flake8.checker            SpawnPoolWorker-78   1125 DEBUG    Logical line: "video.is_file.return_value = True"
flake8.checker            SpawnPoolWorker-78   1125 DEBUG    Logical line: "video.stat.return_value.st_size = 0"
flake8.checker            SpawnPoolWorker-78   1126 DEBUG    Logical line: "video.__str__ = lambda: "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78   1126 DEBUG    Logical line: "video.__fspath__ = lambda: "xxxxxxxxxxxxxxx""
flake8.checker            SpawnPoolWorker-78   1126 DEBUG    Logical line: "mock_iterdir.return_value = [video]"
flake8.checker            SpawnPoolWorker-78   1126 DEBUG    Logical line: "directory = Path("xxxxx")"
flake8.checker            SpawnPoolWorker-78   1127 DEBUG    Logical line: "result = list(scanner.scan(directory))"
flake8.checker            SpawnPoolWorker-78   1127 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1127 DEBUG    Logical line: "assert len(result) == 0"
flake8.checker            SpawnPoolWorker-78   1127 DEBUG    Logical line: "def test_scan_directory_mixed_file_types(self, tmp_path, scanner):"
flake8.checker            SpawnPoolWorker-78   1128 DEBUG    Logical line: """"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""""
flake8.checker            SpawnPoolWorker-78   1128 DEBUG    Logical line: "sizes_expected = []"
flake8.checker            SpawnPoolWorker-78   1128 DEBUG    Logical line: "exts = ["xxxx", "xxxx", "xxxx", "xxxx"]"
flake8.checker            SpawnPoolWorker-78   1128 DEBUG    Logical line: "for i, ext in enumerate(exts, 1):"
flake8.checker            SpawnPoolWorker-78   1128 DEBUG    Logical line: "p = tmp_path / f"video{i}{ext}""
flake8.checker            SpawnPoolWorker-78   1128 DEBUG    Logical line: "p.write_bytes(b"xx" * (1024 * i))"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "sizes_expected.append(1024 * i)"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: ""
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "for ext in ["xxxx", "xxxx", "xxxx", "xxxx"]:"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "(tmp_path / f"file{ext}").write_text("x")"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "(tmp_path / "xxxxxx").mkdir()"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "result = list(scanner.scan(tmp_path))"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "assert len(result) == 4"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "sizes = sorted([f.size for f in result])"
flake8.checker            SpawnPoolWorker-78   1130 DEBUG    Logical line: "assert sizes == sorted(sizes_expected)"
flake8.options.manager    SpawnPoolWorker-102    380 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-102    381 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-102    382 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001B077E509A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-102    383 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-102    385 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-102    385 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-102    385 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-102    385 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-102    385 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-102    385 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-106    178 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-105    184 DEBUG    Added a None logging handler to logger root at flake8
ror ---
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-103    378 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-103    379 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-103    380 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-103    381 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-103    382 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000173C28409A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-103    382 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-103    382 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-103    382 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-103    382 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-103    382 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-103    382 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-103    382 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-103    382 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-103    382 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-107    169 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-108    164 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-109    153 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-104    329 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-104    329 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000262327309A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-104    332 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-104    332 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-104    332 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-104    332 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-104    332 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-104    332 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-104    332 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-110    155 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-106    329 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-106    329 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-106    330 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000146698509A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-106    332 DEBUG    Extending default select list with ['W']
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-105    336 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.config     SpawnPoolWorker-106    334 DEBUG    Option "max-line-length" returned value: 242
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.config     SpawnPoolWorker-106    334 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-106    334 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.aggregator SpawnPoolWorker-106    334 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-106    334 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.aggregator SpawnPoolWorker-106    334 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001E6F10309A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-105    338 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-105    340 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-105    340 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-105    340 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-105    340 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-105    340 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-105    340 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-111    154 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-112    149 DEBUG    Added a None logging handler to logger root at flake8
flake8                    SpawnPoolWorker-113    146 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-107    308 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-107    308 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-107    308 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-107    308 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-107    308 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-107    320 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-107    322 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002BEBC3509A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-107    323 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-107    323 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-107    323 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-107    323 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-107    323 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-107    323 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-107    323 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-114    141 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-108    307 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-108    307 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-108    308 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001DFC33709A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-108    309 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-108    309 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-108    309 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-108    309 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-108    309 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-108    309 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-108    309 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-115    139 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000219AF5809A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-109    287 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-109    287 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-109    287 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-109    287 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-109    287 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-109    287 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-109    287 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-116    128 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000245B7B809A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-110    283 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-110    283 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-110    283 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-110    283 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-110    283 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-110    283 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-110    283 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-117    141 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-111    279 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-111    279 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-111    279 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-111    279 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-111    279 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-111    289 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000227990409A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-111    290 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-111    290 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-111    290 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-111    290 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-111    290 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-111    290 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-111    290 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8                    SpawnPoolWorker-118    130 DEBUG    Added a None logging handler to logger root at flake8
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001AFB68709A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-112    266 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-112    266 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-112    266 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-112    266 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-112    266 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-112    266 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-112    266 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-113    280 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-113    281 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-113    282 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-113    283 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-113    283 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000027240FC09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-113    283 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-113    283 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-113    283 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-113    283 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-113    283 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-113    283 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-113    283 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-113    283 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-113    283 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000001C38B0A09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-114    259 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-114    259 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-114    259 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-114    259 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-114    259 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-114    259 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-114    259 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000247FFAE09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-115    259 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-115    259 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-115    259 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-115    259 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-115    259 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-115    259 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-115    259 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x00000230243909A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-116    249 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-116    249 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-116    249 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-116    249 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-116    249 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-116    249 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-116    249 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x000002C3632C09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-117    247 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-117    247 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-117    247 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-117    247 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-117    247 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-117    247 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-117    247 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(-q, --quiet, action='count', default=0, help='Report only file names, or nothing. This option is repeatable.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--color, default='auto', choices=('auto', 'always', 'never'), help='Whether to use color in output.  Defaults to `%(default)s`.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--count, action='store_true', help='Print total number of errors to standard output after all other output.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--exclude, default='.svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.nox,.eggs,*.egg', type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to exclude. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--extend-exclude, default='', type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=True), help='Comma-separated list of files or directories to add to the list of excluded ones.', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--filename, default='*.py', type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='Only check for filenames matching the patterns in this comma-separated list. (Default: %(default)s)', metavar='patterns')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--stdin-display-name, default='stdin', help='The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--format, default='default', help="Format errors according to the chosen formatter (default, pylint, quiet-filename, quiet-nothing) or a format string containing %%-style mapping keys (code, col, path, row, text). For example, ``--format=pylint`` or ``--format='%%(path)s %%(code)s'``. (Default: %(default)s)", metavar='format')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--hang-closing, action='store_true', help="Hang closing bracket instead of matching indentation of opening bracket's line.")".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--ignore, type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--extend-ignore, type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--per-file-ignores, default='', help='A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--max-line-length, default=79, type=<class 'int'>, help='Maximum allowed line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--max-doc-length, default=None, type=<class 'int'>, help='Maximum allowed doc line length for the entirety of this run. (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--indent-size, default=4, type=<class 'int'>, help='Number of spaces used for indentation (Default: %(default)s)', metavar='n')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--select, type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90)', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--extend-select, type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.', metavar='errors')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--disable-noqa, action='store_true', default=False, help='Disable the effect of "# noqa". This will report errors on lines with "# noqa" at the end.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--show-source, action='store_true', help='Show the source generate each error or warning.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--no-show-source, action='store_false', dest='show_source', help='Negate --show-source')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--statistics, action='store_true', help='Count errors.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--exit-zero, action='store_true', help='Exit with status code "0" even if there are errors.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(-j, --jobs, default='auto', type=<class 'flake8.main.options.JobsArgument'>, help='Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, "auto", will auto-detect the number of processors available to use. (Default: %(default)s)')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--tee, action='store_true', default=False, help='Write to stdout and output-file.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--benchmark, action='store_true', default=False, help='Print benchmark information about this run of Flake8')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--bug-report, action='store_true', help='Print information necessary when preparing a bug report')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Extending default ignore list with ['B901', 'B902', 'B903', 'B904', 'B905', 'B906', 'B908', 'B909', 'B910', 'B911', 'B950']
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--extend-immutable-calls, default=[], type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='Skip B008 test for additional immutable calls.')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--classmethod-decorators, default={'classmethod'}, type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='List of method decorators that should be treated as classmethods by B902')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Extending default select list with ['B']
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--max-complexity, action='store', default=-1, type=<class 'int'>, help='McCabe complexity threshold')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Extending default select list with ['C90']
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--builtins, type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=False), help='define more built-ins, comma separated')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--doctests, action='store_true', default=False, help='also check syntax of the doctests')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--include-in-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=True), dest='include_in_doctest', help='Run doctests only on these files')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Registered option "Option(--exclude-from-doctest, default='', type=functools.partial(<function _flake8_normalize at 0x0000016F7F2C09A0>, comma_separated_list=True, normalize_paths=True), dest='exclude_from_doctest', help='Skip these files when running doctests')".
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Extending default select list with ['F']
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Extending default select list with ['E']
flake8.options.manager    SpawnPoolWorker-118    232 DEBUG    Extending default select list with ['W']
flake8.options.config     SpawnPoolWorker-118    232 DEBUG    Option "max-line-length" returned value: 242
flake8.options.config     SpawnPoolWorker-118    232 DEBUG    Option "exclude" returned value: '.venv,venv,env,build,dist,__pycache__,backups'
flake8.options.config     SpawnPoolWorker-118    232 DEBUG    Option "extend-ignore" returned value: 'E402, E231, E203, E702, F841, F401, B007, B010, B014, F541, F811, E712, B011'
flake8.options.aggregator SpawnPoolWorker-118    232 DEBUG    Overriding default value of (79) for "max_line_length" with (242)
flake8.options.aggregator SpawnPoolWorker-118    232 DEBUG    Overriding default value of (['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) for "exclude" with (['.venv', 'venv', 'env', 'build', 'dist', '__pycache__', 'backups'])
flake8.options.aggregator SpawnPoolWorker-118    232 DEBUG    Overriding default value of (None) for "extend_ignore" with (['E402', 'E231', 'E203', 'E702', 'F841', 'F401', 'B007', 'B010', 'B014', 'F541', 'F811', 'E712', 'B011'])
