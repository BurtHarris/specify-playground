[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "video-duplicate-scanner"
version = "1.0.0"
description = "CLI tool for detecting duplicate video files"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Video Duplicate Scanner Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.1.0",
    "PyYAML>=6.0",
    "dependency-injector>=4.40.0",
    "fuzzywuzzy>=0.18.0",
    "rich>=13.0.0",
    "python-Levenshtein>=0.12.0",
    # OneDrive MVP: Uses ctypes (standard library) for Windows API
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "dependency-injector>=4.40.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

[project.scripts]
video-dedup = "cli.main:main"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
# OneDrive MVP: Handle Windows API constants formatting
skip-string-normalization = false

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

# OneDrive MVP: Windows API specific configurations
[[tool.mypy.overrides]]
module = "src.lib.windows_onedrive_api"
# Allow platform-specific imports and ctypes usage
ignore_missing_imports = true
# Allow Any types for Windows API return values
disallow_any_expr = false

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
]
# OneDrive MVP: Allow Windows-specific code patterns
per-file-ignores = [
    "src/lib/windows_onedrive_api.py:F401",  # Allow unused imports for platform detection
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]